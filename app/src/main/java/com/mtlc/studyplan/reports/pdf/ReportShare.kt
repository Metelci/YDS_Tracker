package com.mtlc.studyplan.reports.pdf

import android.content.Context
import android.content.Intent
import android.net.Uri
import androidx.core.content.FileProvider
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream

/**
 * Handles PDF report file operations and sharing functionality
 */
object ReportShare {

    private const val REPORTS_DIRECTORY = "reports"
    private const val FILE_PROVIDER_AUTHORITY_SUFFIX = ".fileprovider"

    /**
     * Save PDF report to cache directory
     */
    suspend fun saveReportToCache(
        context: Context,
        reportResult: ReportResult
    ): File = withContext(Dispatchers.IO) {
        // Create reports directory in cache if it doesn't exist
        val reportsDir = File(context.cacheDir, REPORTS_DIRECTORY)
        if (!reportsDir.exists()) {
            reportsDir.mkdirs()
        }

        // Create the file
        val file = File(reportsDir, reportResult.filename)

        // Write PDF bytes to file
        FileOutputStream(file).use { outputStream ->
            outputStream.write(reportResult.bytes)
            outputStream.flush()
        }

        file
    }

    /**
     * Share report PDF using Android's share intent
     */
    fun shareReport(
        context: Context,
        reportResult: ReportResult,
        savedFile: File? = null
    ) {
        try {
            val file = savedFile ?: run {
                // If file not provided, save it first (synchronous fallback)
                val reportsDir = File(context.cacheDir, REPORTS_DIRECTORY)
                if (!reportsDir.exists()) {
                    reportsDir.mkdirs()
                }
                val tempFile = File(reportsDir, reportResult.filename)
                FileOutputStream(tempFile).use { outputStream ->
                    outputStream.write(reportResult.bytes)
                }
                tempFile
            }

            // Get file URI using FileProvider
            val authority = "${context.packageName}$FILE_PROVIDER_AUTHORITY_SUFFIX"
            val uri = FileProvider.getUriForFile(context, authority, file)

            // Create share intent
            val shareIntent = Intent(Intent.ACTION_SEND).apply {
                type = "application/pdf"
                putExtra(Intent.EXTRA_STREAM, uri)
                putExtra(Intent.EXTRA_SUBJECT, "Study Progress Report")
                putExtra(
                    Intent.EXTRA_TEXT,
                    "Here's my study progress report generated by StudyPlan app."
                )
                addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
            }

            // Create chooser
            val chooserIntent = Intent.createChooser(
                shareIntent,
                "Share Study Report"
            )

            // Ensure we can handle the intent
            if (chooserIntent.resolveActivity(context.packageManager) != null) {
                context.startActivity(chooserIntent)
            } else {
                throw IllegalStateException("No apps available to share PDF")
            }

        } catch (e: Exception) {
            throw ShareException("Failed to share report: ${e.message}", e)
        }
    }

    /**
     * Share report with async file saving
     */
    suspend fun shareReportAsync(
        context: Context,
        reportResult: ReportResult
    ) = withContext(Dispatchers.Main) {
        try {
            // Save file first
            val savedFile = saveReportToCache(context, reportResult)

            // Share the file
            shareReport(context, reportResult, savedFile)

        } catch (e: Exception) {
            throw ShareException("Failed to share report: ${e.message}", e)
        }
    }

    /**
     * Get file URI for a saved report (useful for other operations)
     */
    fun getReportUri(context: Context, filename: String): Uri? {
        return try {
            val reportsDir = File(context.cacheDir, REPORTS_DIRECTORY)
            val file = File(reportsDir, filename)
            
            if (file.exists()) {
                val authority = "${context.packageName}$FILE_PROVIDER_AUTHORITY_SUFFIX"
                FileProvider.getUriForFile(context, authority, file)
            } else {
                null
            }
        } catch (e: Exception) {
            null
        }
    }

    /**
     * Delete old report files to manage cache size
     */
    suspend fun cleanupOldReports(
        context: Context,
        maxAgeMillis: Long = 7 * 24 * 60 * 60 * 1000L // 7 days
    ) = withContext(Dispatchers.IO) {
        try {
            val reportsDir = File(context.cacheDir, REPORTS_DIRECTORY)
            if (!reportsDir.exists()) return@withContext

            val currentTime = System.currentTimeMillis()
            val filesToDelete = reportsDir.listFiles()?.filter { file ->
                file.isFile && 
                file.name.endsWith(".pdf") &&
                (currentTime - file.lastModified()) > maxAgeMillis
            } ?: emptyList()

            filesToDelete.forEach { file ->
                try {
                    file.delete()
                } catch (e: Exception) {
                    // Log but don't throw - cleanup is best effort
                }
            }
        } catch (e: Exception) {
            // Cleanup failures shouldn't crash the app
        }
    }

    /**
     * Get list of existing report files
     */
    suspend fun getExistingReports(context: Context): List<ReportFileInfo> = withContext(Dispatchers.IO) {
        try {
            val reportsDir = File(context.cacheDir, REPORTS_DIRECTORY)
            if (!reportsDir.exists()) return@withContext emptyList()

            reportsDir.listFiles()
                ?.filter { it.isFile && it.name.endsWith(".pdf") }
                ?.map { file ->
                    ReportFileInfo(
                        filename = file.name,
                        sizeBytes = file.length(),
                        lastModified = file.lastModified(),
                        file = file
                    )
                }
                ?.sortedByDescending { it.lastModified }
                ?: emptyList()
        } catch (e: Exception) {
            emptyList()
        }
    }

    /**
     * Check if FileProvider is properly configured
     */
    fun isFileProviderConfigured(context: Context): Boolean {
        return try {
            val authority = "${context.packageName}$FILE_PROVIDER_AUTHORITY_SUFFIX"
            val packageInfo = context.packageManager.getPackageInfo(
                context.packageName,
                android.content.pm.PackageManager.GET_PROVIDERS
            )
            
            packageInfo.providers?.any { providerInfo ->
                providerInfo.authority == authority
            } == true
        } catch (e: Exception) {
            false
        }
    }

    /**
     * Create a shareable intent without immediately showing the chooser
     * Useful for custom share implementations
     */
    fun createShareIntent(context: Context, reportResult: ReportResult, savedFile: File): Intent {
        val authority = "${context.packageName}$FILE_PROVIDER_AUTHORITY_SUFFIX"
        val uri = FileProvider.getUriForFile(context, authority, savedFile)

        return Intent(Intent.ACTION_SEND).apply {
            type = "application/pdf"
            putExtra(Intent.EXTRA_STREAM, uri)
            putExtra(Intent.EXTRA_SUBJECT, "Study Progress Report")
            putExtra(
                Intent.EXTRA_TEXT,
                "Here's my study progress report generated by StudyPlan app."
            )
            addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
        }
    }
}

/**
 * Exception thrown when sharing operations fail
 */
class ShareException(message: String, cause: Throwable? = null) : Exception(message, cause)

/**
 * Information about a saved report file
 */
data class ReportFileInfo(
    val filename: String,
    val sizeBytes: Long,
    val lastModified: Long,
    val file: File
) {
    val sizeKB: Long = sizeBytes / 1024
    val sizeMB: Double = sizeBytes / (1024.0 * 1024.0)
    
    fun getFormattedSize(): String = when {
        sizeMB >= 1.0 -> String.format("%.1f MB", sizeMB)
        sizeKB >= 1.0 -> "$sizeKB KB"
        else -> "$sizeBytes bytes"
    }
    
    fun getFormattedDate(): String {
        val date = java.util.Date(lastModified)
        val formatter = java.text.SimpleDateFormat("MMM dd, yyyy HH:mm", java.util.Locale.getDefault())
        return formatter.format(date)
    }
}

/**
 * Utility functions for report sharing
 */
object ReportShareUtils {
    
    /**
     * Validate that a report can be shared
     */
    fun validateReportForSharing(reportResult: ReportResult): ShareValidationResult {
        val errors = mutableListOf<String>()
        
        if (reportResult.bytes.isEmpty()) {
            errors.add("Report data is empty")
        }
        
        if (reportResult.bytes.size < 1000) { // Minimum realistic PDF size
            errors.add("Report data appears to be too small (${reportResult.bytes.size} bytes)")
        }
        
        if (reportResult.filename.isBlank()) {
            errors.add("Report filename is empty")
        }
        
        if (!reportResult.filename.endsWith(".pdf", ignoreCase = true)) {
            errors.add("Report filename must end with .pdf")
        }
        
        // Check PDF header
        if (reportResult.bytes.size >= 4) {
            val header = String(reportResult.bytes.take(4).toByteArray())
            if (header != "%PDF") {
                errors.add("Report data does not appear to be a valid PDF")
            }
        }
        
        return ShareValidationResult(
            isValid = errors.isEmpty(),
            errors = errors
        )
    }
    
    /**
     * Generate suggested email content for sharing
     */
    fun generateEmailContent(studentName: String?): Pair<String, String> {
        val subject = if (studentName != null) {
            "Study Progress Report - $studentName"
        } else {
            "Study Progress Report"
        }
        
        val body = buildString {
            if (studentName != null) {
                appendLine("Dear Teacher/Tutor,")
                appendLine()
                appendLine("Please find attached the study progress report for $studentName.")
            } else {
                appendLine("Dear Teacher/Tutor,")
                appendLine()
                appendLine("Please find attached my study progress report.")
            }
            appendLine()
            appendLine("This report was automatically generated by the StudyPlan app and includes:")
            appendLine("• Study time and task completion statistics")
            appendLine("• Performance analytics and trends")
            appendLine("• Areas of strength and improvement recommendations")
            appendLine("• AI-powered insights based on learning patterns")
            appendLine()
            appendLine("Thank you for reviewing my progress.")
            appendLine()
            appendLine("Best regards")
        }
        
        return subject to body
    }
}

/**
 * Result of report validation
 */
data class ShareValidationResult(
    val isValid: Boolean,
    val errors: List<String>
) {
    val errorMessage: String
        get() = errors.joinToString("; ")
}