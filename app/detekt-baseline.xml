<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ClassNaming:SettingsRepository.kt$defaultValues</ID>
    <ID>ComplexCondition:DataArchitectureValidator.kt$DataArchitectureValidator$taskRefresh &lt; 0 || progressRefresh &lt; 0 || achievementRefresh &lt; 0 || streakRefresh &lt; 0 || settingsRefresh &lt; 0 || socialRefresh &lt; 0</ID>
    <ID>ComplexCondition:ImageProcessingUtils.kt$ImageProcessingUtils$x == 0 &amp;&amp; y == 0 &amp;&amp; bitmap.width == size &amp;&amp; bitmap.height == size</ID>
    <ID>ComplexCondition:SettingsManager.kt$SettingsManager$oldSettings.notificationsEnabled != newSettings.notificationsEnabled || oldSettings.studyRemindersEnabled != newSettings.studyRemindersEnabled || oldSettings.achievementNotificationsEnabled != newSettings.achievementNotificationsEnabled || oldSettings.dailyGoalRemindersEnabled != newSettings.dailyGoalRemindersEnabled || oldSettings.streakWarningsEnabled != newSettings.streakWarningsEnabled</ID>
    <ID>ConstructorParameterNaming:SettingsIntegrationTest.kt$SettingsIntegrationReport$private val _tests: MutableMap&lt;String, Boolean&gt; = mutableMapOf()</ID>
    <ID>CyclomaticComplexMethod:AnalyticsComponents.kt$@Composable fun RecommendationItem( recommendation: Recommendation, modifier: Modifier = Modifier )</ID>
    <ID>CyclomaticComplexMethod:AnimatedNavigation.kt$EnhancedNavigation$@OptIn(ExperimentalAnimationApi::class) @Composable fun createTransitionSpec( style: NavigationTransitionStyle ): AnimatedContentTransitionScope&lt;NavBackStackEntry&gt;.() -&gt; ContentTransform</ID>
    <ID>CyclomaticComplexMethod:AppIntegrationManager.kt$AppIntegrationManager$fun isFeatureEnabled(feature: AppFeature): Boolean</ID>
    <ID>CyclomaticComplexMethod:AuthenticationScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun FirstTimeSetupScreen( authManager: AuthenticationManager, onSetupComplete: () -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:AwardCard.kt$@Composable fun AwardCard( award: Award, modifier: Modifier = Modifier, compact: Boolean = true, onClick: ((Award) -&gt; Unit)? = null )</ID>
    <ID>CyclomaticComplexMethod:CategorizedAchievementDataSource.kt$CategorizedAchievementDataSource$fun getConditionFunction(achievementId: String): (AchievementProgress) -&gt; Boolean</ID>
    <ID>CyclomaticComplexMethod:DeviceCompatibilityUtils.kt$@Composable fun adaptiveComponentSizing(): AdaptiveComponentSizing</ID>
    <ID>CyclomaticComplexMethod:DeviceCompatibilityUtils.kt$@Composable fun rememberDensityAwareScaling(): DensityAwareScaling</ID>
    <ID>CyclomaticComplexMethod:DeviceCompatibilityUtils.kt$private fun determineVisualAdjustments(density: Float, deviceProfile: DeviceProfile): VisualAdjustments</ID>
    <ID>CyclomaticComplexMethod:EventBus.kt$EventTypeMatcher$@Suppress("UNCHECKED_CAST") // Required for KClass matching - consolidated suppression point fun &lt;T : Event&gt; matchSingle(event: Event, targetType: KClass&lt;T&gt;): T?</ID>
    <ID>CyclomaticComplexMethod:EventBus.kt$EventTypeMatcher$@Suppress("UNCHECKED_CAST") // Required for KClass matching - this is the fundamental limitation we're consolidating fun &lt;T : Event&gt; filterEvents(events: Flow&lt;Event&gt;, targetType: KClass&lt;T&gt;): Flow&lt;T&gt;</ID>
    <ID>CyclomaticComplexMethod:ExamDetailsScreen.kt$@Composable private fun ExamInfoCardWithAction( title: String, icon: ImageVector, examSession: YdsExamService.YdsExamSession, daysRemaining: Int, content: @Composable () -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:FloatingPointsAnimation.kt$@Composable fun FloatingPointsAnimation( points: Int, startPosition: Offset = Offset.Zero, multiplier: Float = 1f, category: TaskCategory? = null, onAnimationComplete: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>CyclomaticComplexMethod:FocusModeScreen.kt$@Composable private fun FocusControls( isRunning: Boolean, isPaused: Boolean, phase: SessionPhase, onStartClick: () -&gt; Unit, onPauseClick: () -&gt; Unit, onResumeClick: () -&gt; Unit, onStopClick: () -&gt; Unit, onSkipClick: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>CyclomaticComplexMethod:FocusModeScreen.kt$@Composable private fun TimerDisplay( timeRemaining: Int, progress: Float, phase: SessionPhase, isRunning: Boolean, isPaused: Boolean, reducedMotion: Boolean, modifier: Modifier = Modifier )</ID>
    <ID>CyclomaticComplexMethod:HomeScreen.kt$@Composable fun HomeScreen()</ID>
    <ID>CyclomaticComplexMethod:LanguageManager.kt$LocalizedStrings$private fun getEnglishString(key: String): String</ID>
    <ID>CyclomaticComplexMethod:LanguageManager.kt$LocalizedStrings$private fun getTurkishString(key: String): String</ID>
    <ID>CyclomaticComplexMethod:OnboardingScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun OnboardingStepDate(vm: OnboardingViewModel)</ID>
    <ID>CyclomaticComplexMethod:OriginalSettingsScreen.kt$@Composable private fun SocialSettingsContent(settingsManager: SettingsPreferencesManager)</ID>
    <ID>CyclomaticComplexMethod:OriginalSettingsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun OriginalSettingsScreen( )</ID>
    <ID>CyclomaticComplexMethod:OsymExamCalendarClient.kt$OsymExamCalendarClient$private fun parseYdsFromHtml(html: String): List&lt;YdsExamService.YdsExamSession&gt;</ID>
    <ID>CyclomaticComplexMethod:PlanRepository.kt$private fun applyAvailability(plan: List&lt;WeekPlan&gt;, cfg: PlanDurationSettings): List&lt;WeekPlan&gt;</ID>
    <ID>CyclomaticComplexMethod:PlanSettingsDialog.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PlanSettingsDialog( startEpochDay: Long, totalWeeks: Int, endEpochDay: Long?, totalMonths: Int?, monMinutes: Int, tueMinutes: Int, wedMinutes: Int, thuMinutes: Int, friMinutes: Int, satMinutes: Int, sunMinutes: Int, dateFormatPattern: String?, onDismiss: () -&gt; Unit, onSave: ( newStartEpochDay: Long, newTotalWeeks: Int, newEndEpochDay: Long?, newTotalMonths: Int?, newMonMinutes: Int, newTueMinutes: Int, newWedMinutes: Int, newThuMinutes: Int, newFriMinutes: Int, newSatMinutes: Int, newSunMinutes: Int, newDateFormatPattern: String?, ) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:PointsAnimations.kt$@Composable private fun AnimatedPointsDisplay( pointsTransaction: PointsTransaction, modifier: Modifier = Modifier )</ID>
    <ID>CyclomaticComplexMethod:QuestionRepository.kt$QuestionRepository$fun getFilteredQuestions( examType: ExamType? = null, questionType: QuestionType? = null, difficulty: Difficulty? = null, downloadedOnly: Boolean = false, tag: String? = null ): Flow&lt;List&lt;QuestionEntity&gt;&gt;</ID>
    <ID>CyclomaticComplexMethod:ReaderScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ReaderScreen( passage: PassageUi, onBack: () -&gt; Unit = {}, prefsRepo: ReaderPrefsRepository = ReaderPrefsRepository(LocalContext.current.readerPrefsDataStore), glossaryRepo: GlossaryRepo = FakeGlossaryRepo(), )</ID>
    <ID>CyclomaticComplexMethod:ResponsiveUtils.kt$@Composable fun rememberDynamicSizing(): DynamicSizing</ID>
    <ID>CyclomaticComplexMethod:SettingsManager.kt$SettingsManager$suspend fun updateSetting(key: SettingsKey, value: Any): Result&lt;UserSettings&gt;</ID>
    <ID>CyclomaticComplexMethod:SettingsRepository.kt$SettingsRepository$suspend fun updateNotificationSetting(id: String, value: Any)</ID>
    <ID>CyclomaticComplexMethod:SettingsSystemIntegration.kt$SettingsSystemManager$suspend fun updateSetting( settingKey: String, value: Any, showFeedback: Boolean = true ): Boolean</ID>
    <ID>CyclomaticComplexMethod:SocialRepository.kt$SocialRepository$fun getFilteredActivities( userId: String? = null, activityType: String? = null, category: String? = null, difficulty: String? = null, mood: String? = null, isPublic: Boolean? = null, isHighlight: Boolean? = null, milestone: Boolean? = null, perfectDay: Boolean? = null, fromDate: Long? = null, toDate: Long? = null ): Flow&lt;List&lt;SocialActivityEntity&gt;&gt;</ID>
    <ID>CyclomaticComplexMethod:SocialScreen.kt$@Composable private fun AvatarPreviewDialog( preview: PendingAvatarPreview?, isLoading: Boolean, isApplying: Boolean, errorMessage: String?, canUndo: Boolean, canRedo: Boolean, onDismiss: () -&gt; Unit, onApply: () -&gt; Unit, onRetry: () -&gt; Unit, onUseDefault: () -&gt; Unit, onUndo: () -&gt; Unit, onRedo: () -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:SocialScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SocialScreen( repository: SocialRepository? = null )</ID>
    <ID>CyclomaticComplexMethod:StreakCounter.kt$@Composable fun EnhancedStreakCounter( streakState: StreakState, modifier: Modifier = Modifier, showFireEffect: Boolean = true, onStreakClick: (() -&gt; Unit)? = null )</ID>
    <ID>CyclomaticComplexMethod:StudyPlanOverviewScreen.kt$private fun createDailyStudyInfo(dailySchedule: DailySchedule, currentWeek: Int = 1): DailyStudyInfo</ID>
    <ID>CyclomaticComplexMethod:TaskUtils.kt$internal fun estimateTaskMinutes(desc: String, details: String?): Int</ID>
    <ID>CyclomaticComplexMethod:UiStateManager.kt$fun TextView.updateForState(state: UiState, textType: UiTextType)</ID>
    <ID>CyclomaticComplexMethod:UiStateManager.kt$fun View.updateVisibilityForState(state: UiState, stateType: UiStateType)</ID>
    <ID>CyclomaticComplexMethod:WorkingTasksScreen.kt$private fun createDailyStudyInfo(dayPlan: DayPlan, currentWeek: Int = 1, context: Context): DailyStudyInfo</ID>
    <ID>EmptyFunctionBlock:AnimationIntegrationManager.kt$AnimationIntegrationManager.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:NotificationScheduler.kt$NotificationScheduler${}</ID>
    <ID>EmptyFunctionBlock:OptimizedSettingsAdapter.kt$OptimizedSettingsAdapter.TextViewHolder.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:SettingsAnimationCoordinator.kt$SettingsAnimationCoordinator.&lt;no name provided&gt;${}</ID>
    <ID>ForbiddenComment:AdvancedToggleViewModel.kt$AdvancedToggleViewModel$// TODO: Implement actual toggle logic</ID>
    <ID>ForbiddenComment:AppNavHost.kt$// TODO: Implement PlanScreen or use TodayScreen as placeholder</ID>
    <ID>ForbiddenComment:BackupSettingsViewModel.kt$BackupSettingsViewModel$// TODO: Apply conflict resolution</ID>
    <ID>ForbiddenComment:BackupSettingsViewModel.kt$BackupSettingsViewModel$// TODO: Implement disable auto sync</ID>
    <ID>ForbiddenComment:ConflictResolutionAdapter.kt$ConflictResolutionAdapter$* Adapter for displaying setting conflicts with resolution options * TODO: Implement proper conflict resolution UI</ID>
    <ID>ForbiddenComment:OptimizedSettingsAdapter.kt$OptimizedSettingsAdapter.SelectionViewHolder$// TODO: Implement optimized selection dialog</ID>
    <ID>ForbiddenComment:SettingsActivity.kt$SettingsActivity$// TODO: SettingsDetailFragment removed (legacy Fragment approach)</ID>
    <ID>ForbiddenComment:TodayScreen.kt$// TODO: Implement swipe-to-dismiss functionality for Material 3</ID>
    <ID>FunctionNaming:AchievementComponents.kt$@Composable fun AchievementCard( achievement: CategorizedAchievement, currentProgress: Float, modifier: Modifier = Modifier, showProgress: Boolean = true )</ID>
    <ID>FunctionNaming:AchievementComponents.kt$@Composable fun AchievementCategoryCard( categoryProgress: CategoryProgress, onCategoryClick: (AchievementCategory) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AchievementComponents.kt$@Composable fun AchievementUnlockCelebration( unlock: AchievementUnlock?, onDismiss: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AchievementComponents.kt$@Composable fun CategoryAchievementsList( categoryProgress: CategoryProgress, achievementProgressMap: Map&lt;String, Float&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AchievementComponents.kt$@Composable fun TierBadge( tier: AchievementTier, isUnlocked: Boolean, modifier: Modifier = Modifier, isCurrent: Boolean = false, size: androidx.compose.ui.unit.Dp = 24.dp )</ID>
    <ID>FunctionNaming:AchievementComponents.kt$@Composable private fun CategoryHeader(categoryProgress: CategoryProgress)</ID>
    <ID>FunctionNaming:AchievementComponents.kt$@Composable private fun StatCard( title: String, value: String, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AchievementNotificationSystem.kt$@Composable fun AchievementNotificationOverlay( unlocks: List&lt;AchievementUnlock&gt;, onDismissUnlock: (AchievementUnlock) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AchievementNotificationSystem.kt$@Composable fun AchievementToast( unlock: AchievementUnlock?, onDismiss: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AchievementNotificationSystem.kt$@Composable private fun AchievementCelebrationCard( unlock: AchievementUnlock, celebrationPlaying: Boolean, onDismiss: () -&gt; Unit )</ID>
    <ID>FunctionNaming:AchievementNotificationSystem.kt$@Composable private fun AchievementUnlockDialog( unlock: AchievementUnlock, onDismiss: () -&gt; Unit )</ID>
    <ID>FunctionNaming:AchievementNotificationSystem.kt$@Composable private fun CategoryBadge( category: AchievementCategory, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AchievementNotificationSystem.kt$@Composable private fun CelebrationConfetti( tierColor: Color, isSpecial: Boolean )</ID>
    <ID>FunctionNaming:AchievementUnlockAnimation.kt$@Composable fun AchievementUnlockAnimation( achievementUnlock: AchievementUnlock, onDismiss: () -&gt; Unit, onShare: (() -&gt; Unit)? = null, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AchievementUnlockAnimation.kt$@Composable fun AchievementUnlockNotification( achievementUnlock: AchievementUnlock, onDismiss: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AchievementUnlockAnimation.kt$@Composable private fun AchievementUnlockContent( achievementUnlock: AchievementUnlock, animationPhase: AnimationPhase, onShare: (() -&gt; Unit)?, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AchievementUnlockAnimation.kt$@Composable private fun NewCategoryIndicator(category: AchievementCategory)</ID>
    <ID>FunctionNaming:AchievementUnlockAnimation.kt$@Composable private fun NewTierIndicator( category: AchievementCategory, newTier: AchievementTier )</ID>
    <ID>FunctionNaming:AdvancedLoadingStrategy.kt$EnhancedLoadingComponents$@Composable fun &lt;T&gt; LoadingStateContainer( loadingState: LoadingState&lt;T&gt;, configuration: LoadingConfiguration = LoadingConfiguration(), onRetry: () -&gt; Unit = {}, loadingContent: @Composable () -&gt; Unit, errorContent: @Composable (String) -&gt; Unit = { DefaultErrorContent(it, onRetry) }, content: @Composable (T) -&gt; Unit )</ID>
    <ID>FunctionNaming:AdvancedLoadingStrategy.kt$EnhancedLoadingComponents$@Composable fun AdaptiveShimmer( isLoading: Boolean = true, configuration: LoadingConfiguration = LoadingConfiguration(), content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:AdvancedLoadingStrategy.kt$EnhancedLoadingComponents$@Composable fun ProgressiveDisclosure( items: List&lt;@Composable () -&gt; Unit&gt;, configuration: LoadingConfiguration = LoadingConfiguration(), isLoading: Boolean = true )</ID>
    <ID>FunctionNaming:AdvancedLoadingStrategy.kt$EnhancedLoadingComponents$@Composable fun SkeletonScreen( configuration: LoadingConfiguration = LoadingConfiguration(), content: SkeletonScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:AdvancedLoadingStrategy.kt$EnhancedLoadingComponents$@Composable fun SmartPlaceholder( width: Dp, height: Dp, isLoading: Boolean = true, configuration: LoadingConfiguration = LoadingConfiguration(), modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AdvancedLoadingStrategy.kt$EnhancedLoadingComponents$@Composable private fun DefaultErrorContent( message: String, onRetry: () -&gt; Unit )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun BestStudyTimesCard( patterns: StudyPatternsUI, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun GoalProgressCard( data: AnalyticsData, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun GoalProgressItem( title: String, progress: Float, target: String, current: String, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun HabitMetric( title: String, value: String, description: String, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun MultiLineChart( accuracyData: List&lt;Float&gt;, speedData: List&lt;Float&gt;, labels: List&lt;String&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun PerformanceTrendsChart( weeklyData: List&lt;WeeklyAnalyticsData&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun ProductivityInsightsCard( insights: ProductivityInsights, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun ProductivityMetric( title: String, value: String, icon: androidx.compose.ui.graphics.vector.ImageVector, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun ProductivityTrendChart( hourlyData: Map&lt;Int, Float&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun QuickStat( label: String, value: String, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun QuickStatsCard( data: AnalyticsData, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun RecentAchievementsCard( achievements: List&lt;String&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun RecommendationItem( recommendation: Recommendation, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun RecommendationsCard( recommendations: List&lt;Recommendation&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun StudyHabitsCard( data: AnalyticsData, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun StudyTimeRecommendation( time: String, score: Float, reason: String, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun TimeDistributionCard( patterns: StudyPatternsUI, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun TimeDistributionChart( distribution: Map&lt;String, Float&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsComponents.kt$@Composable fun TimeDistributionLegend( distribution: Map&lt;String, Float&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable fun AnalyticsScreen( modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable fun EmptyStateCard( title: String, description: String, icon: androidx.compose.ui.graphics.vector.ImageVector )</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable fun InsightsSection( data: AnalyticsData?, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable fun LineChart( data: List&lt;Float&gt;, labels: List&lt;String&gt;, modifier: Modifier = Modifier, animateEntry: Boolean = true )</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable fun LoadingCard()</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable fun MetricCard( title: String, value: String, subtitle: String, icon: androidx.compose.ui.graphics.vector.ImageVector, color: Color, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable fun MetricsGrid( data: AnalyticsData, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable fun OverviewSection( data: AnalyticsData?, weeklyData: List&lt;WeeklyAnalyticsData&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable fun PatternsSection( data: AnalyticsData?, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable fun PerformanceMetric( label: String, value: String, color: Color, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable fun PerformanceMetricsCard( data: PerformanceData, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable fun PerformanceSection( data: PerformanceData?, weeklyData: List&lt;WeeklyAnalyticsData&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable fun StudyProgressChart( weeklyData: List&lt;WeeklyAnalyticsData&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable fun TimeframeSelector( selectedTimeframe: AnalyticsTimeframe, onTimeframeChanged: (AnalyticsTimeframe) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable fun WeakAreaItem( weakArea: WeakArea, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable fun WeakAreasCard( weakAreas: List&lt;WeakArea&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable private fun ChartSkeleton(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable private fun MetricCardSkeleton(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable private fun SearchLoadingState(query: String, modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable private fun ShimmerCard(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:AnalyticsScreen.kt$@Composable private fun ShimmerText(width: Float, height: Float)</ID>
    <ID>FunctionNaming:AnimatedNavigation.kt$@Composable fun NavigationMetrics(navigationState: NavigationState)</ID>
    <ID>FunctionNaming:AnimatedNavigation.kt$EnhancedNavigation$@Composable fun ScreenTransitionAnnouncement( currentRoute: String?, screenLabel: String )</ID>
    <ID>FunctionNaming:AppAnimations.kt$@Composable fun SharedProgressIndicator( currentStep: Int, totalSteps: Int, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AppAnimations.kt$GestureEnhancements$@Composable fun InteractiveButton( onClick: () -&gt; Unit, modifier: Modifier = Modifier, hapticType: HapticFeedbackType = HapticFeedbackType.TextHandleMove, content: @Composable RowScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:AppAnimations.kt$GestureEnhancements$@Composable fun SwipeToCompleteCard( onComplete: () -&gt; Unit, modifier: Modifier = Modifier, threshold: Dp = 72.dp, content: @Composable (swipeProgress: Float) -&gt; Unit )</ID>
    <ID>FunctionNaming:AppNavHost.kt$@Composable private fun EnhancedNavigationBar( currentRoute: String, tabs: List&lt;Triple&lt;String, androidx.compose.ui.graphics.vector.ImageVector, String&gt;&gt;, onTabSelected: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:AuthenticationScreens.kt$@Composable fun BiometricAuthenticationScreen( authManager: AuthenticationManager, onSuccess: () -&gt; Unit, onFallback: () -&gt; Unit )</ID>
    <ID>FunctionNaming:AuthenticationScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun AuthenticationScreen( authManager: AuthenticationManager, onAuthenticationSuccess: () -&gt; Unit, onAuthenticationFailed: (String) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:AuthenticationScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun FirstTimeSetupScreen( authManager: AuthenticationManager, onSetupComplete: () -&gt; Unit )</ID>
    <ID>FunctionNaming:AuthenticationScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PasswordAuthenticationScreen( authManager: AuthenticationManager, onSuccess: () -&gt; Unit )</ID>
    <ID>FunctionNaming:AuthenticationScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PinAuthenticationScreen( authManager: AuthenticationManager, onSuccess: () -&gt; Unit, onSwitchToBiometric: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:AuthenticationScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun AuthenticationMethodCard( title: String, description: String, icon: androidx.compose.ui.graphics.vector.ImageVector, selected: Boolean, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:AuthenticationScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun PasswordSetupField( value: String, onValueChange: (String) -&gt; Unit, label: String )</ID>
    <ID>FunctionNaming:AuthenticationScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun PinInputField( value: String, onValueChange: (String) -&gt; Unit, enabled: Boolean = true )</ID>
    <ID>FunctionNaming:AuthenticationScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun PinSetupField( value: String, onValueChange: (String) -&gt; Unit, label: String )</ID>
    <ID>FunctionNaming:AwardCard.kt$@Composable fun AwardCard( award: Award, modifier: Modifier = Modifier, compact: Boolean = true, onClick: ((Award) -&gt; Unit)? = null )</ID>
    <ID>FunctionNaming:AwardNotification.kt$@Composable fun AwardNotification( award: Award, onDismiss: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AwardsTab.kt$@OptIn(ExperimentalLayoutApi::class) @Composable fun AwardsTab( awards: List&lt;Award&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:BadgeComponents.kt$@Composable fun AnimatedBadge( count: Int, style: BadgeStyle = BadgeStyle.DEFAULT, isVisible: Boolean = true, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:BadgeComponents.kt$@Composable fun BadgeIndicator( badgeState: BadgeState, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:BadgeComponents.kt$@Composable fun BadgeRow( badges: List&lt;BadgeState&gt;, maxVisible: Int = 3, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:BadgeComponents.kt$@Composable fun BouncingBadge( count: Int, style: BadgeStyle = BadgeStyle.SUCCESS, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:BadgeComponents.kt$@Composable fun GlowingBadge( count: Int, style: BadgeStyle = BadgeStyle.ERROR, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:BadgeComponents.kt$@Composable fun NotificationDot( isVisible: Boolean, color: Color = MaterialTheme.colorScheme.error, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:BadgeComponents.kt$@Composable fun PulsingBadge( count: Int, style: BadgeStyle = BadgeStyle.WARNING, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:BadgeComponents.kt$@Composable fun RowScope.BadgedNavigationItem( selected: Boolean, onClick: () -&gt; Unit, onBadgeCleared: () -&gt; Unit, icon: ImageVector, label: String, badgeState: BadgeState, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:CategoryScreens.kt$@Composable private fun CategoryCardHeader(title: String, icon: androidx.compose.ui.graphics.vector.ImageVector)</ID>
    <ID>FunctionNaming:CategoryScreens.kt$@Composable private fun NavigationCategoryCard()</ID>
    <ID>FunctionNaming:CategoryScreens.kt$@Composable private fun SettingRowToggle(title: String, description: String, checked: Boolean, onChecked: (Boolean) -&gt; Unit)</ID>
    <ID>FunctionNaming:CategoryScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun GamificationSettingsScreen(onBack: () -&gt; Unit)</ID>
    <ID>FunctionNaming:CategoryScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun NavigationSettingsScreen(onBack: () -&gt; Unit)</ID>
    <ID>FunctionNaming:CategoryScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun NotificationSettingsScreen(onBack: () -&gt; Unit)</ID>
    <ID>FunctionNaming:CategoryScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PrivacySettingsScreen(onBack: () -&gt; Unit)</ID>
    <ID>FunctionNaming:CategoryScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SocialSettingsScreen(onBack: () -&gt; Unit)</ID>
    <ID>FunctionNaming:CategoryScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun TaskSettingsScreen(onBack: () -&gt; Unit)</ID>
    <ID>FunctionNaming:CategoryScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun SettingsCategoryScaffold(title: String, subtitle: String, onBack: () -&gt; Unit, content: @Composable ColumnScope.() -&gt; Unit)</ID>
    <ID>FunctionNaming:CustomizePlanScreen.kt$@Composable private fun TaskRow( task: PlanTask, hidden: Boolean, onToggleHidden: (Boolean) -&gt; Unit, onRequestEdit: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:CustomizePlanScreen.kt$@Composable private fun WeekCard( week: WeekPlan, overrides: UserPlanOverrides, startEpochDay: Long, onToggleHidden: (taskId: String, hidden: Boolean) -&gt; Unit, onRequestEdit: (taskId: String, currentDesc: String?, currentDetails: String?) -&gt; Unit, onAddTask: (week: Int, dayIndex: Int) -&gt; Unit, )</ID>
    <ID>FunctionNaming:CustomizePlanScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun CustomizePlanScreen( plan: List&lt;WeekPlan&gt;, overrides: UserPlanOverrides, startEpochDay: Long, onBack: () -&gt; Unit, onToggleHidden: (taskId: String, hidden: Boolean) -&gt; Unit, onRequestEdit: (taskId: String, currentDesc: String?, currentDetails: String?) -&gt; Unit, onAddTask: (week: Int, dayIndex: Int) -&gt; Unit, )</ID>
    <ID>FunctionNaming:EditTaskDialog.kt$@Composable fun EditTaskDialog( initialDesc: String, initialDetails: String, onDismiss: () -&gt; Unit, onSave: (newDesc: String, newDetails: String) -&gt; Unit, )</ID>
    <ID>FunctionNaming:EnhancedSettingsComponents.kt$@Composable fun EnhancedSelectionButton( text: String, isSelected: Boolean, onClick: () -&gt; Unit, enabled: Boolean = true )</ID>
    <ID>FunctionNaming:EnhancedSettingsComponents.kt$@Composable fun EnhancedSlider( value: Float, onValueChange: (Float) -&gt; Unit, valueRange: ClosedFloatingPointRange&lt;Float&gt; = 0f..1f, steps: Int = 0, label: String? = null, valueFormatter: (Float) -&gt; String = { "%.1f".format(it) }, enabled: Boolean = true )</ID>
    <ID>FunctionNaming:EnhancedSettingsComponents.kt$@Composable fun EnhancedToggleSwitch( checked: Boolean, onCheckedChange: (Boolean) -&gt; Unit, enabled: Boolean = true, label: String? = null )</ID>
    <ID>FunctionNaming:EnhancedSettingsComponents.kt$@Composable fun FeedbackCard( message: String, isError: Boolean = false, isVisible: Boolean, onDismiss: () -&gt; Unit )</ID>
    <ID>FunctionNaming:EnhancedSettingsComponents.kt$@Composable fun LoadingIndicator( isLoading: Boolean, message: String = "Loading...", modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:EnhancedSettingsComponents.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun EnhancedSettingsCard( title: String, description: String? = null, icon: ImageVector? = null, isEnabled: Boolean = true, onClick: () -&gt; Unit = {}, content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:EnhancedSettingsScreen.kt$@Composable private fun AppearanceSettings( settingsRepository: SettingsRepository, onFeedback: (String, Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:EnhancedSettingsScreen.kt$@Composable private fun CategoryButton( category: SettingsCategory, isSelected: Boolean, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:EnhancedSettingsScreen.kt$@Composable private fun GamificationSettings( gamificationState: GamificationSettingsViewModel.GamificationUiState, gamificationViewModel: GamificationSettingsViewModel, onFeedback: (String, Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:EnhancedSettingsScreen.kt$@Composable private fun NotificationSettings( notificationState: NotificationSettingsViewModel.NotificationUiState, notificationViewModel: NotificationSettingsViewModel, onFeedback: (String, Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:EnhancedSettingsScreen.kt$@Composable private fun SettingsGradientTopBar( onNavigateBack: () -&gt; Unit, isLoading: Boolean = false )</ID>
    <ID>FunctionNaming:EnhancedSettingsScreen.kt$@Composable private fun SystemSettings( settingsState: SettingsViewModel.SettingsUiState, settingsViewModel: SettingsViewModel, onFeedback: (String, Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:EnhancedSettingsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun EnhancedSettingsScreen( settingsRepository: SettingsRepository, onNavigateBack: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:ErrorComponents.kt$@Composable fun EmptyStateWithError( error: AppError?, emptyTitle: String, emptyMessage: String, onRetry: (() -&gt; Unit)? = null, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:ErrorComponents.kt$@Composable fun ErrorBanner( error: AppError, modifier: Modifier = Modifier, onDismiss: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:ErrorComponents.kt$@Composable fun ErrorCard( error: AppError, modifier: Modifier = Modifier, onRetry: (() -&gt; Unit)? = null, onDismiss: (() -&gt; Unit)? = null, recoveryOptions: List&lt;RecoveryOption&gt; = emptyList(), onRecoveryOption: ((String) -&gt; Unit)? = null )</ID>
    <ID>FunctionNaming:ErrorComponents.kt$@Composable fun ErrorDialog( error: AppError, onDismiss: () -&gt; Unit, onRetry: (() -&gt; Unit)? = null, recoveryOptions: List&lt;RecoveryOption&gt; = emptyList(), onRecoveryOption: ((String) -&gt; Unit)? = null )</ID>
    <ID>FunctionNaming:ErrorComponents.kt$@Composable fun LoadingErrorState( error: AppError, onRetry: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:ErrorComponents.kt$@Composable private fun RecoveryOptionsList( options: List&lt;RecoveryOption&gt;, onOptionSelected: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:ErrorComponents.kt$@Composable private fun RecoveryOptionsRow( options: List&lt;RecoveryOption&gt;, onOptionSelected: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:ExamDetailsScreen.kt$@Composable private fun ExamInfoCard( title: String, icon: ImageVector, content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:ExamDetailsScreen.kt$@Composable private fun ExamInfoCardWithAction( title: String, icon: ImageVector, examSession: YdsExamService.YdsExamSession, daysRemaining: Int, content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:ExamDetailsScreen.kt$@Composable private fun InfoRow( label: String, value: String )</ID>
    <ID>FunctionNaming:ExamDetailsScreen.kt$@Composable private fun TipItem( emoji: String, text: String )</ID>
    <ID>FunctionNaming:ExamDetailsScreen.kt$@Composable private fun YdsExamGradientTopBar( onNavigateBack: () -&gt; Unit, daysRemaining: Int )</ID>
    <ID>FunctionNaming:ExamDetailsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ExamDetailsScreen( onNavigateBack: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:FeatureScreens.kt$@Composable fun PlaceholderScreen(title: String, modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:FeatureScreens.kt$@Composable fun WelcomeRoute(onDone: () -&gt; Unit)</ID>
    <ID>FunctionNaming:FixedTopBar.kt$@Composable fun FixedTopBarContent( modifier: Modifier = Modifier, topBarHeight: androidx.compose.ui.unit.Dp = 72.dp, // Default height including safe area content: @Composable BoxScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:FixedTopBar.kt$@Composable fun FixedTopBarLayout( topBar: @Composable () -&gt; Unit, modifier: Modifier = Modifier, content: @Composable BoxScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:FixedTopBar.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun FixedTopBar( title: String, modifier: Modifier = Modifier, style: StudyPlanTopBarStyle = StudyPlanTopBarStyle.Default, showLanguageSwitcher: Boolean = false, showSearch: Boolean = false, showMenu: Boolean = false, onSearchClick: (() -&gt; Unit)? = null, onMenuClick: (() -&gt; Unit)? = null, actions: @Composable RowScope.() -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:FloatingPointsAnimation.kt$@Composable fun ComboPointsAnimation( comboCount: Int, pointsPerCombo: Int, startPosition: Offset = Offset.Zero, onAnimationComplete: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:FloatingPointsAnimation.kt$@Composable fun FloatingPointsAnimation( points: Int, startPosition: Offset = Offset.Zero, multiplier: Float = 1f, category: TaskCategory? = null, onAnimationComplete: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:FloatingPointsAnimation.kt$@Composable fun MultipleFloatingPoints( pointEvents: List&lt;PointsEvent&gt;, onEventComplete: (String) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:FloatingPointsAnimation.kt$@Composable fun PointsBurstAnimation( totalPoints: Int, burstCount: Int = 3, startPosition: Offset = Offset.Zero, onAnimationComplete: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:FloatingPointsAnimation.kt$@Composable fun StreakMultiplierPointsAnimation( basePoints: Int, multiplier: Float, startPosition: Offset = Offset.Zero, onAnimationComplete: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:FloatingPointsAnimation.kt$@Composable private fun PointsDisplay( points: Int, multiplier: Float, category: TaskCategory? )</ID>
    <ID>FunctionNaming:FocusComponents.kt$@Composable private fun InfoRow( label: String, value: String )</ID>
    <ID>FunctionNaming:FocusComponents.kt$@Composable private fun SettingSlider( title: String, value: Float, onValueChange: (Float) -&gt; Unit, valueRange: ClosedFloatingPointRange&lt;Float&gt;, steps: Int, valueFormatter: (Float) -&gt; String )</ID>
    <ID>FunctionNaming:FocusComponents.kt$@Composable private fun SettingSwitch( title: String, subtitle: String, checked: Boolean, onCheckedChange: (Boolean) -&gt; Unit, icon: androidx.compose.ui.graphics.vector.ImageVector )</ID>
    <ID>FunctionNaming:FocusComponents.kt$@Composable private fun StatCard( title: String, value: String, subtitle: String, icon: androidx.compose.ui.graphics.vector.ImageVector, color: androidx.compose.ui.graphics.Color, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:FocusComponents.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun FocusSettingsSheet( config: FocusSessionConfig, onConfigUpdate: (FocusSessionConfig) -&gt; Unit, onDismiss: () -&gt; Unit )</ID>
    <ID>FunctionNaming:FocusComponents.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun FocusStatsSheet( state: FocusSessionState, onDismiss: () -&gt; Unit )</ID>
    <ID>FunctionNaming:FocusModeScreen.kt$@Composable private fun BigTimer(secondsLeft: Int)</ID>
    <ID>FunctionNaming:FocusModeScreen.kt$@Composable private fun Confetti()</ID>
    <ID>FunctionNaming:FocusModeScreen.kt$@Composable private fun ExitDialog(onDismiss: () -&gt; Unit, onConfirm: () -&gt; Unit)</ID>
    <ID>FunctionNaming:FocusModeScreen.kt$@Composable private fun FocusControls( isRunning: Boolean, isPaused: Boolean, phase: SessionPhase, onStartClick: () -&gt; Unit, onPauseClick: () -&gt; Unit, onResumeClick: () -&gt; Unit, onStopClick: () -&gt; Unit, onSkipClick: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:FocusModeScreen.kt$@Composable private fun FocusTopBar( taskTitle: String, currentSession: Int, completedSessions: Int, onSettingsClick: () -&gt; Unit, onStatsClick: () -&gt; Unit, onExitClick: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:FocusModeScreen.kt$@Composable private fun PhaseIndicator( phase: SessionPhase, sessionNumber: Int, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:FocusModeScreen.kt$@Composable private fun TimerDisplay( timeRemaining: Int, progress: Float, phase: SessionPhase, isRunning: Boolean, isPaused: Boolean, reducedMotion: Boolean, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:FocusModeScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun FocusModeScreen( sessionId: String, estMinutes: Int = 25, onExit: () -&gt; Unit )</ID>
    <ID>FunctionNaming:FocusModeScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun FocusModeScreen( taskId: String? = null, taskTitle: String = "Focus Session", onExit: () -&gt; Unit, focusManager: FocusSessionManager = remember { FocusSessionManager() } )</ID>
    <ID>FunctionNaming:FriendRow.kt$@Composable fun FriendRow( friend: Friend, onClick: (Friend) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:FriendRow.kt$@Composable private fun InitialCircle(initials: String)</ID>
    <ID>FunctionNaming:FriendRow.kt$@Composable private fun StatusDot(status: FriendStatus)</ID>
    <ID>FunctionNaming:FriendsScreen.kt$@Composable private fun FriendCard( friend: FriendRelation, onRemove: () -&gt; Unit )</ID>
    <ID>FunctionNaming:FriendsScreen.kt$@Composable private fun FriendRequestCard( request: FriendRequest, onAccept: () -&gt; Unit, onReject: () -&gt; Unit )</ID>
    <ID>FunctionNaming:FriendsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun FriendsScreen( currentUser: User, onBack: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:FriendsTab.kt$@Composable fun FriendsTab( friends: List&lt;Friend&gt;, onFriendSelected: (Friend) -&gt; Unit, onAddFriend: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:GamificationSettings.kt$@Composable private fun IntensityOption( intensity: CelebrationIntensity, isSelected: Boolean, onSelect: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:GamificationSettings.kt$@Composable private fun IntensitySelector( title: String, currentIntensity: CelebrationIntensity, onIntensityChange: (CelebrationIntensity) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:GamificationSettings.kt$@Composable private fun ResetSection( onResetSettings: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:GamificationSettings.kt$@Composable private fun SettingsSection( title: String, icon: ImageVector, content: @Composable ColumnScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:GamificationSettings.kt$@Composable private fun SliderPreference( title: String, subtitle: String, value: Float, valueRange: ClosedFloatingPointRange&lt;Float&gt;, onValueChange: (Float) -&gt; Unit, valueDisplay: (Float) -&gt; String, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:GamificationSettings.kt$@Composable private fun SwitchPreference( title: String, subtitle: String, checked: Boolean, onCheckedChange: (Boolean) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:GamificationSettings.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun GamificationSettingsScreen( settingsManager: GamificationSettingsManager, onNavigateBack: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:HomeScreen.kt$@Composable fun HomeScreen()</ID>
    <ID>FunctionNaming:LanguageSwitcher.kt$@Composable fun CompactLanguageSwitcher( currentLanguage: Language = Language.ENGLISH, onLanguageChanged: (Language) -&gt; Unit = {}, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:LanguageSwitcher.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun LanguageSwitcher( currentLanguage: Language = Language.ENGLISH, onLanguageChanged: (Language) -&gt; Unit = {}, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:LanguageSwitcher.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun LanguageFlag( flag: String, language: Language, isSelected: Boolean, tooltip: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:LeaderboardRow.kt$@Composable fun LeaderboardRow( rank: Int, entry: RankEntry, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:LeaderboardRow.kt$@Composable private fun InitialBadge(initials: String, highlighted: Boolean)</ID>
    <ID>FunctionNaming:LeaderboardScreen.kt$@Composable private fun LeaderboardItemCard(entry: LeaderboardEntry)</ID>
    <ID>FunctionNaming:LeaderboardScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun LeaderboardScreen( currentUser: User, onBack: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:LessonScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun LessonScreen(sessionId: String, onBack: () -&gt; Unit = {})</ID>
    <ID>FunctionNaming:LoadingComponents.kt$@Composable fun ErrorDialog( errorEvent: ErrorEvent, onDismiss: () -&gt; Unit, onRetry: (() -&gt; Unit)? = null )</ID>
    <ID>FunctionNaming:LoadingComponents.kt$@Composable fun ErrorSnackbar( errorEvent: ErrorEvent, onRetry: (() -&gt; Unit)? = null, onDismiss: () -&gt; Unit )</ID>
    <ID>FunctionNaming:LoadingComponents.kt$@Composable fun ProgressBarOverlay( progress: Float, message: String, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:LoadingComponents.kt$@Composable fun ShimmerOverlay(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:LoadingComponents.kt$@Composable fun SkeletonLoader(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:LoadingComponents.kt$@Composable fun SkeletonTaskItem()</ID>
    <ID>FunctionNaming:LoadingComponents.kt$@Composable fun SpinnerOverlay( message: String, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:LoadingComponents.kt$@Composable fun StudyPlanLoadingState( isLoading: Boolean, loadingType: LoadingType = LoadingType.SHIMMER, message: String = "Loading...", progress: Float = 0f, modifier: Modifier = Modifier, content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:LoginScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun LoginScreen( onLoginSuccess: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:MotivationMechanics.kt$@Composable fun ComebackBonusCard( comebackBonus: ComebackBonus, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:MotivationMechanics.kt$@Composable fun DailyChallengeCard( challenge: DailyChallenge, onChallengeClick: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:MotivationMechanics.kt$@Composable fun StudyBuddyComparisonCard( comparison: StudyBuddyComparison, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:NewHomeScreen.kt$@Composable fun NewHomeScreen( sharedViewModel: com.mtlc.studyplan.shared.SharedAppViewModel? = null, settingsManager: com.mtlc.studyplan.settings.manager.SettingsManager? = null, offlineManager: com.mtlc.studyplan.offline.OfflineManager? = null, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:OnboardingScreens.kt$@Composable fun OnboardingRoute(onDone: () -&gt; Unit)</ID>
    <ID>FunctionNaming:OnboardingScreens.kt$@Composable private fun OnboardingStepAvailability(vm: OnboardingViewModel)</ID>
    <ID>FunctionNaming:OnboardingScreens.kt$@Composable private fun OnboardingStepSkills(vm: OnboardingViewModel)</ID>
    <ID>FunctionNaming:OnboardingScreens.kt$@Composable private fun SkillRow( label: String, value: Float, onChange: (Float) -&gt; Unit, typography: OnboardingTypography, sliderHeight: Dp )</ID>
    <ID>FunctionNaming:OnboardingScreens.kt$@Composable private fun StudyPlanPreviewItem( label: String, value: String, typography: OnboardingTypography )</ID>
    <ID>FunctionNaming:OnboardingScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun OnboardingStepDate(vm: OnboardingViewModel)</ID>
    <ID>FunctionNaming:OriginalSettingsScreen.kt$@Composable private fun ColorfulTasksCard( title: String, icon: ImageVector, content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:OriginalSettingsScreen.kt$@Composable private fun GamificationSettingsContent()</ID>
    <ID>FunctionNaming:OriginalSettingsScreen.kt$@Composable private fun NavigationSettingsContent(settingsManager: SettingsPreferencesManager)</ID>
    <ID>FunctionNaming:OriginalSettingsScreen.kt$@Composable private fun NotificationsSettingsContent(settingsManager: SettingsPreferencesManager)</ID>
    <ID>FunctionNaming:OriginalSettingsScreen.kt$@Composable private fun PrivacySettingsContent()</ID>
    <ID>FunctionNaming:OriginalSettingsScreen.kt$@Composable private fun SavedGoalChip(savedGoalHours: Int)</ID>
    <ID>FunctionNaming:OriginalSettingsScreen.kt$@Composable private fun SettingToggleItem( icon: ImageVector, title: String, description: String, checked: Boolean, onCheckedChange: (Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:OriginalSettingsScreen.kt$@Composable private fun SettingsCard( title: String, icon: ImageVector, content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:OriginalSettingsScreen.kt$@Composable private fun SocialSettingsContent(settingsManager: SettingsPreferencesManager)</ID>
    <ID>FunctionNaming:OriginalSettingsScreen.kt$@Composable private fun TabButton( tab: SettingsTab, isSelected: Boolean, onClick: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:OriginalSettingsScreen.kt$@Composable private fun TasksSettingsContent(settingsManager: SettingsPreferencesManager)</ID>
    <ID>FunctionNaming:OriginalSettingsScreen.kt$@Composable private fun WeeklyGoalCard( selectedGoalHours: Int, savedGoalHours: Int, onGoalChange: (Int) -&gt; Unit, onSave: () -&gt; Unit, isSaving: Boolean, hasPendingChanges: Boolean, showSavedMessage: Boolean )</ID>
    <ID>FunctionNaming:OriginalSettingsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun OriginalSettingsScreen( )</ID>
    <ID>FunctionNaming:PlanSettingsDialog.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PlanSettingsDialog( startEpochDay: Long, totalWeeks: Int, endEpochDay: Long?, totalMonths: Int?, monMinutes: Int, tueMinutes: Int, wedMinutes: Int, thuMinutes: Int, friMinutes: Int, satMinutes: Int, sunMinutes: Int, dateFormatPattern: String?, onDismiss: () -&gt; Unit, onSave: ( newStartEpochDay: Long, newTotalWeeks: Int, newEndEpochDay: Long?, newTotalMonths: Int?, newMonMinutes: Int, newTueMinutes: Int, newWedMinutes: Int, newThuMinutes: Int, newFriMinutes: Int, newSatMinutes: Int, newSunMinutes: Int, newDateFormatPattern: String?, ) -&gt; Unit, )</ID>
    <ID>FunctionNaming:PointsAnimations.kt$@Composable fun FloatingPointsAnimation( points: Int, isVisible: Boolean, onAnimationFinished: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:PointsAnimations.kt$@Composable fun InlinePointsDisplay( basePoints: Int, multiplier: Float, modifier: Modifier = Modifier, compact: Boolean = false )</ID>
    <ID>FunctionNaming:PointsAnimations.kt$@Composable fun PointsEarningPopup( pointsTransaction: PointsTransaction?, onDismiss: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:PointsAnimations.kt$@Composable private fun AnimatedPointsDisplay( pointsTransaction: PointsTransaction, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:PointsAnimations.kt$@Composable private fun MultiplierBonus( multiplier: Float, streakTitle: String )</ID>
    <ID>FunctionNaming:PointsAnimations.kt$@Composable private fun TaskCategoryBadge( category: TaskCategory, basePoints: Int )</ID>
    <ID>FunctionNaming:PracticeScreen.kt$@Composable fun PracticeScreen()</ID>
    <ID>FunctionNaming:PracticeScreen.kt$@Preview(widthDp = 360, heightDp = 640, showBackground = true) @Composable private fun PracticeSmallPreview()</ID>
    <ID>FunctionNaming:PracticeScreen.kt$@Preview(widthDp = 840, heightDp = 600, showBackground = true) @Composable private fun PracticeLargePreview()</ID>
    <ID>FunctionNaming:PriorityIndicator.kt$@Composable fun EstimatedTimeChip( minutes: Int, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:PriorityIndicator.kt$@Composable fun PriorityIndicator( priority: TaskPriority, modifier: Modifier = Modifier, showLabel: Boolean = false )</ID>
    <ID>FunctionNaming:PriorityIndicator.kt$@Composable fun TaskCategoryChip( category: String, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:ProfileTab.kt$@Composable fun ProfileTab( profile: SocialProfile, onAvatarSelected: (String) -&gt; Unit, onUploadAvatarClick: () -&gt; Unit, onUndoAvatar: () -&gt; Unit, onRedoAvatar: () -&gt; Unit, canUndo: Boolean, canRedo: Boolean, isAvatarBusy: Boolean, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:ProfileTab.kt$@Composable private fun AvatarDisplay( profile: SocialProfile, modifier: Modifier = Modifier, size: androidx.compose.ui.unit.Dp = 40.dp )</ID>
    <ID>FunctionNaming:ProfileTab.kt$@Composable private fun ProfileCard( profile: SocialProfile, onAvatarSelected: (String) -&gt; Unit, onUploadAvatarClick: () -&gt; Unit, onUndoAvatar: () -&gt; Unit, onRedoAvatar: () -&gt; Unit, canUndo: Boolean, canRedo: Boolean, isAvatarBusy: Boolean, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:ProfileTab.kt$@Preview(showBackground = true) @Composable private fun ProfileTabPreview()</ID>
    <ID>FunctionNaming:RanksTab.kt$@Composable fun RanksTab( ranks: List&lt;RankEntry&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:RanksTab.kt$@Composable private fun RowScope.StatCard(title: String, value: String)</ID>
    <ID>FunctionNaming:RanksTab.kt$@Composable private fun StatRow(ranks: List&lt;RankEntry&gt;)</ID>
    <ID>FunctionNaming:ReaderScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ReaderScreen( passage: PassageUi, onBack: () -&gt; Unit = {}, prefsRepo: ReaderPrefsRepository = ReaderPrefsRepository(LocalContext.current.readerPrefsDataStore), glossaryRepo: GlossaryRepo = FakeGlossaryRepo(), )</ID>
    <ID>FunctionNaming:ReaderScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun ReaderControlsSheet( prefs: ReaderPrefs, onDismiss: () -&gt; Unit, onChange: (ReaderPrefs) -&gt; Unit )</ID>
    <ID>FunctionNaming:ReaderScreen.kt$@Preview(showBackground = true) @Composable private fun ReaderPreview()</ID>
    <ID>FunctionNaming:RenderOptimizer.kt$@Composable fun LaunchedEffectWithLifecycle( key: Any?, block: suspend CoroutineScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:RenderOptimizer.kt$@Composable fun OptimizedTextStyle( fontSize: TextUnit, fontWeight: FontWeight? = null, color: Color = Color.Unspecified, optimizer: RenderOptimizer ): TextStyle</ID>
    <ID>FunctionNaming:RenderOptimizer.kt$@Composable fun StableColor(color: Color): Color</ID>
    <ID>FunctionNaming:RenderOptimizer.kt$@Composable fun StableDp(value: Float): Dp</ID>
    <ID>FunctionNaming:RenderOptimizer.kt$CompositionTracker$@Composable fun CompositionCountDisplay()</ID>
    <ID>FunctionNaming:ResponsiveLayout.kt$@Composable fun EnhancedResponsiveCard( modifier: Modifier = Modifier, containerColor: Color = MaterialTheme.colorScheme.surfaceContainer, elevation: Dp? = null, aspectRatio: Float? = null, minHeight: Dp? = null, maxHeight: Dp? = null, content: @Composable ColumnScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:ResponsiveLayout.kt$@Composable fun ResponsiveCard( modifier: Modifier = Modifier, containerColor: Color = MaterialTheme.colorScheme.surfaceContainer, content: @Composable ColumnScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:ResponsiveLayout.kt$@Composable fun ResponsiveChipRow( modifier: Modifier = Modifier, content: @Composable RowScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:ResponsiveLayout.kt$@Composable fun ResponsiveContainer( modifier: Modifier = Modifier, maxWidth: Dp = 600.dp, // Max width for larger screens content: @Composable BoxScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:ResponsiveLayout.kt$@Composable fun ResponsiveContentContainer( modifier: Modifier = Modifier, maxWidth: Dp = 1200.dp, horizontalPadding: Dp? = null, content: @Composable BoxScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:ResponsiveLayout.kt$@Composable fun ResponsiveGrid( modifier: Modifier = Modifier, content: @Composable ColumnScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:ResponsiveLayout.kt$@Composable fun ResponsiveGridCard( modifier: Modifier = Modifier, containerColor: Color = MaterialTheme.colorScheme.surfaceContainer, content: @Composable ColumnScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:ResponsiveLayout.kt$@Composable fun ResponsiveImageContainer( modifier: Modifier = Modifier, aspectRatio: Float = 16f / 9f, maxHeight: Dp? = null, content: @Composable BoxScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:ResponsiveLayout.kt$@Composable fun ResponsiveLazyColumn( modifier: Modifier = Modifier, verticalArrangement: Arrangement.Vertical = Arrangement.Top, horizontalAlignment: Alignment.Horizontal = Alignment.Start, content: LazyListScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:ResponsiveLayout.kt$@Composable fun ResponsiveListCard( modifier: Modifier = Modifier, containerColor: Color = MaterialTheme.colorScheme.surfaceContainer, onClick: (() -&gt; Unit)? = null, content: @Composable ColumnScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:ResponsiveLayout.kt$@Composable fun ResponsiveRow( modifier: Modifier = Modifier, mobileStackThreshold: ScreenSize = ScreenSize.Mobile, content: @Composable RowScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:ResponsiveLayout.kt$@Composable fun ResponsiveScaffold( modifier: Modifier = Modifier, topBar: (@Composable () -&gt; Unit)? = null, bottomBar: (@Composable () -&gt; Unit)? = null, floatingActionButton: (@Composable () -&gt; Unit)? = null, containerColor: Color = MaterialTheme.colorScheme.background, content: @Composable (PaddingValues) -&gt; Unit )</ID>
    <ID>FunctionNaming:ResponsiveLayout.kt$@Composable fun ResponsiveSpacer( size: SpacerSize = SpacerSize.Medium )</ID>
    <ID>FunctionNaming:ReviewScreen.kt$@Composable private fun AccuracyBar(section: String, percent: Int, avgSec: Int, max: Int)</ID>
    <ID>FunctionNaming:ReviewScreen.kt$@OptIn(androidx.compose.material3.ExperimentalMaterial3Api::class) @Composable fun ReviewScreen(result: MockResultUi, onRetrySet: (List&lt;Int&gt;) -&gt; Unit, onBack: () -&gt; Unit = {})</ID>
    <ID>FunctionNaming:SegmentedTabs.kt$@Composable fun SocialSegmentedTabs( selected: SocialTab, onTabSelected: (SocialTab) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:SettingsAwareComponents.kt$@Composable fun SettingsAwareButton( onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, hapticType: HapticType = HapticType.LIGHT_CLICK, content: @Composable RowScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsAwareComponents.kt$@Composable fun SettingsAwareCard( onClick: (() -&gt; Unit)? = null, modifier: Modifier = Modifier, enabled: Boolean = true, hapticType: HapticType = HapticType.LIGHT_CLICK, content: @Composable ColumnScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsAwareComponents.kt$@Composable fun SettingsAwareContent( settingsManager: SettingsManager, content: @Composable (UserSettings) -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsAwareComponents.kt$@Composable fun SettingsAwareFilledTonalButton( onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, hapticType: HapticType = HapticType.LIGHT_CLICK, content: @Composable RowScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsAwareComponents.kt$@Composable fun SettingsAwareFloatingActionButton( onClick: () -&gt; Unit, modifier: Modifier = Modifier, hapticType: HapticType = HapticType.MEDIUM_CLICK, content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsAwareComponents.kt$@Composable fun SettingsAwareOutlinedButton( onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, hapticType: HapticType = HapticType.LIGHT_CLICK, content: @Composable RowScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsAwareComponents.kt$@Composable fun SettingsAwareTextButton( onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, hapticType: HapticType = HapticType.LIGHT_CLICK, content: @Composable RowScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsScreens.kt$@Composable private fun CategoryPill( label: String, icon: androidx.compose.ui.graphics.vector.ImageVector, selected: Boolean, onClick: (String) -&gt; Unit, )</ID>
    <ID>FunctionNaming:SettingsScreens.kt$@Composable private fun SettingToggleRow( icon: androidx.compose.ui.graphics.vector.ImageVector, title: String, description: String, checked: Boolean, onCheckedChange: (Boolean) -&gt; Unit, )</ID>
    <ID>FunctionNaming:SettingsScreens.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalLayoutApi::class) @Composable fun SettingsScreen( onNavigateToCategory: (String) -&gt; Unit = {}, onBack: () -&gt; Unit = {}, studyProgressRepository: StudyProgressRepository? = null, onboardingRepository: OnboardingRepository? = null )</ID>
    <ID>FunctionNaming:SimplifiedAppNavHost.kt$@Composable fun SimplifiedAppNavHost( mainAppIntegrationManager: AppIntegrationManager? = null, studyProgressRepository: com.mtlc.studyplan.data.StudyProgressRepository? = null, taskRepository: com.mtlc.studyplan.data.TaskRepository? = null, sharedViewModel: com.mtlc.studyplan.shared.SharedAppViewModel? = null )</ID>
    <ID>FunctionNaming:SmartSuggestions.kt$@Composable private fun Chip( text: String, color: Color, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:SmartSuggestions.kt$@Composable private fun ConfidenceIndicator( confidence: Float, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:SmartSuggestions.kt$@Composable private fun SuggestionCard( suggestion: SmartSuggestion, onClick: () -&gt; Unit, onDismiss: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:SmartSuggestions.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SmartSuggestionsCard( suggestions: List&lt;SmartSuggestion&gt;, onSuggestionClick: (SmartSuggestion) -&gt; Unit, onDismissSuggestion: (SmartSuggestion) -&gt; Unit, modifier: Modifier = Modifier, maxSuggestions: Int = 6 // Increased to show more suggestions )</ID>
    <ID>FunctionNaming:SmartSuggestions.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SmartSuggestionsSheet( suggestions: List&lt;SmartSuggestion&gt;, onSuggestionClick: (SmartSuggestion) -&gt; Unit, onDismissSuggestion: (SmartSuggestion) -&gt; Unit, onDismiss: () -&gt; Unit )</ID>
    <ID>FunctionNaming:SocialScreen.kt$@Composable fun AvatarDisplay( profile: SocialProfile, modifier: Modifier = Modifier, size: androidx.compose.ui.unit.Dp = 40.dp )</ID>
    <ID>FunctionNaming:SocialScreen.kt$@Composable fun AvatarUploadDialog( onDismiss: () -&gt; Unit, onGallerySelected: () -&gt; Unit, onCameraSelected: () -&gt; Unit )</ID>
    <ID>FunctionNaming:SocialScreen.kt$@Composable fun HighlightChip(label: String, value: String, modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:SocialScreen.kt$@Composable fun ProfileSection( profile: SocialProfile, onAvatarSelected: (String) -&gt; Unit, onUsernameSave: (String) -&gt; Unit, onUploadAvatarClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:SocialScreen.kt$@Composable fun SocialHubTopBar( onInviteClick: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:SocialScreen.kt$@Composable fun UsernameRequiredDialog( value: String, onValueChange: (String) -&gt; Unit, error: String?, onConfirm: () -&gt; Unit, onDismiss: () -&gt; Unit, confirmEnabled: Boolean )</ID>
    <ID>FunctionNaming:SocialScreen.kt$@Composable private fun AvatarPreviewDialog( preview: PendingAvatarPreview?, isLoading: Boolean, isApplying: Boolean, errorMessage: String?, canUndo: Boolean, canRedo: Boolean, onDismiss: () -&gt; Unit, onApply: () -&gt; Unit, onRetry: () -&gt; Unit, onUseDefault: () -&gt; Unit, onUndo: () -&gt; Unit, onRedo: () -&gt; Unit )</ID>
    <ID>FunctionNaming:SocialScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SocialScreen( repository: SocialRepository? = null )</ID>
    <ID>FunctionNaming:SocialScreen.kt$@Preview(showBackground = true) @Composable private fun SocialScreenPreview()</ID>
    <ID>FunctionNaming:StateAwareScreen.kt$@Composable fun &lt;T : Any&gt; StateAwareScreen( screenKey: String, defaultState: T, stateClass: Class&lt;T&gt;, statePreservationManager: StatePreservationManager, content: @Composable (state: T, onStateChange: (T) -&gt; Unit) -&gt; Unit )</ID>
    <ID>FunctionNaming:States.kt$@Composable fun EmptyState( modifier: Modifier = Modifier, icon: ImageVector? = null, title: String = "Nothing here yet", message: String = "Add or start something to see content.", action: (@Composable () -&gt; Unit)? = null, )</ID>
    <ID>FunctionNaming:States.kt$@Composable fun ErrorState( modifier: Modifier = Modifier, title: String = "Something went wrong", message: String = "Please try again.", onRetry: () -&gt; Unit = {}, onDiagnostics: (() -&gt; Unit)? = null, )</ID>
    <ID>FunctionNaming:StatsScreen.kt$@Composable private fun StatCard(stat: StatItem)</ID>
    <ID>FunctionNaming:StatsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun StatsScreen( currentUser: User, onBack: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:StreakCounter.kt$@Composable fun EnhancedStreakCounter( streakState: StreakState, modifier: Modifier = Modifier, showFireEffect: Boolean = true, onStreakClick: (() -&gt; Unit)? = null )</ID>
    <ID>FunctionNaming:StreakCounter.kt$@Composable private fun MultiplierBadge( multiplier: Float, isFireStreak: Boolean )</ID>
    <ID>FunctionNaming:StreakCounter.kt$@Composable private fun StreakDangerWarning( hoursUntilBreak: Int )</ID>
    <ID>FunctionNaming:StreakCounter.kt$@Composable private fun StreakProgressBar( progress: Float, nextMilestone: Int, isFireStreak: Boolean )</ID>
    <ID>FunctionNaming:StreakCounterUI.kt$@Composable fun CompactStreakCounter( streakState: StreakState, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:StreakCounterUI.kt$@Composable fun StreakCounterUI( streakState: StreakState, modifier: Modifier = Modifier, showFireEffects: Boolean = true, showWarningIndicators: Boolean = true )</ID>
    <ID>FunctionNaming:StreakCounterUI.kt$@Composable fun StreakMilestoneProgress( streakState: StreakState, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:StreakCounterUI.kt$@Composable private fun AnimatedLinearProgressIndicator( progress: () -&gt; Float, modifier: Modifier = Modifier, color: Color = MaterialTheme.colorScheme.primary, trackColor: Color = MaterialTheme.colorScheme.surfaceVariant )</ID>
    <ID>FunctionNaming:StreakCounterUI.kt$@Composable private fun FireParticleOverlay( particles: List&lt;StreakFireParticle&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:StreakCounterUI.kt$@Composable private fun StreakBackground( streakState: StreakState, pulseScale: Float )</ID>
    <ID>FunctionNaming:StreakWarningSystem.kt$@Composable fun GlobalStreakWarningBanner( streakState: StreakState, onTakeAction: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:StreakWarningSystem.kt$@Composable fun StreakDangerWarning( streakState: StreakState, onDismiss: () -&gt; Unit = {}, onTakeAction: () -&gt; Unit = {}, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:StreakWarningSystem.kt$@Composable private fun StreakTimeRemaining( hoursUntilBreak: Int, warningLevel: WarningLevel )</ID>
    <ID>FunctionNaming:StreakWarningSystem.kt$@Composable private fun StreakWarningCard( streakState: StreakState, onDismiss: () -&gt; Unit, onTakeAction: () -&gt; Unit )</ID>
    <ID>FunctionNaming:StudyBottomNav.kt$@Composable fun StudyBottomNav( currentRoute: String, tabs: List&lt;Triple&lt;String, ImageVector, String&gt;&gt;, onTabSelected: (String) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:StudyHeatmap.kt$@Composable fun StudyHeatmap( entries: Map&lt;LocalDate, Int&gt;, onDayClick: (LocalDate) -&gt; Unit, modifier: Modifier = Modifier, cellSize: Dp = 12.dp, gap: Dp = 3.dp, animateEntry: Boolean = true )</ID>
    <ID>FunctionNaming:StudyHeatmap.kt$@Composable private fun EnhancedHeatmapCell( date: LocalDate, count: Int, color: androidx.compose.ui.graphics.Color, scale: Float, cellSize: Dp, gap: Dp, contentDescription: String, onDayClick: (LocalDate) -&gt; Unit )</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun AchievementMetric( icon: ImageVector, value: String, label: String, color: Color )</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun AchievementSummaryCard(taskStats: TaskStats)</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun CurrentWeekCard( taskStats: TaskStats )</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun DailyScheduleCard( dailySchedule: DailySchedule, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun DailyScheduleView( selectedDay: DailyStudyInfo?, onBackToWeekly: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun DailyStudyHeader( dayInfo: DailyStudyInfo, onBackToWeekly: () -&gt; Unit )</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun DailyTaskItem(task: DailyTask)</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun DailyTasksSection(tasks: List&lt;DailyTask&gt;)</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun GetStartedCard()</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun GoalItem(goal: StudyGoal)</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun NotesSection(notes: String)</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun OverallProgressCard(taskStats: TaskStats)</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun ProgressMetric( label: String, value: String )</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun ProgressOverview( taskStats: TaskStats, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun StudyBookCard(book: StudyBook, units: List&lt;StudyUnit&gt;)</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun StudyGoalsCard(goals: List&lt;StudyGoal&gt;)</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun StudyMaterialItem(material: StudyMaterial)</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun StudyMaterialsSection(materials: List&lt;StudyMaterial&gt;)</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun StudyPlanPreviewCard()</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun StudyPlanTabChip( tab: StudyPlanTab, isSelected: Boolean, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun StudyPlanTabRow( selectedTab: StudyPlanTab, onTabSelected: (StudyPlanTab) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun StudyUnitItem(unit: StudyUnit)</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun SubjectProgressCard(taskStats: TaskStats)</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun WeeklyScheduleView( weeklyPlan: WeeklyStudyPlan, studySchedule: StudyScheduleData, taskStats: TaskStats, onDayClick: (DailyStudyInfo) -&gt; Unit = {}, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@Composable private fun WelcomeProgressCard()</ID>
    <ID>FunctionNaming:StudyPlanOverviewScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun StudyPlanOverviewScreen( appIntegrationManager: AppIntegrationManager, studyProgressRepository: StudyProgressRepository, onNavigateBack: () -&gt; Unit = {}, initialTab: StudyPlanTab = StudyPlanTab.WEEKLY )</ID>
    <ID>FunctionNaming:StudyPlanTopBar.kt$@Composable fun CompactFloatingLanguageSwitcher( modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:StudyPlanTopBar.kt$@Composable fun FloatingLanguageSwitcher( modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:StudyPlanTopBar.kt$@Composable fun SocialHeaderTopBar( cards: List&lt;TopBarCard&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:StudyPlanTopBar.kt$@Composable fun SocialHeaderTopBar(cards: List&lt;TopBarCard&gt;, modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:StudyPlanTopBar.kt$@Composable fun TasksHeaderTopBar( title: String? = null, subtitle: String? = null, xpText: String = "1,250 XP", modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:StudyPlanTopBar.kt$@Composable fun TopBarCardItem( card: TopBarCard, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:StudyPlanTopBar.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun StudyPlanTopBar( title: String, modifier: Modifier = Modifier, subtitle: String? = null, navigationIcon: ImageVector? = null, onNavigationClick: (() -&gt; Unit)? = null, showLanguageSwitcher: Boolean = false, style: StudyPlanTopBarStyle = StudyPlanTopBarStyle.Default, actions: @Composable RowScope.() -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:TaskCard.kt$@Composable fun TaskCard( task: Task, checked: Boolean, onCheckedChange: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, showExpandedDetails: Boolean = false, onExpandToggle: (() -&gt; Unit)? = null, enableSwipeToComplete: Boolean = false, currentStreak: Int = 0, showPointsInfo: Boolean = true )</ID>
    <ID>FunctionNaming:TodayScreen.kt$@Composable fun TodayRoute( vm: TodayViewModel = viewModel(), onNavigateToPlan: () -&gt; Unit = {}, onNavigateToLesson: (String) -&gt; Unit = {}, onNavigateToFocus: (String) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:TodayScreen.kt$@Composable private fun SessionCard( s: SessionUi, onStart: (String) -&gt; Unit, onSkip: (String) -&gt; Unit, onReschedule: (LocalDateTime) -&gt; Unit = {}, onNavigateToFocus: (String) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:TodayScreen.kt$@Composable private fun SwipeableSession( session: SessionUi, onStart: (String) -&gt; Unit, onReschedule: (LocalDateTime) -&gt; Unit, onNavigateToFocus: (String) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:TodayScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun TodayScreen( state: TodayUiState, dailyBudgetMinutes: Int? = null, onStart: (String) -&gt; Unit, onSnackbarShown: () -&gt; Unit, onViewPlan: () -&gt; Unit = {}, onRefresh: () -&gt; Unit = {}, onReschedule: (String, LocalDateTime) -&gt; Unit = {_, _ -&gt; }, onNavigateToFocus: (String) -&gt; Unit = {}, showFloatingActionButton: Boolean = false, )</ID>
    <ID>FunctionNaming:TodayScreen.kt$@Preview(showBackground = true) @Composable private fun TodayScreenPreview()</ID>
    <ID>FunctionNaming:Tooltip.kt$@Composable fun TooltipManager( tooltips: List&lt;TooltipData&gt;, currentTooltipId: String?, onDismiss: (String) -&gt; Unit, modifier: Modifier = Modifier, content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:Tooltip.kt$@Composable fun TooltipTrigger( tooltipId: String, isVisible: Boolean, onShowTooltip: (String) -&gt; Unit, modifier: Modifier = Modifier, pulseColor: Color = MaterialTheme.colorScheme.primary, content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:Tooltip.kt$@Composable private fun TooltipOverlay( tooltip: TooltipData, onDismiss: () -&gt; Unit )</ID>
    <ID>FunctionNaming:TwoPane.kt$@Composable fun TwoPaneScaffold( modifier: Modifier = Modifier, list: @Composable ColumnScope.() -&gt; Unit, detail: @Composable ColumnScope.() -&gt; Unit, )</ID>
    <ID>FunctionNaming:UiStateManager.kt$@Composable fun DefaultEmptyContent(state: UiState.Empty)</ID>
    <ID>FunctionNaming:UiStateManager.kt$@Composable fun DefaultErrorContent(state: UiState.Error, onRetry: (() -&gt; Unit)?)</ID>
    <ID>FunctionNaming:UiStateManager.kt$@Composable fun DefaultLoadingContent(state: UiState.Loading)</ID>
    <ID>FunctionNaming:UiStateManager.kt$@Composable fun DefaultOfflineContent(state: UiState.Offline)</ID>
    <ID>FunctionNaming:UiStateManager.kt$@Composable fun UiStateContent( state: UiState, onRetry: (() -&gt; Unit)? = null, loadingContent: @Composable (UiState.Loading) -&gt; Unit = { DefaultLoadingContent(it) }, errorContent: @Composable (UiState.Error) -&gt; Unit = { DefaultErrorContent(it, onRetry) }, emptyContent: @Composable (UiState.Empty) -&gt; Unit = { DefaultEmptyContent(it) }, offlineContent: @Composable (UiState.Offline) -&gt; Unit = { DefaultOfflineContent(it) }, content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:UndoManager.kt$@Composable fun UndoSnackbarEffect( undoManager: UndoManager, snackbarHostState: SnackbarHostState, recentAction: UndoAction?, onActionConsumed: () -&gt; Unit, scope: CoroutineScope = rememberCoroutineScope() )</ID>
    <ID>FunctionNaming:UserLevelSystem.kt$@Composable fun CompactLevelDisplay( levelSystem: LevelSystem, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:UserLevelSystem.kt$@Composable fun LevelUpCelebration( newLevel: Int, newLevelTitle: String, onDismiss: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:UserLevelSystem.kt$@Composable fun UserLevelDisplay( levelSystem: LevelSystem, modifier: Modifier = Modifier, showDetails: Boolean = true, onLevelUp: ((Int) -&gt; Unit)? = null )</ID>
    <ID>FunctionNaming:UserLevelSystem.kt$@Composable private fun LevelBadge( level: Int, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:UserLevelSystem.kt$@Composable private fun LevelProgressBar( currentXP: Long, xpToNextLevel: Long, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:UserLevelSystem.kt$@Composable private fun LevelUpParticles()</ID>
    <ID>FunctionNaming:UserLevelSystem.kt$@Composable private fun NextLevelPreview( nextLevel: Int, nextLevelTitle: String, benefits: List&lt;String&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WeeklyChallengeSystem.kt$@Composable fun WeeklyChallengeCard( challenge: WeeklyChallenge, onChallengeClick: (WeeklyChallenge) -&gt; Unit = {}, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WeeklyChallengeSystem.kt$@Composable fun WeeklyChallengesScreen( challenges: List&lt;WeeklyChallenge&gt;, onChallengeClick: (WeeklyChallenge) -&gt; Unit, onRefresh: () -&gt; Unit = {}, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WeeklyChallengeSystem.kt$@Composable private fun ChallengeNearestMilestone( milestones: List&lt;ChallengeMilestone&gt;, currentProgress: Int, color: Color )</ID>
    <ID>FunctionNaming:WeeklyChallengeSystem.kt$@Composable private fun ChallengesSummaryCard(challenges: List&lt;WeeklyChallenge&gt;)</ID>
    <ID>FunctionNaming:WeeklyChallengeSystem.kt$@Composable private fun CompletedChallengeCard( challenge: WeeklyChallenge, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WeeklyChallengeSystem.kt$@Composable private fun SummaryStatItem( label: String, value: String, icon: ImageVector )</ID>
    <ID>FunctionNaming:WeeklyPlanScreen.kt$@Composable fun WeekDayCard( day: WeekDay, onClick: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WeeklyPlanScreen.kt$@Composable fun WeekPlanCard( week: WeeklyStudyPlan, onDayClick: (String) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WeeklyPlanScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun WeeklyPlanScreen( onNavigateBack: () -&gt; Unit = {}, onNavigateToDaily: (String) -&gt; Unit = {}, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WelcomeScreen.kt$@Composable fun YdsWelcomeScreen( onStartStudyPlan: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WelcomeScreen.kt$@Composable private fun FeatureCard(feature: FeatureData)</ID>
    <ID>FunctionNaming:WelcomeScreen.kt$@Composable private fun FooterLinkGroup( title: String, links: List&lt;String&gt; )</ID>
    <ID>FunctionNaming:WelcomeScreen.kt$@Composable private fun FooterSection()</ID>
    <ID>FunctionNaming:WelcomeScreen.kt$@Composable private fun HeroSection( onStartStudyPlan: () -&gt; Unit, isVisible: Boolean )</ID>
    <ID>FunctionNaming:WelcomeScreen.kt$@Composable private fun KeyFeaturesSection(isVisible: Boolean)</ID>
    <ID>FunctionNaming:WelcomeScreen.kt$@Composable private fun StatItem( value: String, label: String, icon: ImageVector )</ID>
    <ID>FunctionNaming:WelcomeScreen.kt$@Composable private fun TestimonialCard(testimonial: TestimonialData)</ID>
    <ID>FunctionNaming:WelcomeScreen.kt$@Composable private fun TestimonialsSection(isVisible: Boolean)</ID>
    <ID>FunctionNaming:WorkingTasksScreen.kt$@Composable private fun DailyStudyHeader(studyInfo: DailyStudyInfo, onBackToPlan: () -&gt; Unit)</ID>
    <ID>FunctionNaming:WorkingTasksScreen.kt$@Composable private fun DailyTab( selectedDay: DayPlan?, currentWeek: Int = 1, taskRepository: TaskRepository, sharedViewModel: SharedAppViewModel, onBackToPlan: () -&gt; Unit )</ID>
    <ID>FunctionNaming:WorkingTasksScreen.kt$@Composable private fun DailyTaskItem(task: DailyTask)</ID>
    <ID>FunctionNaming:WorkingTasksScreen.kt$@Composable private fun DailyTasksSection(tasks: List&lt;DailyTask&gt;)</ID>
    <ID>FunctionNaming:WorkingTasksScreen.kt$@Composable private fun DayScheduleList(week: WeekPlan?, onDayClick: (DayPlan) -&gt; Unit = {})</ID>
    <ID>FunctionNaming:WorkingTasksScreen.kt$@Composable private fun NotesSection(notes: String)</ID>
    <ID>FunctionNaming:WorkingTasksScreen.kt$@Composable private fun PlanTab( thisWeek: WeekPlan?, weeklyProgressPct: Float, onDayClick: (DayPlan) -&gt; Unit = {}, onNavigateToStudyPlan: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:WorkingTasksScreen.kt$@Composable private fun SegmentedControl( segments: List&lt;String&gt;, selectedIndex: Int, onSelect: (Int) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WorkingTasksScreen.kt$@Composable private fun StudyBookCard( book: StudyBook, units: List&lt;StudyUnit&gt;, taskRepository: TaskRepository, sharedViewModel: SharedAppViewModel )</ID>
    <ID>FunctionNaming:WorkingTasksScreen.kt$@Composable private fun StudyMaterialItem(material: StudyMaterial)</ID>
    <ID>FunctionNaming:WorkingTasksScreen.kt$@Composable private fun StudyMaterialsSection(materials: List&lt;StudyMaterial&gt;)</ID>
    <ID>FunctionNaming:WorkingTasksScreen.kt$@Composable private fun StudyUnitItem(unit: StudyUnit, onClick: () -&gt; Unit = {})</ID>
    <ID>FunctionNaming:WorkingTasksScreen.kt$@Composable private fun TasksGradientTopBar( appIntegrationManager: AppIntegrationManager? = null )</ID>
    <ID>FunctionNaming:WorkingTasksScreen.kt$@Composable private fun WeekStatItem( icon: androidx.compose.ui.graphics.vector.ImageVector, label: String, value: String, color: Color )</ID>
    <ID>FunctionNaming:WorkingTasksScreen.kt$@Composable private fun WeeklyDayCard( day: DayPlan, dayNumber: Int, isToday: Boolean, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:WorkingTasksScreen.kt$@Composable private fun WeeklyTab( thisWeek: WeekPlan?, currentWeek: Int, studyProgressRepository: com.mtlc.studyplan.data.StudyProgressRepository, onNavigateToPlan: () -&gt; Unit = {}, onNavigateToStudyPlan: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:WorkingTasksScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun WorkingTasksScreen( appIntegrationManager: AppIntegrationManager, studyProgressRepository: com.mtlc.studyplan.data.StudyProgressRepository, taskRepository: TaskRepository, sharedViewModel: SharedAppViewModel, onNavigateToStudyPlan: () -&gt; Unit = {}, modifier: Modifier = Modifier )</ID>
    <ID>ImplicitDefaultLocale:AnalyticsComponents.kt$String.format("%.1f", data.averageSessionsPerDay)</ID>
    <ID>ImplicitDefaultLocale:ComprehensiveResponsiveTest.kt$ResponsiveTestMatrix$String.format("%.2f", aspectRatio)</ID>
    <ID>ImplicitDefaultLocale:ErrorAnalytics.kt$ErrorAnalytics$String.format("%.2f", percentage)</ID>
    <ID>ImplicitDefaultLocale:FocusModeScreen.kt$String.format("%02d:%02d", minutes, seconds)</ID>
    <ID>ImplicitDefaultLocale:IcsExporter.kt$IcsExporter$String.format("%s%02d%02d", sign, kotlin.math.abs(hours), minutes)</ID>
    <ID>ImplicitDefaultLocale:PerformanceTestSuite.kt$PerformanceTestSuite$String.format("%.1f", averageNavTime)</ID>
    <ID>ImplicitDefaultLocale:PerformanceTestSuite.kt$PerformanceTestSuite$String.format("%.1f", averageRestoreTime)</ID>
    <ID>ImplicitDefaultLocale:PerformanceTestSuite.kt$PerformanceTestSuite$String.format("%.1f", averageSaveTime)</ID>
    <ID>ImplicitDefaultLocale:PerformanceTestSuite.kt$PerformanceTestSuite$String.format("%.1f", fpsConsistency * 100)</ID>
    <ID>ImplicitDefaultLocale:PerformanceTestSuite.kt$PerformanceTestSuite$String.format("%.1f", fpsStability * 100)</ID>
    <ID>ImplicitDefaultLocale:PerformanceTestSuite.kt$PerformanceTestSuite$String.format("%.1f", frameDropPercentage)</ID>
    <ID>ImplicitDefaultLocale:PerformanceTestSuite.kt$PerformanceTestSuite$String.format("%.1f", memoryIncrease)</ID>
    <ID>ImplicitDefaultLocale:PerformanceTestSuite.kt$PerformanceTestSuite$String.format("%.1f", minFps)</ID>
    <ID>ImplicitDefaultLocale:PerformanceTestSuite.kt$PerformanceTestSuite$String.format("%.1f", smoothnessPercentage)</ID>
    <ID>ImplicitDefaultLocale:PerformanceTestSuite.kt$PerformanceTestSuite$String.format("%.1f", stabilityPercentage)</ID>
    <ID>ImplicitDefaultLocale:ProductionValidator.kt$ProductionValidator$String.format("%.1f", memoryUsagePercentage)</ID>
    <ID>ImplicitDefaultLocale:ProductionValidator.kt$ProductionValidator$String.format("%.2f", metrics.averageFrameTime)</ID>
    <ID>ImplicitDefaultLocale:ResponsiveDesignCompatibilityTest.kt$DeviceCompatibilityMatrix$String.format("%.2f", aspectRatio)</ID>
    <ID>LargeClass:SettingsDefaults.kt$SettingsDefaults</ID>
    <ID>LargeClass:SettingsRepository.kt$SettingsRepository</ID>
    <ID>LongMethod:AchievementComponents.kt$@Composable fun AchievementCard( achievement: CategorizedAchievement, currentProgress: Float, modifier: Modifier = Modifier, showProgress: Boolean = true )</ID>
    <ID>LongMethod:AchievementComponents.kt$@Composable fun AchievementCategoryCard( categoryProgress: CategoryProgress, onCategoryClick: (AchievementCategory) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:AchievementNotificationSystem.kt$@Composable private fun AchievementCelebrationCard( unlock: AchievementUnlock, celebrationPlaying: Boolean, onDismiss: () -&gt; Unit )</ID>
    <ID>LongMethod:AchievementUnlockAnimation.kt$@Composable fun AchievementUnlockNotification( achievementUnlock: AchievementUnlock, onDismiss: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:AchievementUnlockAnimation.kt$@Composable private fun AchievementUnlockContent( achievementUnlock: AchievementUnlock, animationPhase: AnimationPhase, onShare: (() -&gt; Unit)?, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:AnalyticsComponents.kt$@Composable fun RecommendationItem( recommendation: Recommendation, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:AnalyticsScreen.kt$@Composable fun AnalyticsScreen( modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:AnalyticsScreen.kt$@Composable fun LineChart( data: List&lt;Float&gt;, labels: List&lt;String&gt;, modifier: Modifier = Modifier, animateEntry: Boolean = true )</ID>
    <ID>LongMethod:AnimatedNavigation.kt$EnhancedNavigation$@OptIn(ExperimentalAnimationApi::class) @Composable fun createTransitionSpec( style: NavigationTransitionStyle ): AnimatedContentTransitionScope&lt;NavBackStackEntry&gt;.() -&gt; ContentTransform</ID>
    <ID>LongMethod:AppAnimations.kt$StudyPlanMicroInteractions$@Composable fun enhancedTaskCompletionAnimation( isCompleted: Boolean, onProgressUpdate: (Float) -&gt; Unit = {}, onAnimationComplete: () -&gt; Unit = {} ): TaskCompletionAnimationState</ID>
    <ID>LongMethod:AppNavHost.kt$@Composable private fun EnhancedNavigationBar( currentRoute: String, tabs: List&lt;Triple&lt;String, androidx.compose.ui.graphics.vector.ImageVector, String&gt;&gt;, onTabSelected: (String) -&gt; Unit )</ID>
    <ID>LongMethod:AuthenticationScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun AuthenticationScreen( authManager: AuthenticationManager, onAuthenticationSuccess: () -&gt; Unit, onAuthenticationFailed: (String) -&gt; Unit = {} )</ID>
    <ID>LongMethod:AuthenticationScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun FirstTimeSetupScreen( authManager: AuthenticationManager, onSetupComplete: () -&gt; Unit )</ID>
    <ID>LongMethod:AuthenticationScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PinAuthenticationScreen( authManager: AuthenticationManager, onSuccess: () -&gt; Unit, onSwitchToBiometric: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:AwardCard.kt$@Composable fun AwardCard( award: Award, modifier: Modifier = Modifier, compact: Boolean = true, onClick: ((Award) -&gt; Unit)? = null )</ID>
    <ID>LongMethod:AwardNotification.kt$@Composable fun AwardNotification( award: Award, onDismiss: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:AwardsTab.kt$@OptIn(ExperimentalLayoutApi::class) @Composable fun AwardsTab( awards: List&lt;Award&gt;, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:CalendarWorker.kt$CalendarWorker$override suspend fun doWork(): Result</ID>
    <ID>LongMethod:CompleteMurphyBookData.kt$CompleteMurphyBookData$private fun generateRedBookUnits(): List&lt;MurphyUnit&gt;</ID>
    <ID>LongMethod:EnhancedAppIntegrationManager.kt$EnhancedAppIntegrationManager$private fun combineAllStates()</ID>
    <ID>LongMethod:EnhancedSettingsComponents.kt$@Composable fun EnhancedSelectionButton( text: String, isSelected: Boolean, onClick: () -&gt; Unit, enabled: Boolean = true )</ID>
    <ID>LongMethod:EnhancedSettingsComponents.kt$@Composable fun EnhancedSlider( value: Float, onValueChange: (Float) -&gt; Unit, valueRange: ClosedFloatingPointRange&lt;Float&gt; = 0f..1f, steps: Int = 0, label: String? = null, valueFormatter: (Float) -&gt; String = { "%.1f".format(it) }, enabled: Boolean = true )</ID>
    <ID>LongMethod:EnhancedSettingsComponents.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun EnhancedSettingsCard( title: String, description: String? = null, icon: ImageVector? = null, isEnabled: Boolean = true, onClick: () -&gt; Unit = {}, content: @Composable () -&gt; Unit )</ID>
    <ID>LongMethod:EnhancedSettingsScreen.kt$@Composable private fun AppearanceSettings( settingsRepository: SettingsRepository, onFeedback: (String, Boolean) -&gt; Unit )</ID>
    <ID>LongMethod:EnhancedSettingsScreen.kt$@Composable private fun GamificationSettings( gamificationState: GamificationSettingsViewModel.GamificationUiState, gamificationViewModel: GamificationSettingsViewModel, onFeedback: (String, Boolean) -&gt; Unit )</ID>
    <ID>LongMethod:EnhancedSettingsScreen.kt$@Composable private fun NotificationSettings( notificationState: NotificationSettingsViewModel.NotificationUiState, notificationViewModel: NotificationSettingsViewModel, onFeedback: (String, Boolean) -&gt; Unit )</ID>
    <ID>LongMethod:EnhancedSettingsScreen.kt$@Composable private fun SettingsGradientTopBar( onNavigateBack: () -&gt; Unit, isLoading: Boolean = false )</ID>
    <ID>LongMethod:EnhancedSettingsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun EnhancedSettingsScreen( settingsRepository: SettingsRepository, onNavigateBack: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:ErrorComponents.kt$@Composable fun EmptyStateWithError( error: AppError?, emptyTitle: String, emptyMessage: String, onRetry: (() -&gt; Unit)? = null, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:ErrorComponents.kt$@Composable fun ErrorCard( error: AppError, modifier: Modifier = Modifier, onRetry: (() -&gt; Unit)? = null, onDismiss: (() -&gt; Unit)? = null, recoveryOptions: List&lt;RecoveryOption&gt; = emptyList(), onRecoveryOption: ((String) -&gt; Unit)? = null )</ID>
    <ID>LongMethod:ExamDetailsScreen.kt$@Composable private fun ExamInfoCardWithAction( title: String, icon: ImageVector, examSession: YdsExamService.YdsExamSession, daysRemaining: Int, content: @Composable () -&gt; Unit )</ID>
    <ID>LongMethod:ExamDetailsScreen.kt$@Composable private fun YdsExamGradientTopBar( onNavigateBack: () -&gt; Unit, daysRemaining: Int )</ID>
    <ID>LongMethod:ExamDetailsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ExamDetailsScreen( onNavigateBack: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:FloatingPointsAnimation.kt$@Composable fun FloatingPointsAnimation( points: Int, startPosition: Offset = Offset.Zero, multiplier: Float = 1f, category: TaskCategory? = null, onAnimationComplete: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:FocusComponents.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun FocusSettingsSheet( config: FocusSessionConfig, onConfigUpdate: (FocusSessionConfig) -&gt; Unit, onDismiss: () -&gt; Unit )</ID>
    <ID>LongMethod:FocusComponents.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun FocusStatsSheet( state: FocusSessionState, onDismiss: () -&gt; Unit )</ID>
    <ID>LongMethod:FocusModeScreen.kt$@Composable private fun TimerDisplay( timeRemaining: Int, progress: Float, phase: SessionPhase, isRunning: Boolean, isPaused: Boolean, reducedMotion: Boolean, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:FocusModeScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun FocusModeScreen( taskId: String? = null, taskTitle: String = "Focus Session", onExit: () -&gt; Unit, focusManager: FocusSessionManager = remember { FocusSessionManager() } )</ID>
    <ID>LongMethod:FriendsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun FriendsScreen( currentUser: User, onBack: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:FriendsTab.kt$@Composable fun FriendsTab( friends: List&lt;Friend&gt;, onFriendSelected: (Friend) -&gt; Unit, onAddFriend: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:GamificationSettings.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun GamificationSettingsScreen( settingsManager: GamificationSettingsManager, onNavigateBack: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:GamificationSettingsViewModel.kt$GamificationSettingsViewModel$private fun buildGamificationSettingsList(gamificationData: GamificationData): List&lt;SettingItem&gt;</ID>
    <ID>LongMethod:HomeScreen.kt$@Composable fun HomeScreen()</ID>
    <ID>LongMethod:LeaderboardScreen.kt$@Composable private fun LeaderboardItemCard(entry: LeaderboardEntry)</ID>
    <ID>LongMethod:LeaderboardScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun LeaderboardScreen( currentUser: User, onBack: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:LoginScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun LoginScreen( onLoginSuccess: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:MotivationMechanics.kt$@Composable fun DailyChallengeCard( challenge: DailyChallenge, onChallengeClick: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:OnboardingScreens.kt$@Composable fun OnboardingRoute(onDone: () -&gt; Unit)</ID>
    <ID>LongMethod:OnboardingScreens.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun OnboardingStepDate(vm: OnboardingViewModel)</ID>
    <ID>LongMethod:OriginalSettingsScreen.kt$@Composable private fun SocialSettingsContent(settingsManager: SettingsPreferencesManager)</ID>
    <ID>LongMethod:OriginalSettingsScreen.kt$@Composable private fun TabButton( tab: SettingsTab, isSelected: Boolean, onClick: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:OriginalSettingsScreen.kt$@Composable private fun WeeklyGoalCard( selectedGoalHours: Int, savedGoalHours: Int, onGoalChange: (Int) -&gt; Unit, onSave: () -&gt; Unit, isSaving: Boolean, hasPendingChanges: Boolean, showSavedMessage: Boolean )</ID>
    <ID>LongMethod:OriginalSettingsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun OriginalSettingsScreen( )</ID>
    <ID>LongMethod:PlanSettingsDialog.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PlanSettingsDialog( startEpochDay: Long, totalWeeks: Int, endEpochDay: Long?, totalMonths: Int?, monMinutes: Int, tueMinutes: Int, wedMinutes: Int, thuMinutes: Int, friMinutes: Int, satMinutes: Int, sunMinutes: Int, dateFormatPattern: String?, onDismiss: () -&gt; Unit, onSave: ( newStartEpochDay: Long, newTotalWeeks: Int, newEndEpochDay: Long?, newTotalMonths: Int?, newMonMinutes: Int, newTueMinutes: Int, newWedMinutes: Int, newThuMinutes: Int, newFriMinutes: Int, newSatMinutes: Int, newSunMinutes: Int, newDateFormatPattern: String?, ) -&gt; Unit, )</ID>
    <ID>LongMethod:PointEconomySystem.kt$PointEconomyManager$fun getAvailableCosmetics(): List&lt;CosmeticReward&gt;</ID>
    <ID>LongMethod:PointsAnimations.kt$@Composable fun InlinePointsDisplay( basePoints: Int, multiplier: Float, modifier: Modifier = Modifier, compact: Boolean = false )</ID>
    <ID>LongMethod:PointsAnimations.kt$@Composable private fun AnimatedPointsDisplay( pointsTransaction: PointsTransaction, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:PrivacySettingsViewModel.kt$PrivacySettingsViewModel$private fun buildPrivacySettingsList(privacyData: PrivacyData): List&lt;SettingItem&gt;</ID>
    <ID>LongMethod:ProfileTab.kt$@Composable private fun ProfileCard( profile: SocialProfile, onAvatarSelected: (String) -&gt; Unit, onUploadAvatarClick: () -&gt; Unit, onUndoAvatar: () -&gt; Unit, onRedoAvatar: () -&gt; Unit, canUndo: Boolean, canRedo: Boolean, isAvatarBusy: Boolean, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:RanksTab.kt$@Composable fun RanksTab( ranks: List&lt;RankEntry&gt;, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:ReaderScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ReaderScreen( passage: PassageUi, onBack: () -&gt; Unit = {}, prefsRepo: ReaderPrefsRepository = ReaderPrefsRepository(LocalContext.current.readerPrefsDataStore), glossaryRepo: GlossaryRepo = FakeGlossaryRepo(), )</ID>
    <ID>LongMethod:ResponsiveTypography.kt$@Composable fun responsiveOnboardingTypography(): OnboardingTypography</ID>
    <ID>LongMethod:ResponsiveTypography.kt$@Composable fun responsiveTypography(): ResponsiveTypography</ID>
    <ID>LongMethod:SettingsDefaults.kt$SettingsDefaults$fun getDefaultCategories(): List&lt;SettingsCategory&gt;</ID>
    <ID>LongMethod:SettingsDefaults.kt$SettingsDefaults$private fun getAccessibilitySections(): List&lt;SettingsSection&gt;</ID>
    <ID>LongMethod:SettingsDefaults.kt$SettingsDefaults$private fun getDataSections(): List&lt;SettingsSection&gt;</ID>
    <ID>LongMethod:SettingsDefaults.kt$SettingsDefaults$private fun getGamificationSections(): List&lt;SettingsSection&gt;</ID>
    <ID>LongMethod:SettingsDefaults.kt$SettingsDefaults$private fun getNotificationSections(): List&lt;SettingsSection&gt;</ID>
    <ID>LongMethod:SettingsDefaults.kt$SettingsDefaults$private fun getPrivacySections(): List&lt;SettingsSection&gt;</ID>
    <ID>LongMethod:SettingsDefaults.kt$SettingsDefaults$private fun getSocialSections(): List&lt;SettingsSection&gt;</ID>
    <ID>LongMethod:SettingsDefaults.kt$SettingsDefaults$private fun getTaskSections(): List&lt;SettingsSection&gt;</ID>
    <ID>LongMethod:SettingsIntegrationTest.kt$SettingsIntegrationValidator$fun validateCompleteSettingsSystem(): SettingsIntegrationReport</ID>
    <ID>LongMethod:SettingsRepository.kt$SettingsRepository$suspend fun updateNotificationSetting(id: String, value: Any)</ID>
    <ID>LongMethod:SettingsScreens.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalLayoutApi::class) @Composable fun SettingsScreen( onNavigateToCategory: (String) -&gt; Unit = {}, onBack: () -&gt; Unit = {}, studyProgressRepository: StudyProgressRepository? = null, onboardingRepository: OnboardingRepository? = null )</ID>
    <ID>LongMethod:SmartSuggestions.kt$@Composable private fun SuggestionCard( suggestion: SmartSuggestion, onClick: () -&gt; Unit, onDismiss: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:SmartSuggestions.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SmartSuggestionsCard( suggestions: List&lt;SmartSuggestion&gt;, onSuggestionClick: (SmartSuggestion) -&gt; Unit, onDismissSuggestion: (SmartSuggestion) -&gt; Unit, modifier: Modifier = Modifier, maxSuggestions: Int = 6 // Increased to show more suggestions )</ID>
    <ID>LongMethod:SocialScreen.kt$@Composable fun ProfileSection( profile: SocialProfile, onAvatarSelected: (String) -&gt; Unit, onUsernameSave: (String) -&gt; Unit, onUploadAvatarClick: () -&gt; Unit )</ID>
    <ID>LongMethod:SocialScreen.kt$@Composable fun SocialHubTopBar( onInviteClick: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:SocialScreen.kt$@Composable private fun AvatarPreviewDialog( preview: PendingAvatarPreview?, isLoading: Boolean, isApplying: Boolean, errorMessage: String?, canUndo: Boolean, canRedo: Boolean, onDismiss: () -&gt; Unit, onApply: () -&gt; Unit, onRetry: () -&gt; Unit, onUseDefault: () -&gt; Unit, onUndo: () -&gt; Unit, onRedo: () -&gt; Unit )</ID>
    <ID>LongMethod:SocialScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SocialScreen( repository: SocialRepository? = null )</ID>
    <ID>LongMethod:StatsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun StatsScreen( currentUser: User, onBack: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:StreakCounter.kt$@Composable fun EnhancedStreakCounter( streakState: StreakState, modifier: Modifier = Modifier, showFireEffect: Boolean = true, onStreakClick: (() -&gt; Unit)? = null )</ID>
    <ID>LongMethod:StreakCounterUI.kt$@Composable fun StreakCounterUI( streakState: StreakState, modifier: Modifier = Modifier, showFireEffects: Boolean = true, showWarningIndicators: Boolean = true )</ID>
    <ID>LongMethod:StreakWarningSystem.kt$@Composable private fun StreakWarningCard( streakState: StreakState, onDismiss: () -&gt; Unit, onTakeAction: () -&gt; Unit )</ID>
    <ID>LongMethod:StudyBottomNav.kt$@Composable fun StudyBottomNav( currentRoute: String, tabs: List&lt;Triple&lt;String, ImageVector, String&gt;&gt;, onTabSelected: (String) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:StudyHeatmap.kt$@Composable fun StudyHeatmap( entries: Map&lt;LocalDate, Int&gt;, onDayClick: (LocalDate) -&gt; Unit, modifier: Modifier = Modifier, cellSize: Dp = 12.dp, gap: Dp = 3.dp, animateEntry: Boolean = true )</ID>
    <ID>LongMethod:StudyHeatmap.kt$@Composable private fun EnhancedHeatmapCell( date: LocalDate, count: Int, color: androidx.compose.ui.graphics.Color, scale: Float, cellSize: Dp, gap: Dp, contentDescription: String, onDayClick: (LocalDate) -&gt; Unit )</ID>
    <ID>LongMethod:StudyPlanDatabase.kt$StudyPlanDatabase.Companion.&lt;no name provided&gt;$private fun recreateTasksTable(db: SupportSQLiteDatabase)</ID>
    <ID>LongMethod:StudyPlanOverviewScreen.kt$@Composable private fun DailyScheduleView( selectedDay: DailyStudyInfo?, onBackToWeekly: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:StudyPlanOverviewScreen.kt$@Composable private fun DailyStudyHeader( dayInfo: DailyStudyInfo, onBackToWeekly: () -&gt; Unit )</ID>
    <ID>LongMethod:StudyPlanOverviewScreen.kt$@Composable private fun OverallProgressCard(taskStats: TaskStats)</ID>
    <ID>LongMethod:StudyPlanOverviewScreen.kt$@Composable private fun StudyPlanPreviewCard()</ID>
    <ID>LongMethod:StudyPlanOverviewScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun StudyPlanOverviewScreen( appIntegrationManager: AppIntegrationManager, studyProgressRepository: StudyProgressRepository, onNavigateBack: () -&gt; Unit = {}, initialTab: StudyPlanTab = StudyPlanTab.WEEKLY )</ID>
    <ID>LongMethod:StudyPlanOverviewScreen.kt$private fun createDailyStudyInfo(dailySchedule: DailySchedule, currentWeek: Int = 1): DailyStudyInfo</ID>
    <ID>LongMethod:StudyPlanTopBar.kt$@Composable fun SocialHeaderTopBar( cards: List&lt;TopBarCard&gt;, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:StudyPlanTopBar.kt$@Composable fun TasksHeaderTopBar( title: String? = null, subtitle: String? = null, xpText: String = "1,250 XP", modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:StudyPlanTopBar.kt$@Composable fun TopBarCardItem( card: TopBarCard, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:StudyPlanTopBar.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun StudyPlanTopBar( title: String, modifier: Modifier = Modifier, subtitle: String? = null, navigationIcon: ImageVector? = null, onNavigationClick: (() -&gt; Unit)? = null, showLanguageSwitcher: Boolean = false, style: StudyPlanTopBarStyle = StudyPlanTopBarStyle.Default, actions: @Composable RowScope.() -&gt; Unit = {} )</ID>
    <ID>LongMethod:TodayScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun TodayScreen( state: TodayUiState, dailyBudgetMinutes: Int? = null, onStart: (String) -&gt; Unit, onSnackbarShown: () -&gt; Unit, onViewPlan: () -&gt; Unit = {}, onRefresh: () -&gt; Unit = {}, onReschedule: (String, LocalDateTime) -&gt; Unit = {_, _ -&gt; }, onNavigateToFocus: (String) -&gt; Unit = {}, showFloatingActionButton: Boolean = false, )</ID>
    <ID>LongMethod:Tooltip.kt$@Composable private fun TooltipOverlay( tooltip: TooltipData, onDismiss: () -&gt; Unit )</ID>
    <ID>LongMethod:UserLevelSystem.kt$@Composable fun LevelUpCelebration( newLevel: Int, newLevelTitle: String, onDismiss: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:UserLevelSystem.kt$@Composable fun UserLevelDisplay( levelSystem: LevelSystem, modifier: Modifier = Modifier, showDetails: Boolean = true, onLevelUp: ((Int) -&gt; Unit)? = null )</ID>
    <ID>LongMethod:WeeklyChallengeSystem.kt$@Composable fun WeeklyChallengeCard( challenge: WeeklyChallenge, onChallengeClick: (WeeklyChallenge) -&gt; Unit = {}, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:WeeklyChallengeSystem.kt$@Composable fun WeeklyChallengesScreen( challenges: List&lt;WeeklyChallenge&gt;, onChallengeClick: (WeeklyChallenge) -&gt; Unit, onRefresh: () -&gt; Unit = {}, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:WeeklyChallengeSystem.kt$WeeklyChallengeGenerator$private fun generateChallengeForType( type: WeeklyChallengeType, weekStart: LocalDate, userProgress: UserProgress ): WeeklyChallenge</ID>
    <ID>LongMethod:WeeklyPlanScreen.kt$@Composable fun WeekPlanCard( week: WeeklyStudyPlan, onDayClick: (String) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:WeeklyPlanScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun WeeklyPlanScreen( onNavigateBack: () -&gt; Unit = {}, onNavigateToDaily: (String) -&gt; Unit = {}, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:WelcomeScreen.kt$@Composable private fun FooterSection()</ID>
    <ID>LongMethod:WelcomeScreen.kt$@Composable private fun HeroSection( onStartStudyPlan: () -&gt; Unit, isVisible: Boolean )</ID>
    <ID>LongMethod:WelcomeScreen.kt$@Composable private fun KeyFeaturesSection(isVisible: Boolean)</ID>
    <ID>LongMethod:WelcomeScreen.kt$@Composable private fun TestimonialCard(testimonial: TestimonialData)</ID>
    <ID>LongMethod:WelcomeScreen.kt$@Composable private fun TestimonialsSection(isVisible: Boolean)</ID>
    <ID>LongMethod:WorkingTasksScreen.kt$@Composable private fun DailyStudyHeader(studyInfo: DailyStudyInfo, onBackToPlan: () -&gt; Unit)</ID>
    <ID>LongMethod:WorkingTasksScreen.kt$@Composable private fun DailyTab( selectedDay: DayPlan?, currentWeek: Int = 1, taskRepository: TaskRepository, sharedViewModel: SharedAppViewModel, onBackToPlan: () -&gt; Unit )</ID>
    <ID>LongMethod:WorkingTasksScreen.kt$@Composable private fun PlanTab( thisWeek: WeekPlan?, weeklyProgressPct: Float, onDayClick: (DayPlan) -&gt; Unit = {}, onNavigateToStudyPlan: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:WorkingTasksScreen.kt$@Composable private fun StudyBookCard( book: StudyBook, units: List&lt;StudyUnit&gt;, taskRepository: TaskRepository, sharedViewModel: SharedAppViewModel )</ID>
    <ID>LongMethod:WorkingTasksScreen.kt$@Composable private fun TasksGradientTopBar( appIntegrationManager: AppIntegrationManager? = null )</ID>
    <ID>LongMethod:WorkingTasksScreen.kt$@Composable private fun WeeklyDayCard( day: DayPlan, dayNumber: Int, isToday: Boolean, onClick: () -&gt; Unit )</ID>
    <ID>LongMethod:WorkingTasksScreen.kt$@Composable private fun WeeklyTab( thisWeek: WeekPlan?, currentWeek: Int, studyProgressRepository: com.mtlc.studyplan.data.StudyProgressRepository, onNavigateToPlan: () -&gt; Unit = {}, onNavigateToStudyPlan: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:WorkingTasksScreen.kt$private fun createDailyStudyInfo(dayPlan: DayPlan, currentWeek: Int = 1, context: Context): DailyStudyInfo</ID>
    <ID>LongParameterList:AccessibilityUtils.kt$AccessibilityUtils$( itemView: View, title: String, description: String, currentValue: String, position: Int, totalItems: Int, isClickable: Boolean = true )</ID>
    <ID>LongParameterList:AccessibilityUtils.kt$AccessibilityUtils$( itemView: View, title: String, description: String, matchedText: String, position: Int, totalResults: Int )</ID>
    <ID>LongParameterList:AdvancedLoadingStrategy.kt$EnhancedLoadingComponents$( loadingState: LoadingState&lt;T&gt;, configuration: LoadingConfiguration = LoadingConfiguration(), onRetry: () -&gt; Unit = {}, loadingContent: @Composable () -&gt; Unit, errorContent: @Composable (String) -&gt; Unit = { DefaultErrorContent(it, onRetry) }, content: @Composable (T) -&gt; Unit )</ID>
    <ID>LongParameterList:AnalyticsScreen.kt$( title: String, value: String, subtitle: String, icon: androidx.compose.ui.graphics.vector.ImageVector, color: Color, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:AnimatedNavigation.kt$EnhancedNavigation$( navController: NavHostController, route: String, hapticType: HapticFeedbackType = HapticFeedbackType.TextHandleMove, popUpTo: String? = null, inclusive: Boolean = false, launchSingleTop: Boolean = true )</ID>
    <ID>LongParameterList:AnimationManager.kt$AnimationManager$( textView: TextView, fromValue: Int, toValue: Int, duration: Long = DURATION_MEDIUM, prefix: String = "", suffix: String = "" )</ID>
    <ID>LongParameterList:BadgeComponents.kt$( selected: Boolean, onClick: () -&gt; Unit, onBadgeCleared: () -&gt; Unit, icon: ImageVector, label: String, badgeState: BadgeState, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:CustomizePlanScreen.kt$( plan: List&lt;WeekPlan&gt;, overrides: UserPlanOverrides, startEpochDay: Long, onBack: () -&gt; Unit, onToggleHidden: (taskId: String, hidden: Boolean) -&gt; Unit, onRequestEdit: (taskId: String, currentDesc: String?, currentDetails: String?) -&gt; Unit, onAddTask: (week: Int, dayIndex: Int) -&gt; Unit, )</ID>
    <ID>LongParameterList:CustomizePlanScreen.kt$( week: WeekPlan, overrides: UserPlanOverrides, startEpochDay: Long, onToggleHidden: (taskId: String, hidden: Boolean) -&gt; Unit, onRequestEdit: (taskId: String, currentDesc: String?, currentDetails: String?) -&gt; Unit, onAddTask: (week: Int, dayIndex: Int) -&gt; Unit, )</ID>
    <ID>LongParameterList:DataArchitectureValidator.kt$DataArchitectureValidator$( private val integrationManager: EnhancedAppIntegrationManager, private val taskRepository: TaskRepository, private val achievementRepository: AchievementRepository, private val streakRepository: StreakRepository, private val userSettingsRepository: UserSettingsRepository, private val socialRepository: SocialRepository, private val eventBus: EventBus )</ID>
    <ID>LongParameterList:EnhancedAppIntegrationManager.kt$EnhancedAppIntegrationManager$( private val taskRepository: TaskRepository, private val achievementRepository: AchievementRepository, private val streakRepository: StreakRepository, private val userSettingsRepository: UserSettingsRepository, private val socialRepository: SocialRepository, val eventBus: EventBus, @ApplicationScope private val applicationScope: CoroutineScope )</ID>
    <ID>LongParameterList:EnhancedSettingsComponents.kt$( title: String, description: String? = null, icon: ImageVector? = null, isEnabled: Boolean = true, onClick: () -&gt; Unit = {}, content: @Composable () -&gt; Unit )</ID>
    <ID>LongParameterList:EnhancedSettingsComponents.kt$( value: Float, onValueChange: (Float) -&gt; Unit, valueRange: ClosedFloatingPointRange&lt;Float&gt; = 0f..1f, steps: Int = 0, label: String? = null, valueFormatter: (Float) -&gt; String = { "%.1f".format(it) }, enabled: Boolean = true )</ID>
    <ID>LongParameterList:ErrorComponents.kt$( error: AppError, modifier: Modifier = Modifier, onRetry: (() -&gt; Unit)? = null, onDismiss: (() -&gt; Unit)? = null, recoveryOptions: List&lt;RecoveryOption&gt; = emptyList(), onRecoveryOption: ((String) -&gt; Unit)? = null )</ID>
    <ID>LongParameterList:FixedTopBar.kt$( title: String, modifier: Modifier = Modifier, style: StudyPlanTopBarStyle = StudyPlanTopBarStyle.Default, showLanguageSwitcher: Boolean = false, showSearch: Boolean = false, showMenu: Boolean = false, onSearchClick: (() -&gt; Unit)? = null, onMenuClick: (() -&gt; Unit)? = null, actions: @Composable RowScope.() -&gt; Unit = {} )</ID>
    <ID>LongParameterList:FloatingPointsAnimation.kt$( points: Int, startPosition: Offset = Offset.Zero, multiplier: Float = 1f, category: TaskCategory? = null, onAnimationComplete: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:FocusComponents.kt$( title: String, value: Float, onValueChange: (Float) -&gt; Unit, valueRange: ClosedFloatingPointRange&lt;Float&gt;, steps: Int, valueFormatter: (Float) -&gt; String )</ID>
    <ID>LongParameterList:FocusComponents.kt$( title: String, value: String, subtitle: String, icon: androidx.compose.ui.graphics.vector.ImageVector, color: androidx.compose.ui.graphics.Color, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:FocusModeScreen.kt$( isRunning: Boolean, isPaused: Boolean, phase: SessionPhase, onStartClick: () -&gt; Unit, onPauseClick: () -&gt; Unit, onResumeClick: () -&gt; Unit, onStopClick: () -&gt; Unit, onSkipClick: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:FocusModeScreen.kt$( taskTitle: String, currentSession: Int, completedSessions: Int, onSettingsClick: () -&gt; Unit, onStatsClick: () -&gt; Unit, onExitClick: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:FocusModeScreen.kt$( timeRemaining: Int, progress: Float, phase: SessionPhase, isRunning: Boolean, isPaused: Boolean, reducedMotion: Boolean, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:GamificationSettings.kt$( title: String, subtitle: String, value: Float, valueRange: ClosedFloatingPointRange&lt;Float&gt;, onValueChange: (Float) -&gt; Unit, valueDisplay: (Float) -&gt; String, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:GamificationSettings.kt$GamificationSettingsManager$( enabled: Boolean? = null, intensity: CelebrationIntensity? = null, soundEnabled: Boolean? = null, hapticEnabled: Boolean? = null, particlesEnabled: Boolean? = null, animationSpeed: Float? = null )</ID>
    <ID>LongParameterList:GestureOptimizer.kt$( enabled: Boolean = true, onClickLabel: String? = null, role: androidx.compose.ui.semantics.Role? = null, hapticFeedback: Boolean = true, scaleEffect: Boolean = true, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:GestureOptimizer.kt$( onClick: () -&gt; Unit, onLongClick: (() -&gt; Unit)? = null, enabled: Boolean = true, hapticFeedback: Boolean = true, rippleEffect: Boolean = true, scaleOnPress: Boolean = false )</ID>
    <ID>LongParameterList:GestureOptimizer.kt$( onSwipeLeft: (() -&gt; Unit)? = null, onSwipeRight: (() -&gt; Unit)? = null, onSwipeUp: (() -&gt; Unit)? = null, onSwipeDown: (() -&gt; Unit)? = null, swipeThreshold: Float = 100f, velocityThreshold: Float = 1000f )</ID>
    <ID>LongParameterList:GestureOptimizer.kt$( state: DraggableState, orientation: Orientation, enabled: Boolean = true, interactionSource: MutableInteractionSource? = null, reverseDirection: Boolean = false, onDragStarted: suspend CoroutineScope.(startedPosition: Offset) -&gt; Unit = {}, onDragStopped: suspend CoroutineScope.(velocity: Float) -&gt; Unit = {} )</ID>
    <ID>LongParameterList:GestureOptimizer.kt$( state: ScrollableState, orientation: Orientation, enabled: Boolean = true, reverseDirection: Boolean = false, flingBehavior: FlingBehavior? = null, interactionSource: MutableInteractionSource? = null )</ID>
    <ID>LongParameterList:LoadingComponents.kt$( isLoading: Boolean, loadingType: LoadingType = LoadingType.SHIMMER, message: String = "Loading...", progress: Float = 0f, modifier: Modifier = Modifier, content: @Composable () -&gt; Unit )</ID>
    <ID>LongParameterList:NotificationManager.kt$NotificationManager$( requestCode: Int, title: String, content: String, channelId: String, hour: Int, minute: Int )</ID>
    <ID>LongParameterList:OriginalSettingsScreen.kt$( selectedGoalHours: Int, savedGoalHours: Int, onGoalChange: (Int) -&gt; Unit, onSave: () -&gt; Unit, isSaving: Boolean, hasPendingChanges: Boolean, showSavedMessage: Boolean )</ID>
    <ID>LongParameterList:PlanDataSource.kt$PlanDataSource$( week: Int, level: String, book: String, grammarTopics: String, nextGrammarTopic: String, readingFocus: String, listeningFocus: String, questionType: String )</ID>
    <ID>LongParameterList:PlanSettingsDialog.kt$( startEpochDay: Long, totalWeeks: Int, endEpochDay: Long?, totalMonths: Int?, monMinutes: Int, tueMinutes: Int, wedMinutes: Int, thuMinutes: Int, friMinutes: Int, satMinutes: Int, sunMinutes: Int, dateFormatPattern: String?, onDismiss: () -&gt; Unit, onSave: ( newStartEpochDay: Long, newTotalWeeks: Int, newEndEpochDay: Long?, newTotalMonths: Int?, newMonMinutes: Int, newTueMinutes: Int, newWedMinutes: Int, newThuMinutes: Int, newFriMinutes: Int, newSatMinutes: Int, newSunMinutes: Int, newDateFormatPattern: String?, ) -&gt; Unit, )</ID>
    <ID>LongParameterList:PointEconomySystem.kt$PointEconomyManager$( type: PointTransactionType, amount: Long, description: String, category: TaskCategory? = null, multiplier: Float = 1f, metadata: Map&lt;String, String&gt; = emptyMap() )</ID>
    <ID>LongParameterList:PointEconomySystem.kt$StreakMultiplierTier$( val minDays: Int, val multiplier: Float, val bonusPercentage: Int, val title: String, val description: String, val color: Color, val icon: String )</ID>
    <ID>LongParameterList:ProfileTab.kt$( profile: SocialProfile, onAvatarSelected: (String) -&gt; Unit, onUploadAvatarClick: () -&gt; Unit, onUndoAvatar: () -&gt; Unit, onRedoAvatar: () -&gt; Unit, canUndo: Boolean, canRedo: Boolean, isAvatarBusy: Boolean, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:ProgressDao.kt$ProgressDao$( date: String, tasksCompleted: Int, studyMinutes: Int, pointsEarned: Int, streak: Int, updatedAt: Long, userId: String = "default_user" )</ID>
    <ID>LongParameterList:ResponsiveLayout.kt$( modifier: Modifier = Modifier, containerColor: Color = MaterialTheme.colorScheme.surfaceContainer, elevation: Dp? = null, aspectRatio: Float? = null, minHeight: Dp? = null, maxHeight: Dp? = null, content: @Composable ColumnScope.() -&gt; Unit )</ID>
    <ID>LongParameterList:ResponsiveLayout.kt$( modifier: Modifier = Modifier, topBar: (@Composable () -&gt; Unit)? = null, bottomBar: (@Composable () -&gt; Unit)? = null, floatingActionButton: (@Composable () -&gt; Unit)? = null, containerColor: Color = MaterialTheme.colorScheme.background, content: @Composable (PaddingValues) -&gt; Unit )</ID>
    <ID>LongParameterList:SocialDao.kt$SocialDao$( userId: String, achievementId: String, achievementTitle: String, achievementDescription: String, pointsEarned: Int, isPublic: Boolean = true )</ID>
    <ID>LongParameterList:SocialDao.kt$SocialDao$( userId: String, taskId: String, taskTitle: String, category: String, difficulty: String, pointsEarned: Int, studyMinutes: Int, isPublic: Boolean = true )</ID>
    <ID>LongParameterList:SocialRepository.kt$SocialRepository$( userId: String, achievementId: String, achievementTitle: String, achievementDescription: String, pointsEarned: Int, isPublic: Boolean = true )</ID>
    <ID>LongParameterList:SocialRepository.kt$SocialRepository$( userId: String, activityType: String, title: String, description: String, content: String? = null, pointsEarned: Int = 0, categoryInvolved: String? = null, difficulty: String? = null, studyMinutes: Int? = null, mood: String? = null, location: String? = null, tags: List&lt;String&gt; = emptyList(), challenge: String? = null, isPublic: Boolean = true, isHighlight: Boolean = false )</ID>
    <ID>LongParameterList:SocialRepository.kt$SocialRepository$( userId: String, taskId: String, taskTitle: String, category: String, difficulty: String, pointsEarned: Int, studyMinutes: Int, isPublic: Boolean = true )</ID>
    <ID>LongParameterList:SocialRepository.kt$SocialRepository$( userId: String? = null, activityType: String? = null, category: String? = null, difficulty: String? = null, mood: String? = null, isPublic: Boolean? = null, isHighlight: Boolean? = null, milestone: Boolean? = null, perfectDay: Boolean? = null, fromDate: Long? = null, toDate: Long? = null )</ID>
    <ID>LongParameterList:SocialScreen.kt$( preview: PendingAvatarPreview?, isLoading: Boolean, isApplying: Boolean, errorMessage: String?, canUndo: Boolean, canRedo: Boolean, onDismiss: () -&gt; Unit, onApply: () -&gt; Unit, onRetry: () -&gt; Unit, onUseDefault: () -&gt; Unit, onUndo: () -&gt; Unit, onRedo: () -&gt; Unit )</ID>
    <ID>LongParameterList:SocialScreen.kt$( value: String, onValueChange: (String) -&gt; Unit, error: String?, onConfirm: () -&gt; Unit, onDismiss: () -&gt; Unit, confirmEnabled: Boolean )</ID>
    <ID>LongParameterList:StudyHeatmap.kt$( date: LocalDate, count: Int, color: androidx.compose.ui.graphics.Color, scale: Float, cellSize: Dp, gap: Dp, contentDescription: String, onDayClick: (LocalDate) -&gt; Unit )</ID>
    <ID>LongParameterList:StudyHeatmap.kt$( entries: Map&lt;LocalDate, Int&gt;, onDayClick: (LocalDate) -&gt; Unit, modifier: Modifier = Modifier, cellSize: Dp = 12.dp, gap: Dp = 3.dp, animateEntry: Boolean = true )</ID>
    <ID>LongParameterList:StudyPlanTopBar.kt$( title: String, modifier: Modifier = Modifier, subtitle: String? = null, navigationIcon: ImageVector? = null, onNavigationClick: (() -&gt; Unit)? = null, showLanguageSwitcher: Boolean = false, style: StudyPlanTopBarStyle = StudyPlanTopBarStyle.Default, actions: @Composable RowScope.() -&gt; Unit = {} )</ID>
    <ID>LongParameterList:TaskCard.kt$( task: Task, checked: Boolean, onCheckedChange: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, showExpandedDetails: Boolean = false, onExpandToggle: (() -&gt; Unit)? = null, enableSwipeToComplete: Boolean = false, currentStreak: Int = 0, showPointsInfo: Boolean = true )</ID>
    <ID>LongParameterList:TodayScreen.kt$( state: TodayUiState, dailyBudgetMinutes: Int? = null, onStart: (String) -&gt; Unit, onSnackbarShown: () -&gt; Unit, onViewPlan: () -&gt; Unit = {}, onRefresh: () -&gt; Unit = {}, onReschedule: (String, LocalDateTime) -&gt; Unit = {_, _ -&gt; }, onNavigateToFocus: (String) -&gt; Unit = {}, showFloatingActionButton: Boolean = false, )</ID>
    <ID>LongParameterList:Tooltip.kt$( tooltipId: String, isVisible: Boolean, onShowTooltip: (String) -&gt; Unit, modifier: Modifier = Modifier, pulseColor: Color = MaterialTheme.colorScheme.primary, content: @Composable () -&gt; Unit )</ID>
    <ID>LongParameterList:UiStateManager.kt$( state: UiState, onRetry: (() -&gt; Unit)? = null, loadingContent: @Composable (UiState.Loading) -&gt; Unit = { DefaultLoadingContent(it) }, errorContent: @Composable (UiState.Error) -&gt; Unit = { DefaultErrorContent(it, onRetry) }, emptyContent: @Composable (UiState.Empty) -&gt; Unit = { DefaultEmptyContent(it) }, offlineContent: @Composable (UiState.Offline) -&gt; Unit = { DefaultOfflineContent(it) }, content: @Composable () -&gt; Unit )</ID>
    <ID>LongParameterList:WorkingTasksScreen.kt$( appIntegrationManager: AppIntegrationManager, studyProgressRepository: com.mtlc.studyplan.data.StudyProgressRepository, taskRepository: TaskRepository, sharedViewModel: SharedAppViewModel, onNavigateToStudyPlan: () -&gt; Unit = {}, modifier: Modifier = Modifier )</ID>
    <ID>LoopWithTooManyJumpStatements:PlanRepository.kt$while</ID>
    <ID>MatchingDeclarationName:AchievementTokens.kt$AchievementPalette</ID>
    <ID>MatchingDeclarationName:AdvancedToggle.kt$AdvancedToggleComponent : LinearLayout</ID>
    <ID>MatchingDeclarationName:Elevation.kt$Elevations</ID>
    <ID>MatchingDeclarationName:FeatureScreens.kt$Routes</ID>
    <ID>MatchingDeclarationName:LeaderboardScreen.kt$LeaderboardEntry</ID>
    <ID>MatchingDeclarationName:OriginalSettingsScreen.kt$SettingsTab</ID>
    <ID>MatchingDeclarationName:PriorityIndicator.kt$TaskPriority</ID>
    <ID>MatchingDeclarationName:SocialNav.kt$SocialTab</ID>
    <ID>MatchingDeclarationName:StatsScreen.kt$StatItem</ID>
    <ID>MatchingDeclarationName:TaskCard.kt$Skill</ID>
    <ID>MatchingDeclarationName:Tooltip.kt$TooltipData</ID>
    <ID>MaxLineLength:AchievementDao.kt$AchievementDao$return</ID>
    <ID>MaxLineLength:AchievementDataSource.kt$AchievementDataSource$Achievement</ID>
    <ID>MaxLineLength:AchievementDataSource.kt$AchievementDataSource$Achievement("first_task", "İlk Adım", "İlk görevini tamamladın!") { userProgress -&gt; userProgress.completedTasks.isNotEmpty() }</ID>
    <ID>MaxLineLength:AchievementDataSource.kt$AchievementDataSource$Achievement("hundred_tasks", "Yola Çıktın", "100 görevi tamamladın!") { userProgress -&gt; userProgress.completedTasks.size &gt;= 100 }</ID>
    <ID>MaxLineLength:AchievementDataSource.kt$AchievementDataSource$private</ID>
    <ID>MaxLineLength:ActionSettingView.kt$ActionSettingView$com.mtlc.studyplan.settings.data.SettingItem.ActionSetting.ActionType.DESTRUCTIVE -&gt; "Warning: This action cannot be undone"</ID>
    <ID>MaxLineLength:AdvancedAchievementSystem.kt$AdvancedAchievement$AchievementCategory.GRAMMAR_MASTER -&gt; EstimatedTime.estimateByDailyRate(remaining, 3)</ID>
    <ID>MaxLineLength:AdvancedAchievementSystem.kt$AdvancedAchievement$AchievementCategory.PROGRESS_PIONEER -&gt; EstimatedTime.estimateByWeeklyRate(remaining, 5)</ID>
    <ID>MaxLineLength:AnalyticsComponents.kt$ElevatedCard</ID>
    <ID>MaxLineLength:AnalyticsComponents.kt$colors = CardDefaults.cardColors(containerColor = inferredFeaturePastelContainer("com.mtlc.studyplan.analytics", "Study Time Distribution"))</ID>
    <ID>MaxLineLength:AnalyticsEngine.kt$AnalyticsEngine$description = "Error rate in ${area.category}: ${(area.errorRate * 100).toInt()}%. Suggested focused practice: 15-20 minutes daily."</ID>
    <ID>MaxLineLength:AnalyticsEngine.kt$AnalyticsEngine$description = "You perform ${(efficiency * 100).toInt()}% better around ${hour}:00. Schedule important topics during this time."</ID>
    <ID>MaxLineLength:AnalyticsEngine.kt$AnalyticsEngine$description = "Your consistency score is ${(consistencyScore * 100).toInt()}%. Try shorter, daily sessions to maintain engagement."</ID>
    <ID>MaxLineLength:AnalyticsEngine.kt$AnalyticsEngine$description = "Your recent accuracy is ${(recentAccuracy * 100).toInt()}%. Consider reviewing easier topics to build confidence."</ID>
    <ID>MaxLineLength:AnalyticsEngine.kt$AnalyticsEngine$reasoning = "AI-powered recommendation based on study patterns and performance analysis (confidence: ${(suggestion.confidence * 100).toInt()}%)"</ID>
    <ID>MaxLineLength:AnalyticsEngine.kt$AnalyticsEngine$return logs.filter { it.timestampMillis &gt;= todayStart &amp;&amp; it.timestampMillis &lt; todayEnd }.sumOf { it.minutesSpent }</ID>
    <ID>MaxLineLength:AnalyticsEngine.kt$AnalyticsEngine$val completionRate = hourLogs.size.toFloat() / (hourLogs.sumOf { it.minutesSpent } / 60f).coerceAtLeast(0.1f)</ID>
    <ID>MaxLineLength:AnalyticsEngine.kt$AnalyticsEngine$val todayEnd = today.plusDays(1).atStartOfDay().atZone(java.time.ZoneId.systemDefault()).toInstant().toEpochMilli()</ID>
    <ID>MaxLineLength:AnalyticsScreen.kt$ElevatedCard</ID>
    <ID>MaxLineLength:AnalyticsScreen.kt$val y = size.height - padding - ((value - minValue) / range.coerceAtLeast(1f)) * (size.height - 2 * padding)</ID>
    <ID>MaxLineLength:AnimatedNavigation.kt$EnhancedNavigation$durationMillis = if (isReducedMotion) 0 else StudyPlanMotion.MEDIUM_1.inWholeMilliseconds.toInt()</ID>
    <ID>MaxLineLength:AnimatedNavigation.kt$EnhancedNavigation$durationMillis = if (isReducedMotion) 0 else StudyPlanMotion.SHORT_4.inWholeMilliseconds.toInt()</ID>
    <ID>MaxLineLength:AnimationIntegrationManager.kt$AnimationIntegrationManager$fun</ID>
    <ID>MaxLineLength:AnimationIntegrationManager.kt$AnimationIntegrationManager$val progressAnimation = ObjectAnimator.ofFloat(progressContainer, "scaleX", progressContainer.scaleX, progressValue)</ID>
    <ID>MaxLineLength:AppError.kt$AppError$NetworkError : AppError</ID>
    <ID>MaxLineLength:AppError.kt$AppError$UnknownError : AppError</ID>
    <ID>MaxLineLength:AppIntegrationManager.kt$AppIntegrationManager$val</ID>
    <ID>MaxLineLength:AppNavHost.kt$"Paragraph ${'$'}idx: Reading is core to YDS prep. Control comfort, track time, and learn words in context."</ID>
    <ID>MaxLineLength:AuthenticationManager.kt$AuthenticationManager$SecurityUtils.SecurityLogger.logSecurityEvent("Account locked due to multiple failed attempts", SecurityUtils.SecurityLogger.SecuritySeverity.WARNING)</ID>
    <ID>MaxLineLength:AuthenticationManager.kt$AuthenticationManager$SecurityUtils.SecurityLogger.logSecurityEvent("Authentication failed, attempt: $failedAttempts", SecurityUtils.SecurityLogger.SecuritySeverity.WARNING)</ID>
    <ID>MaxLineLength:AuthenticationManager.kt$AuthenticationManager$SecurityUtils.SecurityLogger.logSecurityEvent("Biometric setup error: ${e.message}", SecurityUtils.SecurityLogger.SecuritySeverity.ERROR)</ID>
    <ID>MaxLineLength:AuthenticationManager.kt$AuthenticationManager$SecurityUtils.SecurityLogger.logSecurityEvent("PIN authentication error: ${e.message}", SecurityUtils.SecurityLogger.SecuritySeverity.ERROR)</ID>
    <ID>MaxLineLength:AuthenticationManager.kt$AuthenticationManager$SecurityUtils.SecurityLogger.logSecurityEvent("PIN setup error: ${e.message}", SecurityUtils.SecurityLogger.SecuritySeverity.ERROR)</ID>
    <ID>MaxLineLength:AuthenticationManager.kt$AuthenticationManager$SecurityUtils.SecurityLogger.logSecurityEvent("Password authentication error: ${e.message}", SecurityUtils.SecurityLogger.SecuritySeverity.ERROR)</ID>
    <ID>MaxLineLength:AuthenticationManager.kt$AuthenticationManager$SecurityUtils.SecurityLogger.logSecurityEvent("Password setup error: ${e.message}", SecurityUtils.SecurityLogger.SecuritySeverity.ERROR)</ID>
    <ID>MaxLineLength:AuthenticationManager.kt$AuthenticationManager$SecurityUtils.SecurityLogger.logSecurityEvent("Weak PIN attempted", SecurityUtils.SecurityLogger.SecuritySeverity.WARNING)</ID>
    <ID>MaxLineLength:AuthenticationManager.kt$AuthenticationManager$SecurityUtils.SecurityLogger.logSecurityEvent("Weak password attempted", SecurityUtils.SecurityLogger.SecuritySeverity.WARNING)</ID>
    <ID>MaxLineLength:AuthenticationScreens.kt$1 -&gt; pin.isNotBlank() &amp;&amp; (pin.length in 4..6 || selectedMethod == AuthenticationManager.AuthMethod.PASSWORD)</ID>
    <ID>MaxLineLength:AwardCard.kt$val badgeBackgroundColor = if (isLocked) colorScheme.surfaceVariant.copy(alpha = if (isDarkTheme) 0.8f else 1f) else colorScheme.secondary</ID>
    <ID>MaxLineLength:CalendarSync.kt$CalendarContractProvider$"${CalendarContract.Calendars.VISIBLE} = 1 AND ${CalendarContract.Calendars.CALENDAR_ACCESS_LEVEL} &gt;= ${CalendarContract.Calendars.CAL_ACCESS_CONTRIBUTOR}"</ID>
    <ID>MaxLineLength:CalendarSync.kt$CalendarContractProvider$ContextCompat.checkSelfPermission(context, Manifest.permission.WRITE_CALENDAR) == PackageManager.PERMISSION_GRANTED</ID>
    <ID>MaxLineLength:CalendarSync.kt$CalendarContractProvider$return</ID>
    <ID>MaxLineLength:CategoryScreens.kt$Card</ID>
    <ID>MaxLineLength:CategoryScreens.kt$SettingRowToggle(title = "Achievement Alerts", description = "Get notified when you earn achievements", checked = false) { }</ID>
    <ID>MaxLineLength:CategoryScreens.kt$SettingRowToggle(title = "Achievements", description = "Unlock achievements and badges", checked = true) { }</ID>
    <ID>MaxLineLength:CategoryScreens.kt$SettingRowToggle(title = "Analytics", description = "Help improve the app with usage data", checked = true) { }</ID>
    <ID>MaxLineLength:CategoryScreens.kt$SettingRowToggle(title = "Award Notifications", description = "Notify friends when you unlock awards", checked = true) { }</ID>
    <ID>MaxLineLength:CategoryScreens.kt$SettingRowToggle(title = "Daily Reminders", description = "Remind me of my daily study goals", checked = true) { }</ID>
    <ID>MaxLineLength:CategoryScreens.kt$SettingRowToggle(title = "Data Sharing", description = "Share anonymized data for research", checked = false) { }</ID>
    <ID>MaxLineLength:CategoryScreens.kt$SettingRowToggle(title = "Point System", description = "Earn points for completing tasks", checked = true) { }</ID>
    <ID>MaxLineLength:CategoryScreens.kt$SettingRowToggle(title = "Progress Tracking", description = "Track time spent on tasks", checked = true) { }</ID>
    <ID>MaxLineLength:CategoryScreens.kt$SettingRowToggle(title = "Push Notifications", description = "Allow notifications from this app", checked = true) { }</ID>
    <ID>MaxLineLength:CategoryScreens.kt$SettingRowToggle(title = "Share Stats with Friends", description = "Allow friends to see your XP and streak", checked = true) { }</ID>
    <ID>MaxLineLength:CategoryScreens.kt$SettingRowToggle(title = "Show in Leaderboards", description = "Appear in friend leaderboards", checked = true) { }</ID>
    <ID>MaxLineLength:CategoryScreens.kt$SettingRowToggle(title = "Smart Scheduling", description = "AI-powered study session recommendations", checked = true) { }</ID>
    <ID>MaxLineLength:CategoryScreens.kt$SettingRowToggle(title = "Streak Counter", description = "Track daily study streaks", checked = true) { }</ID>
    <ID>MaxLineLength:CategoryScreens.kt$SettingRowToggle(title = "Study Reminders", description = "Daily reminders to study", checked = true) { }</ID>
    <ID>MaxLineLength:CategoryScreens.kt$Text(description, style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.onSurfaceVariant)</ID>
    <ID>MaxLineLength:CategoryScreens.kt$Text(subtitle, style = MaterialTheme.typography.bodyLarge, color = MaterialTheme.colorScheme.onSurfaceVariant)</ID>
    <ID>MaxLineLength:CategoryScreens.kt$Text(title, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.SemiBold, color = MaterialTheme.colorScheme.primary)</ID>
    <ID>MaxLineLength:CategoryScreens.kt$private</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyInstructions = "1. Analyze subtle meanings\n2. Study complex examples\n3. Practice in sophisticated contexts\n4. Focus on precision\n5. Apply in academic/professional settings"</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyInstructions = "1. Compare with similar structures\n2. Focus on usage differences\n3. Complete exercises and additional exercises\n4. Apply in real contexts\n5. Review problem areas"</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyInstructions = "1. Learn question formation rules\n2. Practice making questions\n3. Complete all exercises\n4. Focus on short answer patterns\n5. Practice asking questions aloud"</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyInstructions = "1. Read the explanation carefully\n2. Study all example sentences\n3. Complete exercises 1.1-1.4 in order\n4. Check answers immediately\n5. Review mistakes and redo incorrect items"</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyInstructions = "1. Read the unit explanation\n2. Study the examples\n3. Complete all exercises\n4. Check your answers\n5. Review any mistakes"</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyInstructions = "1. Understand the concept of 'now'\n2. Learn -ing spelling rules\n3. Practice forming sentences\n4. Complete exercises systematically\n5. Compare with simple present"</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyInstructionsTr = "1. 'Şimdi' kavramını anla\n2. -ing yazım kurallarını öğren\n3. Cümle kurmayı pratik et\n4. Alıştırmaları sistematik olarak tamamla\n5. Basit şimdiki zamanla karşılaştır"</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyInstructionsTr = "1. Açıklamayı dikkatlice oku\n2. Tüm örnek cümleleri incele\n3. 1.1-1.4 alıştırmalarını sırayla tamamla\n4. Cevapları hemen kontrol et\n5. Hataları gözden geçir ve yanlışları tekrar yap"</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyInstructionsTr = "1. Benzer yapılarla karşılaştır\n2. Kullanım farklarına odaklan\n3. Alıştırmaları ve ek alıştırmaları tamamla\n4. Gerçek bağlamlarda uygula\n5. Problem alanlarını gözden geçir"</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyInstructionsTr = "1. Soru oluşturma kurallarını öğren\n2. Soru yapmayı pratik et\n3. Tüm alıştırmaları tamamla\n4. Kısa cevap kalıplarına odaklan\n5. Soruları sesli olarak pratik et"</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyInstructionsTr = "1. Ünite açıklamasını oku\n2. Örnekleri incele\n3. Tüm alıştırmaları tamamla\n4. Cevaplarını kontrol et\n5. Hataları gözden geçir"</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyInstructionsTr = "1. İnce anlamları analiz et\n2. Karmaşık örnekleri çalış\n3. Sofistike bağlamlarda pratik yap\n4. Hassasiyete odaklan\n5. Akademik/profesyonel ortamlarda uygula"</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyMethodology = "Analyze complex examples, understand nuances, apply in sophisticated contexts. Focus on register and appropriateness."</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyMethodology = "Focus on usage differences between similar structures. Complete exercises, then additional exercises for extra practice."</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyMethodology = "Study one unit at a time. Read explanation, study examples, complete exercises A-D, check answers immediately."</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyMethodologyTr = "Benzer yapılar arasındaki kullanım farklarına odaklan. Alıştırmaları tamamla, sonra ekstra pratik için ek alıştırmalar yap."</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyMethodologyTr = "Bir seferde bir ünite çalış. Açıklamayı oku, örnekleri incele, A-D alıştırmalarını tamamla, cevapları hemen kontrol et."</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyMethodologyTr = "Karmaşık örnekleri analiz et, nüansları anla, sofistike bağlamlarda uygula. Register ve uygunluğa odaklan."</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyTips = "Practice contractions in speaking. Use 'to be' in simple sentences about yourself and others."</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyTips = "Remember: in questions, the verb comes before the subject. Practice with a partner if possible."</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyTips = "Think about what you can see happening right now. Use gestures to show ongoing actions."</ID>
    <ID>MaxLineLength:CompleteMurphyBookData.kt$CompleteMurphyBookData$studyTipsTr = "Kısaltmaları konuşurken pratik yap. 'Olmak' fiilini kendin ve başkaları hakkında basit cümlelerde kullan."</ID>
    <ID>MaxLineLength:ConflictResolutionAdapter.kt$ConflictResolutionAdapter$)</ID>
    <ID>MaxLineLength:CustomizePlanScreen.kt$Text(dayDate.format(fmtShort), style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.onSurfaceVariant)</ID>
    <ID>MaxLineLength:CustomizePlanScreen.kt$Text(weekRange, style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.onSurfaceVariant)</ID>
    <ID>MaxLineLength:CustomizePlanScreen.kt$if (weekStart.month == weekEnd.month) "${weekStart.format(fmtShort)} – ${weekEnd.dayOfMonth}" else "${weekStart.format(fmtShort)} – ${weekEnd.format(fmtShort)}"</ID>
    <ID>MaxLineLength:CustomizePlanScreen.kt$val weekStart = remember(startEpochDay, week.week) { LocalDate.ofEpochDay(startEpochDay).plusDays(((week.week - 1) * 7L)) }</ID>
    <ID>MaxLineLength:DataArchitectureValidator.kt$DataArchitectureValidator$integrationManager.getAppStateSummary() + "\n\nValidation: ${if (appState.isInitialized) "✅ HEALTHY" else "⚠️ INITIALIZING"}"</ID>
    <ID>MaxLineLength:DataConsistencyManager.kt$DataConsistencyManager$FixResult.RequiresManualFix("Stats mismatch detected; please sync the progress repository manually.")</ID>
    <ID>MaxLineLength:DataConsistencyManager.kt$DataConsistencyManager$Log.w("DataConsistency", "Cannot auto-fix stats mismatch without LocalRepository implementation")</ID>
    <ID>MaxLineLength:DataModels.kt$Achievement</ID>
    <ID>MaxLineLength:DataModels.kt$ExamInfo</ID>
    <ID>MaxLineLength:EnhancedAppIntegrationManager.kt$EnhancedAppIntegrationManager$"achievements" -&gt; currentState.copy(achievementState = currentState.achievementState.copy(isLoading = isLoading))</ID>
    <ID>MaxLineLength:EnhancedAppIntegrationManager.kt$EnhancedAppIntegrationManager$combine</ID>
    <ID>MaxLineLength:EnhancedSettingsScreen.kt$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Accessibility.HIGH_CONTRAST_MODE, it))</ID>
    <ID>MaxLineLength:EnhancedSettingsScreen.kt$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Accessibility.REDUCED_MOTION, it))</ID>
    <ID>MaxLineLength:EnhancedSettingsScreen.kt$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateFloat(SettingsKeys.Appearance.ANIMATION_SPEED, newSpeed))</ID>
    <ID>MaxLineLength:EnhancedSettingsScreen.kt$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateFloat(SettingsKeys.Appearance.FONT_SIZE, newSize))</ID>
    <ID>MaxLineLength:EnhancedSettingsScreen.kt$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateString(SettingsKeys.Appearance.THEME_MODE, themeValue))</ID>
    <ID>MaxLineLength:EnhancedSettingsScreen.kt$val animationSpeed by settingsRepository.getFloatSettingFlow(SettingsKeys.Appearance.ANIMATION_SPEED, 1.0f).collectAsState(1.0f)</ID>
    <ID>MaxLineLength:EnhancedSettingsScreen.kt$val currentThemeMode by settingsRepository.getStringSettingFlow(SettingsKeys.Appearance.THEME_MODE, "system").collectAsState("system")</ID>
    <ID>MaxLineLength:EnhancedSettingsScreen.kt$val highContrast by settingsRepository.getBooleanSettingFlow(SettingsKeys.Accessibility.HIGH_CONTRAST_MODE, false).collectAsState(false)</ID>
    <ID>MaxLineLength:EnhancedSettingsScreen.kt$val reducedMotion by settingsRepository.getBooleanSettingFlow(SettingsKeys.Accessibility.REDUCED_MOTION, false).collectAsState(false)</ID>
    <ID>MaxLineLength:ErrorAnalytics.kt$ErrorAnalytics$val sessionCount = errorSessions.values.map { it.map { session -&gt; session.sessionId }.distinct() }.flatten().distinct().size</ID>
    <ID>MaxLineLength:EventHandler.kt$EventHandler$message = "${event.achievementTitle}\n${event.achievementDescription}\n+${event.pointsReward} points!"</ID>
    <ID>MaxLineLength:EventHandler.kt$EventHandler$message = "Amazing work! You completed ${event.tasksCompleted} tasks and studied for ${event.studyMinutes} minutes with ${event.efficiency} efficiency!"</ID>
    <ID>MaxLineLength:ExamCalendarDataSource.kt$ExamCalendarDataSource$ExamInfo(name = "YDS/1 (İlkbahar)", applicationStart = LocalDate.of(2026, 2, 18), applicationEnd = LocalDate.of(2026, 2, 26), examDate = LocalDate.of(2026, 4, 12))</ID>
    <ID>MaxLineLength:ExamCalendarDataSource.kt$ExamCalendarDataSource$ExamInfo(name = "YDS/2 (Sonbahar)", applicationStart = LocalDate.of(2026, 8, 26), applicationEnd = LocalDate.of(2026, 9, 3), examDate = LocalDate.of(2026, 10, 25))</ID>
    <ID>MaxLineLength:ExamCalendarDataSource.kt$ExamCalendarDataSource$ExamInfo(name = "YÖKDİL/1 (İlkbahar)", applicationStart = LocalDate.of(2026, 1, 28), applicationEnd = LocalDate.of(2026, 2, 5), examDate = LocalDate.of(2026, 3, 22))</ID>
    <ID>MaxLineLength:ExamCalendarDataSource.kt$ExamCalendarDataSource$ExamInfo(name = "YÖKDİL/2 (Sonbahar)", applicationStart = LocalDate.of(2026, 7, 15), applicationEnd = LocalDate.of(2026, 7, 23), examDate = LocalDate.of(2026, 8, 23))</ID>
    <ID>MaxLineLength:ExamDetailsScreen.kt$InfoRow("Application Period", formatDate(exam.registrationStart) + " - " + formatDate(exam.registrationEnd))</ID>
    <ID>MaxLineLength:ExamProgressModels.kt$StreakInfo$val motivationText: String = if (currentStreak &gt; 0) "You're on fire! 🔥" else "Complete your first day to start a streak"</ID>
    <ID>MaxLineLength:FocusSession.kt$FocusSessionManager$if</ID>
    <ID>MaxLineLength:FocusSession.kt$FocusSessionState$val breakDuration = if (currentPhase == SessionPhase.SHORT_BREAK) config.shortBreak else config.longBreak</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$achievementBadgesEnabled = settingsRepository.getBoolean(SettingsKeys.Gamification.ACHIEVEMENT_BADGES, true)</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$celebrationEffectsEnabled = settingsRepository.getBoolean(SettingsKeys.Gamification.CELEBRATION_EFFECTS, true)</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$dailyChallengesEnabled = settingsRepository.getBoolean(SettingsKeys.Gamification.DAILY_CHALLENGES, true)</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$leaderboardEnabled = settingsRepository.getBoolean(SettingsKeys.Gamification.LEADERBOARD_ENABLED, true)</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$levelProgressionEnabled = settingsRepository.getBoolean(SettingsKeys.Gamification.LEVEL_PROGRESSION, true)</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$pointsRewardsEnabled = settingsRepository.getBoolean(SettingsKeys.Gamification.POINTS_REWARDS, true)</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$rewardAnimationsEnabled = settingsRepository.getBoolean(SettingsKeys.Gamification.REWARD_ANIMATIONS, true)</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Gamification.ACHIEVEMENT_BADGES, !current))</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Gamification.CELEBRATION_EFFECTS, !current))</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Gamification.DAILY_CHALLENGES, !current))</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Gamification.LEADERBOARD_ENABLED, !current))</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Gamification.LEVEL_PROGRESSION, !current))</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Gamification.POINTS_REWARDS, !current))</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Gamification.REWARD_ANIMATIONS, !current))</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Gamification.STREAK_RISK_WARNINGS, !current))</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Gamification.STREAK_TRACKING, !current))</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Gamification.XP_MULTIPLIERS, !current))</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$streakRiskWarningsEnabled = settingsRepository.getBoolean(SettingsKeys.Gamification.STREAK_RISK_WARNINGS, true)</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$streakTrackingEnabled = settingsRepository.getBoolean(SettingsKeys.Gamification.STREAK_TRACKING, true)</ID>
    <ID>MaxLineLength:GamificationIntegration.kt$GamificationIntegration$xpMultipliersEnabled = settingsRepository.getBoolean(SettingsKeys.Gamification.XP_MULTIPLIERS, true)</ID>
    <ID>MaxLineLength:GamificationManager.kt$GamificationManager$actions.add("You're close to unlocking '${achievement.title}' - ${(achievement.progressPercentage * 100).toInt()}% complete!")</ID>
    <ID>MaxLineLength:GamificationSettings.kt$text = "This will reset all gamification settings to their default values. This action cannot be undone."</ID>
    <ID>MaxLineLength:HomeScreen.kt$Text</ID>
    <ID>MaxLineLength:HomeScreen.kt$Text("Status: ${YdsExamService.getStatusMessage()}", style = MaterialTheme.typography.bodySmall)</ID>
    <ID>MaxLineLength:HomeScreen.kt$val todayStats by progressRepo.todayStats.collectAsState(initial = com.mtlc.studyplan.repository.ProgressRepository.DailyStats())</ID>
    <ID>MaxLineLength:IcsExporter.kt$IcsExporter$dayString.lowercase() in listOf("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday")</ID>
    <ID>MaxLineLength:ImageProcessingUtils.kt$ImageProcessingUtils$private suspend</ID>
    <ID>MaxLineLength:ImageProcessingUtils.kt$ImageProcessingUtils$return@withContext ImageValidationResult(false, "Unsupported image format. Please use JPG, PNG, WebP, or GIF")</ID>
    <ID>MaxLineLength:ImageProcessingUtils.kt$ImageProcessingUtils$suspend</ID>
    <ID>MaxLineLength:LanguageManager.kt$LanguageManager.Companion$private val Context.languageDataStore: DataStore&lt;Preferences&gt; by preferencesDataStore(name = "language_settings")</ID>
    <ID>MaxLineLength:MotivationMechanics.kt$ChallengeGenerator$private</ID>
    <ID>MaxLineLength:MotivationMechanics.kt$ComebackSystem$daysSinceLastActivity &lt;= 14 -&gt; "Welcome back, champion! Progress isn't about perfection - it's about persistence."</ID>
    <ID>MaxLineLength:MotivationMechanics.kt$ComebackSystem$daysSinceLastActivity &lt;= 3 -&gt; "Great to see you again! Every expert was once a beginner. Let's get back on track!"</ID>
    <ID>MaxLineLength:MotivationMechanics.kt$ComebackSystem$daysSinceLastActivity &lt;= 7 -&gt; "You're back! The best time to plant a tree was 20 years ago. The second best time is now."</ID>
    <ID>MaxLineLength:NetworkSecurityManager.kt$NetworkSecurityManager$.</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$achievementAlertsEnabled = settingsRepository.getBoolean(SettingsKeys.Notifications.ACHIEVEMENT_ALERTS, true)</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$emailSummariesEnabled = settingsRepository.getBoolean(SettingsKeys.Notifications.EMAIL_SUMMARIES, false)</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$emailSummaryFrequency = settingsRepository.getString(SettingsKeys.Notifications.EMAIL_SUMMARY_FREQUENCY, "weekly")</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$goalRemindersEnabled = settingsRepository.getBoolean(SettingsKeys.Notifications.GOAL_REMINDERS, true)</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$notificationSound = settingsRepository.getString(SettingsKeys.Notifications.NOTIFICATION_SOUND, "default")</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$pushNotificationsEnabled = settingsRepository.getBoolean(SettingsKeys.Notifications.PUSH_NOTIFICATIONS, true)</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$quietHoursEnabled = settingsRepository.getBoolean(SettingsKeys.Notifications.QUIET_HOURS_ENABLED, false)</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$quietHoursStart = settingsRepository.getString(SettingsKeys.Notifications.QUIET_HOURS_START, "22:00")</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Notifications.ACHIEVEMENT_ALERTS, !current))</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Notifications.EMAIL_SUMMARIES, !current))</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Notifications.GOAL_REMINDERS, !current))</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Notifications.PUSH_NOTIFICATIONS, !current))</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Notifications.QUIET_HOURS_ENABLED, !current))</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Notifications.SOCIAL_NOTIFICATIONS, !current))</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Notifications.STREAK_WARNINGS, !current))</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Notifications.STUDY_REMINDERS, !current))</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Notifications.VIBRATION_ENABLED, !current))</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Notifications.WEEKLY_REPORTS, !current))</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateString(SettingsKeys.Notifications.EMAIL_SUMMARY_FREQUENCY, frequency))</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateString(SettingsKeys.Notifications.NOTIFICATION_SOUND, sound))</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateString(SettingsKeys.Notifications.QUIET_HOURS_END, time))</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateString(SettingsKeys.Notifications.QUIET_HOURS_START, time))</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateString(SettingsKeys.Notifications.STUDY_REMINDER_TIME, time))</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$socialNotificationsEnabled = settingsRepository.getBoolean(SettingsKeys.Notifications.SOCIAL_NOTIFICATIONS, true)</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$streakWarningsEnabled = settingsRepository.getBoolean(SettingsKeys.Notifications.STREAK_WARNINGS, true)</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$studyReminderTime = settingsRepository.getString(SettingsKeys.Notifications.STUDY_REMINDER_TIME, "09:00")</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$studyRemindersEnabled = settingsRepository.getBoolean(SettingsKeys.Notifications.STUDY_REMINDERS, true)</ID>
    <ID>MaxLineLength:NotificationIntegration.kt$NotificationIntegration$weeklyReportsEnabled = settingsRepository.getBoolean(SettingsKeys.Notifications.WEEKLY_REPORTS, true)</ID>
    <ID>MaxLineLength:NotificationManager.kt$NotificationManager$.</ID>
    <ID>MaxLineLength:OnboardingRepository.kt$OnboardingRepository.Companion$message = "Adjust your study schedule, start date, and daily time allocations to match your availability."</ID>
    <ID>MaxLineLength:OnboardingRepository.kt$OnboardingRepository.Companion$message = "Tap the calendar icon to hide, edit, or add your own tasks. All changes are saved on your device."</ID>
    <ID>MaxLineLength:OnboardingScreens.kt$initialSelectedDateMillis = examDate.atStartOfDay(java.time.ZoneId.systemDefault()).toInstant().toEpochMilli()</ID>
    <ID>MaxLineLength:OnboardingScreens.kt$initialSelectedDateMillis = startDate.atStartOfDay(java.time.ZoneId.systemDefault()).toInstant().toEpochMilli()</ID>
    <ID>MaxLineLength:OnboardingScreens.kt$value = finalEndDate.format(java.time.format.DateTimeFormatter.ofPattern("MMM dd, yyyy"))</ID>
    <ID>MaxLineLength:OriginalSettingsScreen.kt$SettingsTab("gamification", stringResource(R.string.gamification).capitalizeFirst(), Icons.Outlined.EmojiEvents)</ID>
    <ID>MaxLineLength:OriginalSettingsScreen.kt$SettingsTab("notifications", stringResource(R.string.notifications).capitalizeFirst(), Icons.Outlined.Notifications)</ID>
    <ID>MaxLineLength:OriginalSettingsScreen.kt$Text("This will permanently delete all your study progress, achievements, and statistics. You will return to the welcome screen to start fresh. This action cannot be undone.")</ID>
    <ID>MaxLineLength:OriginalSettingsScreen.kt$Toast.makeText(context, "Failed to reset. Please try again.", Toast.LENGTH_SHORT).show()</ID>
    <ID>MaxLineLength:OriginalSettingsScreen.kt$Toast.makeText(context, "Login failed: ${result.exceptionOrNull()?.message}", Toast.LENGTH_LONG).show()</ID>
    <ID>MaxLineLength:OriginalSettingsScreen.kt$val goalSettings by userSettingsRepository.goalSettings.collectAsState(initial = UserSettingsRepository.GoalSettings.default())</ID>
    <ID>MaxLineLength:OriginalSettingsScreen.kt$val navSettings by settingsManager.navigationSettings.collectAsState(initial = com.mtlc.studyplan.settings.data.NavigationSettings())</ID>
    <ID>MaxLineLength:OriginalSettingsScreen.kt$val notificationSettings by settingsManager.notificationSettings.collectAsState(initial = com.mtlc.studyplan.settings.data.NotificationSettings())</ID>
    <ID>MaxLineLength:OriginalSettingsScreen.kt$val socialSettings by settingsManager.socialSettings.collectAsState(initial = com.mtlc.studyplan.settings.data.SocialSettings())</ID>
    <ID>MaxLineLength:PerformanceTestSuite.kt$PerformanceTestSuite$details = "$animationCount concurrent animations, ${String.format("%.1f", smoothnessPercentage)}% smooth frames (55fps+)"</ID>
    <ID>MaxLineLength:PerformanceTestSuite.kt$PerformanceTestSuite$details = "Average navigation: ${String.format("%.1f", averageNavTime)}ms, Fast navigations: ${speedPercentage.toInt()}% under 300ms"</ID>
    <ID>MaxLineLength:PerformanceTestSuite.kt$PerformanceTestSuite$details = "Average save: ${String.format("%.1f", averageSaveTime)}ms, restore: ${String.format("%.1f", averageRestoreTime)}ms"</ID>
    <ID>MaxLineLength:PerformanceTestSuite.kt$PerformanceTestSuite$details = "Frame drops: ${frameDrops.size}/${metrics.size} samples (${String.format("%.1f", frameDropPercentage)}%)"</ID>
    <ID>MaxLineLength:PerformanceTestSuite.kt$PerformanceTestSuite$details = "Memory increase: +${String.format("%.1f", memoryIncrease)}MB, FPS stability: ${String.format("%.1f", fpsStability * 100)}%"</ID>
    <ID>MaxLineLength:PerformanceTestSuite.kt$PerformanceTestSuite$details = "Scroll stability: ${String.format("%.1f", stabilityPercentage)}% of frames above 55fps during aggressive scrolling"</ID>
    <ID>MaxLineLength:PerformanceTestSuite.kt$PerformanceTestSuite$details = "Time to stable 60fps: ${timeToStableFps}ms, Min FPS during startup: ${String.format("%.1f", minFps)}"</ID>
    <ID>MaxLineLength:PerformanceTestSuite.kt$PerformanceTestSuite$recommendations.add("Improve LazyColumn performance - implement proper keys and consider item prefetching")</ID>
    <ID>MaxLineLength:PerformanceTestSuite.kt$PerformanceTestSuite$recommendations.add("Move background processing to lower priority threads or implement throttling")</ID>
    <ID>MaxLineLength:PerformanceTestSuite.kt$PerformanceTestSuite$recommendations.add("Optimize app startup time - consider lazy initialization and background pre-loading")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$DayPlan("Cuma", listOf(PlanTask("$weekId-exam-5", "Tam Deneme Sınavı", "Kaynak: Çıkmış bir sınav. 80 soruyu tam 180 dakika içinde çöz."), PlanTask("$weekId-analysis-5", "Deneme Analizi", "Analizini yap ve bu denemede öğrendiğin yeni kelimeleri tekrar et.")))</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$DayPlan("Cumartesi", listOf(PlanTask("$weekId-exam-6", "Tam Deneme Sınavı", "Kaynak: Çıkmış bir sınav. 80 soruyu tam 180 dakika içinde çöz."), PlanTask("$weekId-t12", "Haftalık Kelime Tekrarı", "Bu hafta denemelerde çıkan bilmediğin tüm kelimeleri flashcard uygulaması üzerinden tekrar et.")))</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$DayPlan("Pazar", listOf(PlanTask("$weekId-t13", "Genel Tekrar ve Dinlenme", "Haftanın denemelerindeki genel hata tiplerini (örn: zaman yönetimi, belirli soru tipi) gözden geçir."), PlanTask("$weekId-t14", "Strateji ve Motivasyon", "Gelecek haftanın stratejisini belirle ve zihnini dinlendir. Sınava az kaldı!")))</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$DayPlan("Pazartesi", listOf(PlanTask("$weekId-exam-1", "Tam Deneme Sınavı", "Kaynak: Son yıllara ait çıkmış bir YDS/YÖKDİL sınavı. 80 soruyu tam 180 dakika içinde çöz."), PlanTask("$weekId-analysis-1", "Deneme Analizi", "Sınav sonrası en az 1 saat ara ver. Ardından yanlışlarını, boşlarını ve doğru yapsan bile emin olmadıklarını detaylıca analiz et. Bilmediğin kelimeleri listele.")))</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$DayPlan("Perşembe", listOf(PlanTask("$weekId-exam-4", "Tam Deneme Sınavı", "Kaynak: Çıkmış bir sınav. 80 soruyu tam 180 dakika içinde çöz."), PlanTask("$weekId-analysis-4", "Deneme Analizi", "Analizini yap ve bu denemede öğrendiğin yeni kelimeleri tekrar et.")))</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$DayPlan("Salı", listOf(PlanTask("$weekId-exam-2", "Tam Deneme Sınavı", "Kaynak: Güvenilir bir yayınevinin deneme sınavı. 80 soruyu tam 180 dakika içinde çöz."), PlanTask("$weekId-analysis-2", "Deneme Analizi", "Dünkü gibi detaylı analiz yap. Özellikle tekrar eden hata tiplerine odaklan.")))</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$DayPlan("Çarşamba", listOf(PlanTask("$weekId-exam-3", "Tam Deneme Sınavı", "Kaynak: Çıkmış bir sınav. 80 soruyu tam 180 dakika içinde çöz."), PlanTask("$weekId-analysis-3", "Deneme Analizi", "Analizini yap ve bu denemede öğrendiğin yeni kelimeleri tekrar et.")))</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-car1", "1. Ders: Okuma ve Kelime", "Newsinlevels.com (Level 1-2) sitesinden en az 3 haber oku ve 15 yeni kelime çıkar.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-car2", "2. Ders: Dinleme ve Tekrar", "ESL/British Council podcastlerinden bir bölüm dinle ve öğrendiğin kelimeleri tekrar et.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-cmt1", "1. Ders: Haftalık Kelime Tekrarı", "Bu hafta öğrendiğin tüm yeni kelimeleri (yaklaşık 40-50 kelime) flashcard uygulamasıyla tekrar et.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-cmt2", "2. Ders: Keyif için İngilizce (Dizi/Film)", "İngilizce altyazılı bir dizi bölümü veya film izle. Anlamaya değil, kulağını doldurmaya odaklan.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-cum2", "2. Ders: Hızlı Pratik", "Çalıştığın konuların kitaptaki alıştırmalarını çözerek pekiştir.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-mini_analysis", "2. Ders: Deneme Analizi ve Kelime Çalışması", "Tüm yanlışlarını ve boşlarını detaylıca analiz et. Bilmediğin kelimeleri not al ve kelime setine ekle.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-mini_exam", "1. Ders: Mini Deneme Sınavı", "40-50 soruluk bir deneme çöz (Süre: 60-75 dk). Okuma, gramer ve kelime ağırlıklı olmasına dikkat et.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-paz1", "1. Ders: Haftalık Genel Tekrar", "Bu hafta işlenen tüm gramer konularını hızlıca gözden geçir. Anlamadığın yerleri not al.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-paz2", "2. Ders: Serbest Okuma/Dinleme", "İlgini çeken bir konuda İngilizce bir YouTube kanalı izle veya blog oku.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-per2", "2. Ders: Hızlı Pratik", "Çalıştığın konuların kitaptaki alıştırmalarını çözerek pekiştir.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-pzt2", "2. Ders: Hızlı Pratik", "Çalıştığın konuların kitaptaki alıştırmalarını çözerek pekiştir.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-sal2", "2. Ders: Hızlı Pratik", "Çalıştığın konuların kitaptaki alıştırmalarını çözerek pekiştir.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-t1", "1. Ders: Gramer Konusu", "Kaynak: $book. Haftanın konusu olan '$grammarTopics' üzerine detaylıca çalış.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-t10", "2. Ders: Serbest Dinleme", "İlgini çeken bir konuda İngilizce podcast/video izle.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-t10", "2. Ders: Soru Analizi ve Tekrar", "Çözdüğün sorulardaki yanlışlarını analiz et ve haftalık kelimeleri tekrar et.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-t11", "1. Ders: Gelecek Haftaya Hazırlık", "Gelecek haftanın konusu olan '$nextGrammarTopic' konusuna kısaca göz atarak ön hazırlık yap.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-t12", "2. Ders: Haftalık Kelime Tekrarı", "Bu hafta öğrendiğin tüm kelimeleri (yaklaşık 20-30 kelime) flashcard uygulamasıyla tekrar et.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-t13", "1. Ders: Haftalık Analiz ve Planlama", "Haftanın genel bir değerlendirmesini yap. Güçlü ve zayıf yönlerini belirle.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-t14", "2. Ders: Keyif için İngilizce", "İngilizce bir film/dizi izle veya oyun oyna. Amaç sadece dilin keyfini çıkarmak.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-t2", "2. Ders: Okuma Pratiği ve Kelime", "Kaynak: $readingFocus. Okuma yaparken en az 10 yeni kelime belirle ve anlamlarıyla birlikte not al.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-t3", "1. Ders: Gramer Alıştırmaları", "$book kitabından dünkü konunun alıştırmalarını eksiksiz tamamla.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-t4", "2. Ders: Dinleme Pratiği ve Tekrar", "Kaynak: $listeningFocus. Aktif dinleme yap ve dünkü kelimeleri tekrar et.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-t5", "1. Ders: Gramer Pekiştirme", "Öğrendiğin gramer yapılarını kullanarak çeviri veya cümle kurma alıştırmaları yap.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-t7", "1. Ders: Gramer Konusu (Devam)", "Haftanın gramer konusunu pekiştir ve ek alıştırmalar çöz.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-t8", "2. Ders: Zorlu Okuma ve Kelime", "Kaynak: $readingFocus (Zor seviye). Yeni 10 kelime daha öğren.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$PlanTask("$weekId-t9", "1. Ders: Haftalık Gramer Tekrarı", "Bu hafta işlenen tüm gramer konularını ve kurallarını tekrar et.")</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$add(createAdvancedPreparationWeek(weekNumber, "B1-B2 Gelişimi", blueBook, topic, nextTopic, "The Guardian, BBC News", "TED-Ed Videoları", "Cümle Tamamlama"))</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$add(createAdvancedPreparationWeek(weekNumber, "C1 Ustalığı", greenBook, topic, nextTopic, "National Geographic, Scientific American", "NPR, BBC Radio 4 Podcast'leri", "Paragraf Tamamlama &amp; Anlam Bütünlüğünü Bozan Cümle"))</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$val nextTopic = if (index + 1 &lt; blueBookTopics.size) blueBookTopics[index + 1] else "Yeşil Kitap - Advanced Tenses"</ID>
    <ID>MaxLineLength:PlanDataSource.kt$PlanDataSource$val nextTopic = if (index + 1 &lt; greenBookTopics.size) greenBookTopics[index + 1] else "Genel Tekrar ve Sınav Kampı"</ID>
    <ID>MaxLineLength:PlanRepository.kt$// We simply ignore leftover tasks. Optionally could attach to last day if any capacity but we filled by budget.</ID>
    <ID>MaxLineLength:PlanRepository.kt$PlanRepository$val nextSuffix = ((target?.added.orEmpty().mapNotNull { it.idSuffix.toIntOrNull() }.maxOrNull() ?: 0) + 1).toString()</ID>
    <ID>MaxLineLength:PlanSettingsDialog.kt$TextButton(onClick = { datePatternText = "" }) { Text(stringResource(id = R.string.plan_settings_date_use_locale)) }</ID>
    <ID>MaxLineLength:PlanSettingsDialog.kt$val totalDays = java.time.temporal.ChronoUnit.DAYS.between(parsedStart, parsedEnd).toInt() + 1</ID>
    <ID>MaxLineLength:PointEconomySystem.kt$PointEconomyManager$preferences[Keys.LEADERBOARD_DATA] = json.encodeToString(MapSerializer(String.serializer(), LeaderboardEntry.serializer()), updatedData)</ID>
    <ID>MaxLineLength:PointEconomySystem.kt$PointEconomyManager$preferences[Keys.OWNED_COSMETICS] = currentCosmetics + json.encodeToString(CosmeticReward.serializer(), ownedCosmetic)</ID>
    <ID>MaxLineLength:PointEconomySystem.kt$PointEconomyManager$preferences[Keys.POINT_TRANSACTIONS] = currentTransactions + json.encodeToString(PointTransaction.serializer(), purchaseTransaction)</ID>
    <ID>MaxLineLength:PointEconomySystem.kt$PointEconomyManager$val updatedTransactions = currentTransactions + json.encodeToString(PointTransaction.serializer(), transaction)</ID>
    <ID>MaxLineLength:PracticeScreen.kt$containerColor = if (idx == selected) MaterialTheme.colorScheme.primaryContainer else MaterialTheme.colorScheme.surface</ID>
    <ID>MaxLineLength:PriorityIndicator.kt$"practice", "exercise", "drill" -&gt; MaterialTheme.colorScheme.primary to MaterialTheme.colorScheme.primaryContainer</ID>
    <ID>MaxLineLength:PriorityIndicator.kt$"reading", "vocabulary", "grammar" -&gt; MaterialTheme.colorScheme.tertiary to MaterialTheme.colorScheme.tertiaryContainer</ID>
    <ID>MaxLineLength:PrivacySettingsAdapter.kt$PrivacySettingsAdapter.ActionViewHolder$if</ID>
    <ID>MaxLineLength:ProgressRepository.kt$ProgressRepository$val multiplier = com.mtlc.studyplan.data.StreakMultiplier.getMultiplierForStreak(_userProgress.value.streakCount)</ID>
    <ID>MaxLineLength:QuestionDao.kt$QuestionDao$@Query("SELECT * FROM questions WHERE questionText LIKE '%' || :searchTerm || '%' OR explanation LIKE '%' || :searchTerm || '%'")</ID>
    <ID>MaxLineLength:ResponsiveDesignCompatibilityTest.kt$DeviceCompatibilityMatrix$println("${device.name}: ${device.widthDp}x${device.heightDp}dp @ ${device.densityDpi}dpi (${String.format("%.2f", aspectRatio)}:1) - ${device.notes}")</ID>
    <ID>MaxLineLength:ResponsiveDesignCompatibilityTest.kt$ResponsiveDesignCompatibilityTest$println("Testing configuration: ${screenWidthDp}x${screenHeightDp}dp @ ${densityDpi}dpi, font scale: $fontScale")</ID>
    <ID>MaxLineLength:ReviewScreen.kt$Button(onClick = { onRetrySet(result.wrongIds.take(15)) }) { Text("Start Retry Set (${result.wrongIds.take(15).size})") }</ID>
    <ID>MaxLineLength:ReviewScreen.kt$Modifier.fillMaxSize().padding(padding).padding(LocalSpacing.current.md).verticalScroll(rememberScrollState())</ID>
    <ID>MaxLineLength:ReviewScreen.kt$Scaffold</ID>
    <ID>MaxLineLength:ReviewScreen.kt$val maxPct = remember(result.perSection) { result.perSection.maxOfOrNull { if (it.total &gt; 0) (it.correct * 100 / it.total) else 0 } ?: 100 }</ID>
    <ID>MaxLineLength:SecureStorageManager.kt$SecureStorageManager$return Result.failure(storeResult.exceptionOrNull() ?: SecurityException("Storage initialization failed"))</ID>
    <ID>MaxLineLength:SecureStorageManager.kt$SecureStorageManager.Companion$private val Context.secureDataStore: DataStore&lt;Preferences&gt; by preferencesDataStore(name = SECURE_DATASTORE_NAME)</ID>
    <ID>MaxLineLength:SecurityAndErrorCoordinator.kt$SecurityAndErrorCoordinator$description = "Critical system errors detected: ${errorState.criticalErrorCount} critical, ${errorState.errorCount} total"</ID>
    <ID>MaxLineLength:SecurityUtils.kt$SecurityUtils$SecurityLogger.logSecurityEvent("Device lacks secure lock screen; using master key without authentication", SecurityLogger.SecuritySeverity.WARNING)</ID>
    <ID>MaxLineLength:SegmentedTabs.kt$targetValue = if (isSelected) MaterialTheme.colorScheme.onPrimaryContainer else MaterialTheme.colorScheme.onSurface</ID>
    <ID>MaxLineLength:SelectionSettingView.kt$SelectionSettingView$updateCurrentValueDisplay(setting.options.find { it.value == selectedValue }?.display ?: selectedValue.toString())</ID>
    <ID>MaxLineLength:SettingsActivity.kt$SettingsActivity$setViewCompositionStrategy(androidx.compose.ui.platform.ViewCompositionStrategy.DisposeOnViewTreeLifecycleDestroyed)</ID>
    <ID>MaxLineLength:SettingsBackupManager.kt$SettingsBackupManager.DateTypeAdapter$override</ID>
    <ID>MaxLineLength:SettingsDetailAdapter.kt$SettingsDetailAdapter.SettingsDetailDiffCallback$oldItem is SettingsDisplayItem.SettingItemWrapper &amp;&amp; newItem is SettingsDisplayItem.SettingItemWrapper</ID>
    <ID>MaxLineLength:SettingsErrorHandler.kt$SettingsErrorHandler$(newErrorCount &gt; 10 &amp;&amp; System.currentTimeMillis() - (currentState.lastErrorTime ?: 0) &lt; 60000)</ID>
    <ID>MaxLineLength:SettingsErrorHandler.kt$SettingsErrorHandler$ErrorSeverity.HIGH -&gt; Log.e(TAG, "Error: ${errorEvent.operation} - ${errorEvent.message}", errorEvent.exception)</ID>
    <ID>MaxLineLength:SettingsErrorHandler.kt$SettingsErrorHandler$ErrorSeverity.MEDIUM -&gt; Log.w(TAG, "Error: ${errorEvent.operation} - ${errorEvent.message}", errorEvent.exception)</ID>
    <ID>MaxLineLength:SettingsErrorHandler.kt$SettingsErrorHandler$ErrorType.MEMORY_ERROR -&gt; "The device is running low on memory. Some features may be temporarily unavailable."</ID>
    <ID>MaxLineLength:SettingsErrorHandler.kt$SettingsErrorHandler$ErrorType.NETWORK_ERROR -&gt; "Unable to connect to the network. Please check your internet connection and try again."</ID>
    <ID>MaxLineLength:SettingsErrorHandler.kt$SettingsErrorHandler$ErrorType.PERMISSION_ERROR -&gt; "The app doesn't have permission to access your settings. Please check app permissions."</ID>
    <ID>MaxLineLength:SettingsErrorHandler.kt$SettingsErrorHandler$ErrorType.SECURITY_ERROR -&gt; "A security issue was detected. Your settings have been protected from unauthorized access."</ID>
    <ID>MaxLineLength:SettingsErrorHandler.kt$SettingsErrorHandler$ErrorType.VALIDATION_ERROR -&gt; "Some of your settings contain invalid values. They have been reset to safe defaults."</ID>
    <ID>MaxLineLength:SettingsErrorHandler.kt$SettingsErrorHandler.ErrorHandlingResult$Failed&lt;T&gt; : ErrorHandlingResult</ID>
    <ID>MaxLineLength:SettingsIntegrationTest.kt$SettingsIntegrationValidator$appendLine(" Failed: ${report.failedCount + (if (!settingsKeysValid) 1 else 0) + (if (!themeIntegrationValid) 1 else 0)}")</ID>
    <ID>MaxLineLength:SettingsIntegrationTest.kt$SettingsIntegrationValidator$appendLine(" Passed: ${report.passedCount + (if (settingsKeysValid) 1 else 0) + (if (themeIntegrationValid) 1 else 0)}")</ID>
    <ID>MaxLineLength:SettingsIntegrationTest.kt$SettingsIntegrationValidator$report.addTest("Dark Theme", validationManager.validateSettings(darkThemeSettings).none { it is ValidationResult.Error })</ID>
    <ID>MaxLineLength:SettingsIntegrationTest.kt$SettingsIntegrationValidator$report.addTest("Light Theme", validationManager.validateSettings(lightThemeSettings).none { it is ValidationResult.Error })</ID>
    <ID>MaxLineLength:SettingsIntegrationTest.kt$SettingsIntegrationValidator$report.addTest("System Theme", validationManager.validateSettings(systemThemeSettings).none { it is ValidationResult.Error })</ID>
    <ID>MaxLineLength:SettingsKeys.kt$PROFILE_VISIBILITY_ENABLED</ID>
    <ID>MaxLineLength:SettingsKeys.kt$PUSH_NOTIFICATIONS</ID>
    <ID>MaxLineLength:SettingsManager.kt$SettingsManager$SettingsKey.ACHIEVEMENT_NOTIFICATIONS -&gt; currentSettings.copy(achievementNotificationsEnabled = value as Boolean)</ID>
    <ID>MaxLineLength:SettingsMigrationManager.kt$SettingsMigrationManager$return MigrationResult.Failed("Migration to version $targetVersion failed: ${migrationResult.error}")</ID>
    <ID>MaxLineLength:SettingsPreferencesManager.kt$SettingsPreferencesManager$prefs.getString(KEY_PROFILE_VISIBILITY, ProfileVisibility.FRIENDS_ONLY.name) ?: ProfileVisibility.FRIENDS_ONLY.name</ID>
    <ID>MaxLineLength:SettingsRepository.kt$SettingsRepository$)</ID>
    <ID>MaxLineLength:SettingsRepository.kt$SettingsRepository$errorHandler.logger.logError(AppError(type = ErrorType.DATA, message = "Failed to export settings", cause = e))</ID>
    <ID>MaxLineLength:SettingsRepository.kt$SettingsRepository$errorHandler.logger.logError(AppError(type = ErrorType.DATA, message = "Failed to import settings", cause = e))</ID>
    <ID>MaxLineLength:SettingsRepository.kt$SettingsRepository$errorHandler.logger.logError(AppError(type = ErrorType.DATA, message = "Failed to load settings state", cause = e))</ID>
    <ID>MaxLineLength:SettingsRepository.kt$SettingsRepository$errorHandler.logger.logError(AppError(type = ErrorType.DATA, message = "Failed to reset settings", cause = e))</ID>
    <ID>MaxLineLength:SettingsRepository.kt$SettingsRepository$errorHandler.logger.logError(AppError(type = ErrorType.DATA, message = "Failed to update setting", cause = e))</ID>
    <ID>MaxLineLength:SettingsRepository.kt$SettingsRepository$suspend fun mergeCategorySettings(categoryId: String, data: Any?, conflicts: MutableList&lt;*&gt;): Int</ID>
    <ID>MaxLineLength:SettingsScreens.kt$CategoryPill(label = "Gamification", icon = Icons.Outlined.Celebration, selected = selected=="Gamification") { selected = it; onNavigateToCategory(it) }</ID>
    <ID>MaxLineLength:SettingsScreens.kt$CategoryPill(label = "Navigation", icon = Icons.AutoMirrored.Outlined.Send, selected = selected=="Navigation") { selected = it; onNavigateToCategory(it) }</ID>
    <ID>MaxLineLength:SettingsScreens.kt$CategoryPill(label = "Notifications", icon = Icons.Outlined.Notifications, selected = selected=="Notifications") { selected = it; onNavigateToCategory(it) }</ID>
    <ID>MaxLineLength:SettingsScreens.kt$CategoryPill(label = "Privacy", icon = Icons.Outlined.Lock, selected = selected=="Privacy") { selected = it; onNavigateToCategory(it) }</ID>
    <ID>MaxLineLength:SettingsScreens.kt$CategoryPill(label = "Social", icon = Icons.Outlined.Image, selected = selected=="Social") { selected = it; onNavigateToCategory(it) }</ID>
    <ID>MaxLineLength:SettingsScreens.kt$CategoryPill(label = "Tasks", icon = Icons.Outlined.TaskAlt, selected = selected=="Tasks") { selected = it; onNavigateToCategory(it) }</ID>
    <ID>MaxLineLength:SettingsScreens.kt$Text("This will permanently delete all your study progress, achievements, and statistics. You will return to the welcome screen to start fresh. This action cannot be undone.")</ID>
    <ID>MaxLineLength:SettingsScreens.kt$colors = CardDefaults.cardColors(containerColor = inferredFeaturePastelContainer("com.mtlc.studyplan.settings", "settings_categories"))</ID>
    <ID>MaxLineLength:SettingsScreens.kt$colors = CardDefaults.cardColors(containerColor = inferredFeaturePastelContainer("com.mtlc.studyplan.settings", "settings_navigation"))</ID>
    <ID>MaxLineLength:SettingsSecurityManager.kt$SettingsSecurityManager$fun</ID>
    <ID>MaxLineLength:SettingsSecurityManager.kt$SettingsSecurityManager$lastViolationTime = if (newViolationCount &gt; currentState.violationCount) System.currentTimeMillis() else currentState.lastViolationTime</ID>
    <ID>MaxLineLength:SettingsSecurityManager.kt$SettingsSecurityManager$logSecurityEvent(SecurityEventType.VALIDATION_FAILED, "Unsupported value type: ${value::class.java}")</ID>
    <ID>MaxLineLength:SettingsSecurityManager.kt$SettingsSecurityManager$return ValidationResult(false, "Malicious patterns detected: ${threats.joinToString()}", sanitizeString(key))</ID>
    <ID>MaxLineLength:SettingsSecurityManager.kt$SettingsSecurityManager$return ValidationResult(false, "Malicious patterns detected: ${threats.joinToString()}", sanitizeString(value))</ID>
    <ID>MaxLineLength:SettingsSecurityManager.kt$SettingsSecurityManager$return ValidationResult(false, "Setting key exceeds maximum length", sanitizeString(key.take(MAX_SETTING_KEY_LENGTH)))</ID>
    <ID>MaxLineLength:SettingsSecurityManager.kt$SettingsSecurityManager.Companion$private</ID>
    <ID>MaxLineLength:SettingsSecurityManager.kt$SettingsSecurityManager.Companion$private val MALICIOUS_COMMAND_PATTERN = Pattern.compile("(exec|eval|system|shell|cmd|powershell)", Pattern.CASE_INSENSITIVE)</ID>
    <ID>MaxLineLength:SettingsValidationManager.kt$SettingsValidationManager$"Achievement notifications are enabled but gamification is disabled. No achievements will be unlocked."</ID>
    <ID>MaxLineLength:SettingsValidationManager.kt$SettingsValidationManager$"Both smart scheduling and auto-difficulty are enabled. The app will optimize your study plan automatically."</ID>
    <ID>MaxLineLength:SettingsValidationManager.kt$SettingsValidationManager$"Gamification is disabled but dependent features are enabled: ${enabledDependentFeatures.joinToString { it.first }}"</ID>
    <ID>MaxLineLength:SettingsValidationManager.kt$SettingsValidationManager$"Some notification types are enabled while master notifications are disabled. They will be automatically disabled."</ID>
    <ID>MaxLineLength:SharedAppViewModel.kt$SharedAppViewModel$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean("difficulty_auto_adjust", settings.autoAdjustDifficulty))</ID>
    <ID>MaxLineLength:SharedAppViewModel.kt$SharedAppViewModel$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean("gamification_enabled", settings.gamificationEnabled))</ID>
    <ID>MaxLineLength:SharedAppViewModel.kt$SharedAppViewModel$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean("notifications_enabled", settings.notificationsEnabled))</ID>
    <ID>MaxLineLength:SharedAppViewModel.kt$SharedAppViewModel$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateInt("daily_goal_tasks", settings.dailyGoalTasks))</ID>
    <ID>MaxLineLength:SmartScheduler.kt$SmartScheduler$description = "Based on your patterns, you perform ${(timeSlot.performanceScore * 100).toInt()}% better at ${timeSlot.startTime}"</ID>
    <ID>MaxLineLength:SmartScheduler.kt$SmartScheduler$description = "It's been ${minutesSince} minutes since your last session. Your optimal interval is ${pattern.optimalBreakInterval} minutes"</ID>
    <ID>MaxLineLength:SmartScheduler.kt$SmartScheduler$description = "Recent performance is ${(recentPerformance * 100).toInt()}%. Consider reviewing basics before advancing"</ID>
    <ID>MaxLineLength:SmartScheduler.kt$SmartScheduler$description = "You have ${(errorRate * 100).toInt()}% error rate in $category. Recommended: 15 min focused practice"</ID>
    <ID>MaxLineLength:SmartScheduler.kt$SmartScheduler$description = "You haven't studied $category recently. Previous performance: ${(avgPerformance * 100).toInt()}%"</ID>
    <ID>MaxLineLength:SmartScheduler.kt$SmartScheduler$description = "You're performing excellently (${(recentPerformance * 100).toInt()}% accuracy). Consider tackling harder topics"</ID>
    <ID>MaxLineLength:SmartScheduler.kt$SmartScheduler$description = "Your consistency score is ${(pattern.consistencyScore * 100).toInt()}%. Try studying for just 10 minutes today to maintain momentum"</ID>
    <ID>MaxLineLength:SmartScheduler.kt$SmartScheduler$val daysSinceStudied = (currentTime.atZone(java.time.ZoneId.systemDefault()).toInstant().toEpochMilli() - lastStudied) / (1000 * 60 * 60 * 24)</ID>
    <ID>MaxLineLength:SmartScheduler.kt$SmartScheduler$val timeSinceLastStudy = currentTime.atZone(java.time.ZoneId.systemDefault()).toInstant().toEpochMilli() - lastStudyTime</ID>
    <ID>MaxLineLength:SocialDao.kt$SocialDao$@Query("SELECT * FROM social_activities WHERE categoryInvolved = :category AND userId = :userId ORDER BY timestamp DESC")</ID>
    <ID>MaxLineLength:SocialDao.kt$SocialDao$@Query("SELECT * FROM social_activities WHERE difficulty = :difficulty AND userId = :userId ORDER BY timestamp DESC")</ID>
    <ID>MaxLineLength:SocialDao.kt$SocialDao$@Query("SELECT * FROM social_activities WHERE isPublic = 1 AND visibility = 'public' ORDER BY timestamp DESC LIMIT :limit")</ID>
    <ID>MaxLineLength:SocialDao.kt$SocialDao$@Query("SELECT DISTINCT categoryInvolved FROM social_activities WHERE userId = :userId AND categoryInvolved IS NOT NULL")</ID>
    <ID>MaxLineLength:SocialScreen.kt$Icon(imageVector = Icons.Outlined.Edit, contentDescription = null, modifier = Modifier.size(16.dp))</ID>
    <ID>MaxLineLength:SocialScreen.kt$else -&gt; context.getString(R.string.social_avatar_error_generic, error.message ?: context.getString(R.string.social_avatar_error_generic_fallback))</ID>
    <ID>MaxLineLength:SocialScreen.kt$message = "Failed to create friend request: ${result.exceptionOrNull()?.message}"</ID>
    <ID>MaxLineLength:SocialScreen.kt$message.contains("2mb") || message.contains("too large") -&gt; context.getString(R.string.social_avatar_error_size)</ID>
    <ID>MaxLineLength:SocialScreen.kt$message.contains("access") || message.contains("permission") -&gt; context.getString(R.string.social_avatar_error_access)</ID>
    <ID>MaxLineLength:SocialScreen.kt$message.contains("format") || message.contains("mime") || message.contains("type") -&gt; context.getString(R.string.social_avatar_error_format)</ID>
    <ID>MaxLineLength:SocialScreen.kt$onFriendSelected = { /* friend -&gt; showFriendProfileSnackbar(friend, snackbarHostState, scope, context) */ }</ID>
    <ID>MaxLineLength:SocialScreen.kt$snackbarHostState.showSnackbar(message = message, duration = SnackbarDuration.Long)</ID>
    <ID>MaxLineLength:SocialScreen.kt$text = "• Image must be smaller than 2MB\n• Recommended size: 512x512 pixels\n• Supported formats: JPG, PNG"</ID>
    <ID>MaxLineLength:StatsScreen.kt$"These stats are visible to your friends. Your email and personal information remain private."</ID>
    <ID>MaxLineLength:StreakCounter.kt$text = if (streakState.isFireStreak) "🔥 ${streakState.multiplier.title}" else streakState.multiplier.title</ID>
    <ID>MaxLineLength:StreakCounterUI.kt$text = "${nextMilestone - streakState.currentStreak} more days for ${getNextMilestoneReward(nextMilestone)}"</ID>
    <ID>MaxLineLength:StreakDao.kt$StreakDao$averageMinutesPerDay = ((streak.averageMinutesPerDay * streak.totalDaysStudied) + studyMinutes) / (streak.totalDaysStudied + 1)</ID>
    <ID>MaxLineLength:StreakDao.kt$StreakDao$averageTasksPerDay = ((streak.averageTasksPerDay * streak.totalDaysStudied) + tasksCompleted) / (streak.totalDaysStudied + 1)</ID>
    <ID>MaxLineLength:StudyBottomNav.kt$targetValue = if (isSelected) Color(0xFF1976D2) else DesignTokens.MutedForeground</ID>
    <ID>MaxLineLength:StudyPlanOverviewScreen.kt$DailySchedule("Friday", startOfWeek.plusDays(4).format(dateFormatter), emptyList(), "", 0, today.dayOfWeek.value == 5)</ID>
    <ID>MaxLineLength:StudyPlanOverviewScreen.kt$DailySchedule("Saturday", startOfWeek.plusDays(5).format(dateFormatter), emptyList(), "", 0, today.dayOfWeek.value == 6)</ID>
    <ID>MaxLineLength:StudyPlanOverviewScreen.kt$DailySchedule("Sunday", startOfWeek.plusDays(6).format(dateFormatter), emptyList(), "", 0, today.dayOfWeek.value == 7)</ID>
    <ID>MaxLineLength:StudyPlanOverviewScreen.kt$DailySchedule("Thursday", startOfWeek.plusDays(3).format(dateFormatter), emptyList(), "", 0, today.dayOfWeek.value == 4)</ID>
    <ID>MaxLineLength:StudyPlanOverviewScreen.kt$DailySchedule("Tuesday", startOfWeek.plusDays(1).format(dateFormatter), emptyList(), "", 0, today.dayOfWeek.value == 2)</ID>
    <ID>MaxLineLength:StudyPlanOverviewScreen.kt$DailySchedule("Wednesday", startOfWeek.plusDays(2).format(dateFormatter), emptyList(), "", 0, today.dayOfWeek.value == 3)</ID>
    <ID>MaxLineLength:StudyPlanOverviewScreen.kt$color = if (dailySchedule.completionPercentage &gt;= 100) MaterialTheme.colorScheme.tertiary else MaterialTheme.colorScheme.primary</ID>
    <ID>MaxLineLength:StudyPlanOverviewScreen.kt$color = if (goal.isCompleted) MaterialTheme.colorScheme.onSurfaceVariant else MaterialTheme.colorScheme.onSurface</ID>
    <ID>MaxLineLength:StudyPlanOverviewScreen.kt$color = if (task.isCompleted) MaterialTheme.colorScheme.primaryContainer else MaterialTheme.colorScheme.surfaceVariant</ID>
    <ID>MaxLineLength:StudyPlanOverviewScreen.kt$color = if (unit.isCompleted) MaterialTheme.colorScheme.primaryContainer else MaterialTheme.colorScheme.surfaceVariant</ID>
    <ID>MaxLineLength:StudyPlanOverviewScreen.kt$targetValue = if (isSelected) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSurfaceVariant</ID>
    <ID>MaxLineLength:StudyPlanOverviewScreen.kt$text = "Subject-specific progress tracking will be available once you start completing tasks in different subjects."</ID>
    <ID>MaxLineLength:StudyPlanOverviewScreen.kt$tint = if (goal.isCompleted) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant</ID>
    <ID>MaxLineLength:StudyPlanOverviewScreen.kt$tint = if (task.isCompleted) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant</ID>
    <ID>MaxLineLength:StudyPlanOverviewScreen.kt$tint = if (unit.isCompleted) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant</ID>
    <ID>MaxLineLength:StudyPlanTopBar.kt$Row</ID>
    <ID>MaxLineLength:StudyPlanTopBar.kt$Text(card.subtitle, style = MaterialTheme.typography.labelSmall, color = appearance.subtitleColor)</ID>
    <ID>MaxLineLength:SuccessFeedbackManager.kt$SuccessFeedbackManager$showGoalAchievement(StudyGoal(title = goalTitle, description = "", targetHours = 0, deadline = java.time.LocalDate.now(), primaryCategory = com.mtlc.studyplan.shared.TaskCategory.OTHER, difficulty = com.mtlc.studyplan.shared.TaskDifficulty.MEDIUM))</ID>
    <ID>MaxLineLength:SuccessFeedbackManager.kt$SuccessFeedbackManager$val message = "🎯 Congratulations!\n\nYou've successfully completed your goal:\n${goal.title}\n\nYour dedication and hard work have paid off!"</ID>
    <ID>MaxLineLength:SuccessFeedbackManager.kt$SuccessFeedbackManager$val message = "📈 Great Progress!\n\n$progressPercentage% complete on:\n$goalTitle\n\nKeep up the excellent work!"</ID>
    <ID>MaxLineLength:SuccessFeedbackManager.kt$SuccessFeedbackManager$val message = "📱 Shared successfully!\n\nYour achievement has been shared on $platform.\nAlready received $likes reactions!"</ID>
    <ID>MaxLineLength:TaskCard.kt$AssistChip(onClick = { onExpandToggle?.invoke() }, label = { Text(skill.name.lowercase().replaceFirstChar { it.titlecase() }) })</ID>
    <ID>MaxLineLength:TaskCard.kt$task.details?.let { Text(it, style = MaterialTheme.typography.bodyMedium, color = MaterialTheme.colorScheme.onSurfaceVariant) }</ID>
    <ID>MaxLineLength:TaskDao.kt$TaskDao$@Query("UPDATE tasks SET isCompleted = :isCompleted, completedAt = :completedAt, actualMinutes = :actualMinutes WHERE id = :taskId")</ID>
    <ID>MaxLineLength:TaskDao.kt$TaskDao$suspend</ID>
    <ID>MaxLineLength:ThemeIntegration.kt$ThemeIntegration$animationSpeed</ID>
    <ID>MaxLineLength:ThemeIntegration.kt$ThemeIntegration$dynamicColor = settingsRepository.getString(SettingsKeys.Appearance.ACCENT_COLOR, "blue") != "custom"</ID>
    <ID>MaxLineLength:ThemeIntegration.kt$ThemeIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Accessibility.HIGH_CONTRAST_MODE, !current))</ID>
    <ID>MaxLineLength:ThemeIntegration.kt$ThemeIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateBoolean(SettingsKeys.Accessibility.REDUCED_MOTION, !current))</ID>
    <ID>MaxLineLength:ThemeIntegration.kt$ThemeIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateString(SettingsKeys.Appearance.ACCENT_COLOR, color))</ID>
    <ID>MaxLineLength:ThemeIntegration.kt$ThemeIntegration$settingsRepository.updateSetting(SettingsUpdateRequest.UpdateString(SettingsKeys.Appearance.ANIMATION_SPEED, speed))</ID>
    <ID>MaxLineLength:UserSettingsDao.kt$UserSettingsDao$@Query("UPDATE user_settings SET defaultStudySessionLength = :length, updatedAt = :updatedAt WHERE userId = :userId")</ID>
    <ID>MaxLineLength:WeeklyChallengeSystem.kt$WeeklyChallengeGenerator$description = "Complete ${getDifficultyTarget(difficulty, 8, 12, 18)} ${category.displayName.lowercase()} tasks"</ID>
    <ID>MaxLineLength:WeeklyChallengeSystem.kt$color = if (challenge.isCompleted) challenge.type.color else MaterialTheme.colorScheme.onSurface</ID>
    <ID>MaxLineLength:WeeklyPlanScreen.kt$colors = CardDefaults.cardColors(containerColor = inferredFeaturePastelContainer("com.mtlc.studyplan.core", week.title))</ID>
    <ID>MaxLineLength:WelcomeScreen.kt$description = "AI-powered study schedules tailored to your exam date, available time, and learning goals"</ID>
    <ID>MaxLineLength:WelcomeScreen.kt$description = "Detailed analytics and insights to monitor your improvement and identify areas for focus"</ID>
    <ID>MaxLineLength:WelcomeScreen.kt$description = "Extensive question banks, reading passages, and practice materials designed for YDS success"</ID>
    <ID>MaxLineLength:WelcomeScreen.kt$description = "Smart algorithms that adjust difficulty and content based on your performance and progress"</ID>
    <ID>MaxLineLength:WelcomeScreen.kt$text = "Comprehensive practice materials and detailed analytics made all the difference. I improved my reading comprehension significantly."</ID>
    <ID>MaxLineLength:WelcomeScreen.kt$text = "Personalized study plans, comprehensive practice materials, and expert guidance to achieve your best YDS score"</ID>
    <ID>MaxLineLength:WelcomeScreen.kt$text = "The adaptive learning system identified my weak areas and focused my study time effectively. Highly recommended!"</ID>
    <ID>MaxLineLength:WelcomeScreen.kt$text = "The personalized study plan helped me achieve my target score in just 3 months. The progress tracking kept me motivated throughout my preparation."</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$Card</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$Icon(Icons.Filled.CalendarToday, contentDescription = null, tint = MaterialTheme.colorScheme.primary)</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$Icon(Icons.Filled.PlayArrow, contentDescription = null, tint = MaterialTheme.colorScheme.primary, modifier = Modifier.size(18.dp))</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$Row</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$StudyBook.Companion$val BLUE_BOOK = StudyBook("Blue Book - English Grammar in Use", Color(0xFF1976D2), "Intermediate Level Grammar", CompleteMurphyBookData.BLUE_BOOK)</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$StudyBook.Companion$val GREEN_BOOK = StudyBook("Green Book - Advanced Grammar in Use", Color(0xFF388E3C), "Advanced Level Grammar", CompleteMurphyBookData.GREEN_BOOK)</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$StudyBook.Companion$val RED_BOOK = StudyBook("Red Book - Essential Grammar in Use", Color(0xFFE53935), "Foundation Level Grammar", CompleteMurphyBookData.RED_BOOK)</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$Text("${(weeklyProgressPct * 100).toInt()}%", color = MaterialTheme.colorScheme.primary, fontWeight = FontWeight.SemiBold)</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$Text("Fri: Mixed practice + Practice test preparation", color = MaterialTheme.colorScheme.onSurfaceVariant)</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$Text("Planned", modifier = Modifier.padding(horizontal = 10.dp, vertical = 2.dp), fontSize = 11.sp)</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$Text("Reading Comprehension Focus", color = MaterialTheme.colorScheme.onSurfaceVariant, fontSize = 13.sp)</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$Text("Thu: Grammar deep dive + Vocabulary expansion", color = MaterialTheme.colorScheme.onSurfaceVariant)</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$Text("Weekend: Review week + Prep next week's plan", color = MaterialTheme.colorScheme.onSurfaceVariant)</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$Text(if (isToday) "${day.day}, $dateLabel (Today)" else "${day.day}, $dateLabel", fontWeight = FontWeight.SemiBold)</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$Text(if (isToday) "In Progress" else "Completed", modifier = Modifier.padding(horizontal = 10.dp, vertical = 2.dp), fontSize = 11.sp)</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$color = if (task.isCompleted) MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f) else MaterialTheme.colorScheme.surfaceVariant</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$color = if (unit.isCompleted) MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f) else MaterialTheme.colorScheme.surfaceVariant</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.tertiaryContainer.copy(alpha = 0.3f))</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$date = LocalDate.now().plusDays(dayIndex.toLong()).format(DateTimeFormatter.ofPattern("MMM d", Locale.getDefault()))</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$targetValue = if (selected) MaterialTheme.colorScheme.onSurface else MaterialTheme.colorScheme.onSurfaceVariant</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$text = if (isFirstTimeUser) "Create your first task to get started!" else "Complete tasks to build your streak"</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$tint = if (task.isCompleted) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$tint = if (unit.isCompleted) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$val allTasks by (appIntegrationManager?.getAllTasks()?.collectAsState(initial = emptyList()) ?: remember { mutableStateOf(emptyList()) })</ID>
    <ID>MaxLineLength:WorkingTasksScreen.kt$val intent = android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse(material.url))</ID>
    <ID>MaxLineLength:models.kt$const</ID>
    <ID>MemberNameEqualsClassName:NotificationManager.kt$NotificationManager$private val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager</ID>
    <ID>NestedBlockDepth:DataConsistencyManager.kt$DataConsistencyManager$private suspend fun fixDataInconsistencies(inconsistencies: List&lt;DataInconsistency&gt;): List&lt;FixResult&gt;</ID>
    <ID>NestedBlockDepth:NetworkSecurityManager.kt$NetworkSecurityManager$suspend fun downloadSecureFile(url: String, destinationPath: String): Result&lt;Unit&gt;</ID>
    <ID>NestedBlockDepth:OfflineManager.kt$OfflineManager$suspend fun syncPendingActions(): Result&lt;SyncResult&gt;</ID>
    <ID>NestedBlockDepth:SecurityAndErrorCoordinator.kt$SecurityAndErrorCoordinator$suspend fun &lt;T&gt; executeSecureOperation( operation: String, block: suspend () -&gt; T ): SecureOperationResult&lt;T&gt;</ID>
    <ID>NestedBlockDepth:SettingsMigrationManager.kt$SettingsMigrationManager$suspend fun runMigrations(fromVersion: Int, toVersion: Int): MigrationResult</ID>
    <ID>NestedBlockDepth:SettingsRepository.kt$SettingsRepository$suspend fun exportSettings(): String</ID>
    <ID>NestedBlockDepth:SettingsRepository.kt$SettingsRepository$suspend fun importSettings(jsonString: String): SettingsOperationResult</ID>
    <ID>NewLineAtEndOfFile:AccessibilityUtils.kt$com.mtlc.studyplan.accessibility.AccessibilityUtils.kt</ID>
    <ID>NewLineAtEndOfFile:AccessibilityUtils.kt$com.mtlc.studyplan.ui.responsive.AccessibilityUtils.kt</ID>
    <ID>NewLineAtEndOfFile:AccessibilityViewModel.kt$com.mtlc.studyplan.settings.viewmodel.AccessibilityViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:AchievementDao.kt$com.mtlc.studyplan.database.dao.AchievementDao.kt</ID>
    <ID>NewLineAtEndOfFile:AchievementDataSource.kt$com.mtlc.studyplan.data.AchievementDataSource.kt</ID>
    <ID>NewLineAtEndOfFile:AchievementEntity.kt$com.mtlc.studyplan.database.entities.AchievementEntity.kt</ID>
    <ID>NewLineAtEndOfFile:AchievementRepository.kt$com.mtlc.studyplan.repository.AchievementRepository.kt</ID>
    <ID>NewLineAtEndOfFile:AdvancedAchievementSystem.kt$com.mtlc.studyplan.gamification.AdvancedAchievementSystem.kt</ID>
    <ID>NewLineAtEndOfFile:AdvancedToggle.kt$com.mtlc.studyplan.ui.components.AdvancedToggle.kt</ID>
    <ID>NewLineAtEndOfFile:AdvancedToggleViewModel.kt$com.mtlc.studyplan.settings.viewmodel.AdvancedToggleViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:AnalyticsEngine.kt$com.mtlc.studyplan.analytics.AnalyticsEngine.kt</ID>
    <ID>NewLineAtEndOfFile:AnalyticsViewModel.kt$com.mtlc.studyplan.analytics.AnalyticsViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:AuthModels.kt$com.mtlc.studyplan.auth.AuthModels.kt</ID>
    <ID>NewLineAtEndOfFile:AuthRepository.kt$com.mtlc.studyplan.auth.AuthRepository.kt</ID>
    <ID>NewLineAtEndOfFile:AuthenticationManager.kt$com.mtlc.studyplan.security.AuthenticationManager.kt</ID>
    <ID>NewLineAtEndOfFile:AuthenticationScreens.kt$com.mtlc.studyplan.ui.screens.AuthenticationScreens.kt</ID>
    <ID>NewLineAtEndOfFile:AvatarDao.kt$com.mtlc.studyplan.database.dao.AvatarDao.kt</ID>
    <ID>NewLineAtEndOfFile:AvatarEntity.kt$com.mtlc.studyplan.database.entities.AvatarEntity.kt</ID>
    <ID>NewLineAtEndOfFile:AwardNotification.kt$com.mtlc.studyplan.social.components.AwardNotification.kt</ID>
    <ID>NewLineAtEndOfFile:BackupSettingsViewModel.kt$com.mtlc.studyplan.settings.viewmodel.BackupSettingsViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:BadgeDataProvider.kt$com.mtlc.studyplan.navigation.BadgeDataProvider.kt</ID>
    <ID>NewLineAtEndOfFile:BaseSettingsAdapter.kt$com.mtlc.studyplan.settings.ui.BaseSettingsAdapter.kt</ID>
    <ID>NewLineAtEndOfFile:CalendarSettings.kt$com.mtlc.studyplan.calendar.CalendarSettings.kt</ID>
    <ID>NewLineAtEndOfFile:CalendarSync.kt$com.mtlc.studyplan.calendar.CalendarSync.kt</ID>
    <ID>NewLineAtEndOfFile:CalendarWorker.kt$com.mtlc.studyplan.calendar.CalendarWorker.kt</ID>
    <ID>NewLineAtEndOfFile:CategorizedAchievementDataSource.kt$com.mtlc.studyplan.data.CategorizedAchievementDataSource.kt</ID>
    <ID>NewLineAtEndOfFile:CompleteMurphyBookData.kt$com.mtlc.studyplan.data.CompleteMurphyBookData.kt</ID>
    <ID>NewLineAtEndOfFile:ComprehensiveResponsiveTest.kt$com.mtlc.studyplan.ComprehensiveResponsiveTest.kt</ID>
    <ID>NewLineAtEndOfFile:ConflictResolutionAdapter.kt$com.mtlc.studyplan.settings.ui.ConflictResolutionAdapter.kt</ID>
    <ID>NewLineAtEndOfFile:Constants.kt$com.mtlc.studyplan.utils.Constants.kt</ID>
    <ID>NewLineAtEndOfFile:Converters.kt$com.mtlc.studyplan.database.Converters.kt</ID>
    <ID>NewLineAtEndOfFile:DataStoreUtils.kt$com.mtlc.studyplan.utils.DataStoreUtils.kt</ID>
    <ID>NewLineAtEndOfFile:DeviceCompatibilityUtils.kt$com.mtlc.studyplan.ui.responsive.DeviceCompatibilityUtils.kt</ID>
    <ID>NewLineAtEndOfFile:ErrorAnalytics.kt$com.mtlc.studyplan.core.analytics.ErrorAnalytics.kt</ID>
    <ID>NewLineAtEndOfFile:ErrorComponents.kt$com.mtlc.studyplan.ui.components.ErrorComponents.kt</ID>
    <ID>NewLineAtEndOfFile:ErrorHandler.kt$com.mtlc.studyplan.error.ErrorHandler.kt</ID>
    <ID>NewLineAtEndOfFile:ErrorRecovery.kt$com.mtlc.studyplan.core.recovery.ErrorRecovery.kt</ID>
    <ID>NewLineAtEndOfFile:Event.kt$com.mtlc.studyplan.eventbus.Event.kt</ID>
    <ID>NewLineAtEndOfFile:EventHandler.kt$com.mtlc.studyplan.eventbus.EventHandler.kt</ID>
    <ID>NewLineAtEndOfFile:ExamCalendarDataSource.kt$com.mtlc.studyplan.data.ExamCalendarDataSource.kt</ID>
    <ID>NewLineAtEndOfFile:ExamCountdownManager.kt$com.mtlc.studyplan.data.ExamCountdownManager.kt</ID>
    <ID>NewLineAtEndOfFile:ExamProgressModels.kt$com.mtlc.studyplan.data.ExamProgressModels.kt</ID>
    <ID>NewLineAtEndOfFile:ExampleUnitTest.kt$com.mtlc.studyplan.ExampleUnitTest.kt</ID>
    <ID>NewLineAtEndOfFile:FeedbackManager.kt$com.mtlc.studyplan.feedback.FeedbackManager.kt</ID>
    <ID>NewLineAtEndOfFile:FloatingPointsAnimation.kt$com.mtlc.studyplan.ui.components.FloatingPointsAnimation.kt</ID>
    <ID>NewLineAtEndOfFile:FocusIndicatorManager.kt$com.mtlc.studyplan.accessibility.FocusIndicatorManager.kt</ID>
    <ID>NewLineAtEndOfFile:FocusSession.kt$com.mtlc.studyplan.feature.focus.FocusSession.kt</ID>
    <ID>NewLineAtEndOfFile:FontScalingManager.kt$com.mtlc.studyplan.accessibility.FontScalingManager.kt</ID>
    <ID>NewLineAtEndOfFile:FriendsRepository.kt$com.mtlc.studyplan.auth.FriendsRepository.kt</ID>
    <ID>NewLineAtEndOfFile:FriendsScreen.kt$com.mtlc.studyplan.auth.FriendsScreen.kt</ID>
    <ID>NewLineAtEndOfFile:GamificationIntegration.kt$com.mtlc.studyplan.settings.integration.GamificationIntegration.kt</ID>
    <ID>NewLineAtEndOfFile:GamificationManager.kt$com.mtlc.studyplan.gamification.GamificationManager.kt</ID>
    <ID>NewLineAtEndOfFile:GamificationSettings.kt$com.mtlc.studyplan.gamification.GamificationSettings.kt</ID>
    <ID>NewLineAtEndOfFile:HapticFeedbackManager.kt$com.mtlc.studyplan.utils.HapticFeedbackManager.kt</ID>
    <ID>NewLineAtEndOfFile:IcsExporter.kt$com.mtlc.studyplan.calendar.IcsExporter.kt</ID>
    <ID>NewLineAtEndOfFile:ImageProcessor.kt$com.mtlc.studyplan.utils.ImageProcessor.kt</ID>
    <ID>NewLineAtEndOfFile:LanguageManager.kt$com.mtlc.studyplan.localization.LanguageManager.kt</ID>
    <ID>NewLineAtEndOfFile:LanguageSwitcher.kt$com.mtlc.studyplan.ui.components.LanguageSwitcher.kt</ID>
    <ID>NewLineAtEndOfFile:LazyListOptimizer.kt$com.mtlc.studyplan.ui.LazyListOptimizer.kt</ID>
    <ID>NewLineAtEndOfFile:LeaderboardScreen.kt$com.mtlc.studyplan.auth.LeaderboardScreen.kt</ID>
    <ID>NewLineAtEndOfFile:LoadingComponents.kt$com.mtlc.studyplan.ui.components.LoadingComponents.kt</ID>
    <ID>NewLineAtEndOfFile:LoadingStateManager.kt$com.mtlc.studyplan.ui.LoadingStateManager.kt</ID>
    <ID>NewLineAtEndOfFile:LocaleAwareActivity.kt$com.mtlc.studyplan.ui.base.LocaleAwareActivity.kt</ID>
    <ID>NewLineAtEndOfFile:LoginScreen.kt$com.mtlc.studyplan.auth.LoginScreen.kt</ID>
    <ID>NewLineAtEndOfFile:MigrationIntegration.kt$com.mtlc.studyplan.settings.integration.MigrationIntegration.kt</ID>
    <ID>NewLineAtEndOfFile:MotivationMechanics.kt$com.mtlc.studyplan.gamification.MotivationMechanics.kt</ID>
    <ID>NewLineAtEndOfFile:NetworkHelper.kt$com.mtlc.studyplan.utils.NetworkHelper.kt</ID>
    <ID>NewLineAtEndOfFile:NetworkMonitor.kt$com.mtlc.studyplan.network.NetworkMonitor.kt</ID>
    <ID>NewLineAtEndOfFile:NotificationIntegration.kt$com.mtlc.studyplan.settings.integration.NotificationIntegration.kt</ID>
    <ID>NewLineAtEndOfFile:NotificationManager.kt$com.mtlc.studyplan.notifications.NotificationManager.kt</ID>
    <ID>NewLineAtEndOfFile:NotificationSettingsAdapter.kt$com.mtlc.studyplan.settings.ui.NotificationSettingsAdapter.kt</ID>
    <ID>NewLineAtEndOfFile:OfflineActionManager.kt$com.mtlc.studyplan.offline.OfflineActionManager.kt</ID>
    <ID>NewLineAtEndOfFile:OfflineDataManager.kt$com.mtlc.studyplan.offline.OfflineDataManager.kt</ID>
    <ID>NewLineAtEndOfFile:OfflineManager.kt$com.mtlc.studyplan.offline.OfflineManager.kt</ID>
    <ID>NewLineAtEndOfFile:PerformanceMonitor.kt$com.mtlc.studyplan.performance.PerformanceMonitor.kt</ID>
    <ID>NewLineAtEndOfFile:PerformanceOptimizer.kt$com.mtlc.studyplan.performance.PerformanceOptimizer.kt</ID>
    <ID>NewLineAtEndOfFile:PerformanceViewModel.kt$com.mtlc.studyplan.settings.viewmodel.PerformanceViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:PlanDataSource.kt$com.mtlc.studyplan.data.PlanDataSource.kt</ID>
    <ID>NewLineAtEndOfFile:PointEconomySystem.kt$com.mtlc.studyplan.gamification.PointEconomySystem.kt</ID>
    <ID>NewLineAtEndOfFile:PriorityIndicator.kt$com.mtlc.studyplan.ui.components.PriorityIndicator.kt</ID>
    <ID>NewLineAtEndOfFile:ProductionValidator.kt$com.mtlc.studyplan.validation.ProductionValidator.kt</ID>
    <ID>NewLineAtEndOfFile:ProgressDao.kt$com.mtlc.studyplan.database.dao.ProgressDao.kt</ID>
    <ID>NewLineAtEndOfFile:ProgressEntity.kt$com.mtlc.studyplan.database.entities.ProgressEntity.kt</ID>
    <ID>NewLineAtEndOfFile:QuestionDao.kt$com.mtlc.studyplan.database.dao.QuestionDao.kt</ID>
    <ID>NewLineAtEndOfFile:QuestionDataSeeder.kt$com.mtlc.studyplan.data.QuestionDataSeeder.kt</ID>
    <ID>NewLineAtEndOfFile:QuestionEntity.kt$com.mtlc.studyplan.database.entities.QuestionEntity.kt</ID>
    <ID>NewLineAtEndOfFile:QuestionRepository.kt$com.mtlc.studyplan.repository.QuestionRepository.kt</ID>
    <ID>NewLineAtEndOfFile:ResponsiveDesignCompatibilityTest.kt$com.mtlc.studyplan.ResponsiveDesignCompatibilityTest.kt</ID>
    <ID>NewLineAtEndOfFile:ResponsiveLayout.kt$com.mtlc.studyplan.ui.responsive.ResponsiveLayout.kt</ID>
    <ID>NewLineAtEndOfFile:ResponsiveTypography.kt$com.mtlc.studyplan.ui.responsive.ResponsiveTypography.kt</ID>
    <ID>NewLineAtEndOfFile:ResponsiveUtils.kt$com.mtlc.studyplan.ui.responsive.ResponsiveUtils.kt</ID>
    <ID>NewLineAtEndOfFile:SecureStorageManager.kt$com.mtlc.studyplan.security.SecureStorageManager.kt</ID>
    <ID>NewLineAtEndOfFile:SecurityAndErrorCoordinator.kt$com.mtlc.studyplan.settings.security.SecurityAndErrorCoordinator.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsBackupViewModel.kt$com.mtlc.studyplan.settings.viewmodel.SettingsBackupViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsDetailViewModelFactory.kt$com.mtlc.studyplan.settings.viewmodel.SettingsDetailViewModelFactory.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsEncryption.kt$com.mtlc.studyplan.settings.security.SettingsEncryption.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsFeedbackManager.kt$com.mtlc.studyplan.settings.feedback.SettingsFeedbackManager.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsIntegration.kt$com.mtlc.studyplan.settings.SettingsIntegration.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsManager.kt$com.mtlc.studyplan.settings.manager.SettingsManager.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsMigrationManager.kt$com.mtlc.studyplan.settings.migration.SettingsMigrationManager.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsModels.kt$com.mtlc.studyplan.settings.data.SettingsModels.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsPerformanceMonitor.kt$com.mtlc.studyplan.settings.performance.SettingsPerformanceMonitor.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsPreferencesManager.kt$com.mtlc.studyplan.settings.data.SettingsPreferencesManager.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsSecurityManager.kt$com.mtlc.studyplan.settings.security.SettingsSecurityManager.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsValidator.kt$com.mtlc.studyplan.settings.validation.SettingsValidator.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsViewModel.kt$com.mtlc.studyplan.settings.viewmodel.SettingsViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:Shape.kt$com.mtlc.studyplan.ui.theme.Shape.kt</ID>
    <ID>NewLineAtEndOfFile:SimplePerformanceTest.kt$com.mtlc.studyplan.SimplePerformanceTest.kt</ID>
    <ID>NewLineAtEndOfFile:SmartScheduler.kt$com.mtlc.studyplan.ai.SmartScheduler.kt</ID>
    <ID>NewLineAtEndOfFile:SocialActivityEntity.kt$com.mtlc.studyplan.database.entities.SocialActivityEntity.kt</ID>
    <ID>NewLineAtEndOfFile:SocialDao.kt$com.mtlc.studyplan.database.dao.SocialDao.kt</ID>
    <ID>NewLineAtEndOfFile:SocialRepository.kt$com.mtlc.studyplan.repository.SocialRepository.kt</ID>
    <ID>NewLineAtEndOfFile:SpacedRepetitionScheduler.kt$com.mtlc.studyplan.data.SpacedRepetitionScheduler.kt</ID>
    <ID>NewLineAtEndOfFile:StatePreservationManager.kt$com.mtlc.studyplan.state.StatePreservationManager.kt</ID>
    <ID>NewLineAtEndOfFile:StreakDao.kt$com.mtlc.studyplan.database.dao.StreakDao.kt</ID>
    <ID>NewLineAtEndOfFile:StreakEntity.kt$com.mtlc.studyplan.database.entities.StreakEntity.kt</ID>
    <ID>NewLineAtEndOfFile:StreakRepository.kt$com.mtlc.studyplan.repository.StreakRepository.kt</ID>
    <ID>NewLineAtEndOfFile:StudyProgressRepository.kt$com.mtlc.studyplan.data.StudyProgressRepository.kt</ID>
    <ID>NewLineAtEndOfFile:TaskDao.kt$com.mtlc.studyplan.database.dao.TaskDao.kt</ID>
    <ID>NewLineAtEndOfFile:TaskRepository.kt$com.mtlc.studyplan.repository.TaskRepository.kt</ID>
    <ID>NewLineAtEndOfFile:ThemeIntegration.kt$com.mtlc.studyplan.settings.integration.ThemeIntegration.kt</ID>
    <ID>NewLineAtEndOfFile:ToastManager.kt$com.mtlc.studyplan.utils.ToastManager.kt</ID>
    <ID>NewLineAtEndOfFile:ToggleSettingView.kt$com.mtlc.studyplan.settings.ui.views.ToggleSettingView.kt</ID>
    <ID>NewLineAtEndOfFile:Tooltip.kt$com.mtlc.studyplan.ui.components.Tooltip.kt</ID>
    <ID>NewLineAtEndOfFile:Type.kt$com.mtlc.studyplan.ui.theme.Type.kt</ID>
    <ID>NewLineAtEndOfFile:UiModels.kt$com.mtlc.studyplan.ui.UiModels.kt</ID>
    <ID>NewLineAtEndOfFile:UndoManager.kt$com.mtlc.studyplan.ui.components.UndoManager.kt</ID>
    <ID>NewLineAtEndOfFile:UserSettingsDao.kt$com.mtlc.studyplan.database.dao.UserSettingsDao.kt</ID>
    <ID>NewLineAtEndOfFile:UserSettingsEntity.kt$com.mtlc.studyplan.database.entities.UserSettingsEntity.kt</ID>
    <ID>NewLineAtEndOfFile:UserSettingsRepository.kt$com.mtlc.studyplan.repository.UserSettingsRepository.kt</ID>
    <ID>NewLineAtEndOfFile:ViewModelFactory.kt$com.mtlc.studyplan.core.ViewModelFactory.kt</ID>
    <ID>NewLineAtEndOfFile:YdsExamService.kt$com.mtlc.studyplan.data.YdsExamService.kt</ID>
    <ID>RethrowCaughtException:PersistentSocialRepository.kt$PersistentSocialRepository$throw e</ID>
    <ID>ReturnCount:AdvancedToggle.kt$AdvancedToggleComponent$private fun validateChange(newValue: Boolean): ValidationState</ID>
    <ID>ReturnCount:AuthenticationManager.kt$AuthenticationManager$fun isAccountLocked(): Boolean</ID>
    <ID>ReturnCount:AuthenticationManager.kt$AuthenticationManager$fun isSessionValid(): Boolean</ID>
    <ID>ReturnCount:CalendarSync.kt$CalendarContractProvider$override fun deleteEvent(eventId: Long): Boolean</ID>
    <ID>ReturnCount:CalendarSync.kt$CalendarSync$private fun generateStudySlotForDay( dayPlan: DayPlan, date: LocalDate, prefs: CalendarPrefs ): StudyTimeSlot?</ID>
    <ID>ReturnCount:CompleteMurphyBookData.kt$CompleteMurphyBookData$fun getUnitsForWeekAndDay(week: Int, dayIndex: Int): List&lt;MurphyUnit&gt;</ID>
    <ID>ReturnCount:CompleteMurphyBookData.kt$CompleteMurphyBookData$fun parseMurphyTask(taskDetails: String?): MurphyTaskInfo?</ID>
    <ID>ReturnCount:DailyStudyReminderWorker.kt$DailyStudyReminderWorker$override suspend fun doWork(): Result</ID>
    <ID>ReturnCount:ErrorRecovery.kt$ErrorRecoveryManager$private fun isNetworkAvailable(): Boolean</ID>
    <ID>ReturnCount:ErrorRecovery.kt$NetworkRecoveryStrategy$override suspend fun execute( error: AppError, originalOperation: suspend () -&gt; Unit, recoveryManager: ErrorRecoveryManager ): RecoveryResult</ID>
    <ID>ReturnCount:ImageProcessingUtils.kt$ImageProcessingUtils$@Suppress("DEPRECATION") private fun detectPrimaryFace(bitmap: Bitmap): FaceDetectionResult?</ID>
    <ID>ReturnCount:ImageProcessingUtils.kt$ImageProcessingUtils$private fun cropToSquareWithFaceFocus(bitmap: Bitmap): Bitmap</ID>
    <ID>ReturnCount:NetworkSecurityManager.kt$NetworkSecurityManager$suspend fun downloadSecureFile(url: String, destinationPath: String): Result&lt;Unit&gt;</ID>
    <ID>ReturnCount:NotificationIntegration.kt$NotificationIntegration$fun areNotificationsAllowed(): Boolean</ID>
    <ID>ReturnCount:NotificationManager.kt$NotificationReceiver$override fun onReceive(context: Context, intent: Intent)</ID>
    <ID>ReturnCount:PlanRepository.kt$private fun alignStartWeekday(plan: List&lt;WeekPlan&gt;, cfg: PlanDurationSettings): List&lt;WeekPlan&gt;</ID>
    <ID>ReturnCount:PlanRepository.kt$private fun alignToEndDateIfProvided(plan: List&lt;WeekPlan&gt;, cfg: PlanDurationSettings): List&lt;WeekPlan&gt;</ID>
    <ID>ReturnCount:SecureStorageManager.kt$SecureStorageManager$suspend fun initializeSecurely(): Result&lt;Unit&gt;</ID>
    <ID>ReturnCount:SecureStorageManager.kt$SecureStorageManager$suspend fun storeSecureData(key: String, value: String): Result&lt;Unit&gt;</ID>
    <ID>ReturnCount:SecurityAndErrorCoordinator.kt$SecurityAndErrorCoordinator$private suspend fun performSecurityChecks(operation: String): Boolean</ID>
    <ID>ReturnCount:SecurityAndErrorCoordinator.kt$SecurityAndErrorCoordinator$suspend fun &lt;T&gt; executeSecureOperation( operation: String, block: suspend () -&gt; T ): SecureOperationResult&lt;T&gt;</ID>
    <ID>ReturnCount:SettingsErrorHandler.kt$SettingsErrorHandler$@Suppress("UNCHECKED_CAST") // Generic fallback method - prefer type-specific methods above private fun &lt;T&gt; resolveFallbackValue(operation: String, explicitFallback: T?): T?</ID>
    <ID>ReturnCount:SettingsErrorHandler.kt$SettingsErrorHandler$fun resolveBooleanFallback(operation: String, explicitFallback: Boolean?): Boolean?</ID>
    <ID>ReturnCount:SettingsErrorHandler.kt$SettingsErrorHandler$fun resolveFloatFallback(operation: String, explicitFallback: Float?): Float?</ID>
    <ID>ReturnCount:SettingsErrorHandler.kt$SettingsErrorHandler$fun resolveIntFallback(operation: String, explicitFallback: Int?): Int?</ID>
    <ID>ReturnCount:SettingsErrorHandler.kt$SettingsErrorHandler$fun resolveStringFallback(operation: String, explicitFallback: String?): String?</ID>
    <ID>ReturnCount:SettingsMigrationManager.kt$SettingsMigrationManager$suspend fun runMigrations(fromVersion: Int, toVersion: Int): MigrationResult</ID>
    <ID>ReturnCount:SettingsSecurityManager.kt$SettingsSecurityManager$fun validateAndSanitizeSettingKey(key: String): ValidationResult</ID>
    <ID>ReturnCount:SettingsSecurityManager.kt$SettingsSecurityManager$private fun validateCollectionValue(value: Collection&lt;*&gt;): ValidationResult</ID>
    <ID>ReturnCount:SettingsSecurityManager.kt$SettingsSecurityManager$private fun validateNumberValue(value: Number): ValidationResult</ID>
    <ID>ReturnCount:SettingsSecurityManager.kt$SettingsSecurityManager$private fun validateStringValue(value: String): ValidationResult</ID>
    <ID>SafeCast:SettingsRepository.kt$SettingsRepository$if (result is ValidationResult.Invalid) result else null</ID>
    <ID>SwallowedException:AnalyticsEngine.kt$AnalyticsEngine$e: Exception</ID>
    <ID>SwallowedException:AnalyticsViewModel.kt$AnalyticsViewModel$e: Exception</ID>
    <ID>SwallowedException:AppAnimations.kt$e: Exception</ID>
    <ID>SwallowedException:BackupSettingsViewModel.kt$BackupSettingsViewModel$exception: Exception</ID>
    <ID>SwallowedException:CalendarSettings.kt$CalendarSettingsRepository$e: Exception</ID>
    <ID>SwallowedException:CalendarSync.kt$CalendarContractProvider$e: Exception</ID>
    <ID>SwallowedException:CalendarSync.kt$CalendarSync$e: Exception</ID>
    <ID>SwallowedException:CalendarWorker.kt$CalendarWorkerManager$e: Exception</ID>
    <ID>SwallowedException:CalendarWorker.kt$CalendarWorkerManager$e: TimeoutException</ID>
    <ID>SwallowedException:Converters.kt$Converters$e: IllegalArgumentException</ID>
    <ID>SwallowedException:DailyStudyReminderWorker.kt$DailyStudyReminderWorker$e: Exception</ID>
    <ID>SwallowedException:DataArchitectureValidator.kt$DataArchitectureValidator$e: Exception</ID>
    <ID>SwallowedException:ErrorHandler.kt$ErrorHandler$e: Exception</ID>
    <ID>SwallowedException:ErrorRecovery.kt$ErrorRecoveryManager$e: Exception</ID>
    <ID>SwallowedException:ExamCountdownManager.kt$ExamCountdownWorker$e: Exception</ID>
    <ID>SwallowedException:FriendsRepository.kt$FriendsRepository$e: Exception</ID>
    <ID>SwallowedException:HapticFeedbackManager.kt$HapticFeedbackManager$e: Exception</ID>
    <ID>SwallowedException:IcsExporter.kt$IcsExporter$e: Exception</ID>
    <ID>SwallowedException:ImageProcessingUtils.kt$ImageProcessingUtils$e: Exception</ID>
    <ID>SwallowedException:ImageProcessor.kt$ImageProcessor$e: Exception</ID>
    <ID>SwallowedException:LanguageManager.kt$LanguageManager$e: Exception</ID>
    <ID>SwallowedException:LocaleAwareActivity.kt$LocaleAwareActivity$e: Exception</ID>
    <ID>SwallowedException:MainSettingsViewModel.kt$MainSettingsViewModel$e: Exception</ID>
    <ID>SwallowedException:NetworkHelper.kt$NetworkHelper$e: Exception</ID>
    <ID>SwallowedException:NetworkMonitor.kt$NetworkMonitor$e: Exception</ID>
    <ID>SwallowedException:NotificationManager.kt$NotificationManager$e: SecurityException</ID>
    <ID>SwallowedException:OfflineManager.kt$OfflineManager$e: Exception</ID>
    <ID>SwallowedException:PerformanceOptimizer.kt$PerformanceOptimizer$e: Exception</ID>
    <ID>SwallowedException:PlayStoreValidator.kt$PlayStoreValidator$e: Exception</ID>
    <ID>SwallowedException:PointEconomySystem.kt$PointEconomyManager$e: Exception</ID>
    <ID>SwallowedException:ProductionValidator.kt$ProductionValidator$e: Exception</ID>
    <ID>SwallowedException:QuestionDataSeeder.kt$QuestionDataSeeder$e: Exception</ID>
    <ID>SwallowedException:SecureStorageManager.kt$SecureStorageManager$e: Exception</ID>
    <ID>SwallowedException:SecurityAndErrorCoordinator.kt$SecurityAndErrorCoordinator$e: Exception</ID>
    <ID>SwallowedException:SecurityUtils.kt$SecurityUtils.InputValidator$e: Exception</ID>
    <ID>SwallowedException:SettingsActivity.kt$SettingsActivity$e: PackageManager.NameNotFoundException</ID>
    <ID>SwallowedException:SettingsBackupManager.kt$SettingsBackupManager$e: Exception</ID>
    <ID>SwallowedException:SettingsCategoryAdapter.kt$SettingsCategoryAdapter.CategoryViewHolder$e: Exception</ID>
    <ID>SwallowedException:SettingsEncryption.kt$SettingsEncryption$e: Exception</ID>
    <ID>SwallowedException:SettingsErrorHandler.kt$SettingsErrorHandler$e: ClassCastException</ID>
    <ID>SwallowedException:SettingsFeedbackManager.kt$SettingsFeedbackManager$e: Exception</ID>
    <ID>SwallowedException:SettingsManager.kt$SettingsManager$e: Exception</ID>
    <ID>SwallowedException:SettingsMigrationManager.kt$SettingsMigrationManager$e: Exception</ID>
    <ID>SwallowedException:SettingsRepository.kt$defaultValues$e: ClassCastException</ID>
    <ID>SwallowedException:SettingsSystemIntegration.kt$SettingsSystemManager$e: Exception</ID>
    <ID>SwallowedException:SettingsValidator.kt$SettingsErrorHandler$e: Exception</ID>
    <ID>SwallowedException:SettingsViewModel.kt$SettingsViewModel$exception: Exception</ID>
    <ID>SwallowedException:SocialScreen.kt$e: Exception</ID>
    <ID>SwallowedException:StudyPlanDatabase.kt$StudyPlanDatabase.Companion$e: Exception</ID>
    <ID>ThrowsCount:DataArchitectureValidator.kt$DataArchitectureValidator$private suspend fun validateIntegrationManager()</ID>
    <ID>ThrowsCount:SettingsEncryption.kt$SettingsEncryption$private fun validateAndExtractData(decryptedContent: String, encryptedData: EncryptedData): String</ID>
    <ID>ThrowsCount:SettingsRepository.kt$SettingsRepository$suspend fun updateGamificationSetting(id: String, value: Any)</ID>
    <ID>ThrowsCount:SettingsRepository.kt$SettingsRepository$suspend fun updateNotificationSetting(id: String, value: Any)</ID>
    <ID>ThrowsCount:SettingsRepository.kt$SettingsRepository$suspend fun updatePrivacySetting(id: String, value: Any)</ID>
    <ID>TooGenericExceptionCaught:AccessibilityViewModel.kt$AccessibilityViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AdvancedToggleViewModel.kt$AdvancedToggleViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Analytics.kt$Analytics$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:AnalyticsEngine.kt$AnalyticsEngine$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnalyticsViewModel.kt$AnalyticsViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AppAnimations.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AppIntegrationManager.kt$AppIntegrationManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AuthRepository.kt$AuthRepository$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AuthenticationManager.kt$AuthenticationManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BackupSettingsViewModel.kt$BackupSettingsViewModel$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:CalendarSettings.kt$CalendarSettingsRepository$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CalendarSync.kt$CalendarContractProvider$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CalendarSync.kt$CalendarSync$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CalendarWorker.kt$CalendarWorker$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CalendarWorker.kt$CalendarWorkerManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DailyStudyReminderWorker.kt$DailyStudyReminderWorker$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DataArchitectureValidator.kt$DataArchitectureValidator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DataConsistencyManager.kt$DataConsistencyManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:EnhancedAppIntegrationManager.kt$EnhancedAppIntegrationManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ErrorAnalytics.kt$ErrorAnalytics$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ErrorHandler.kt$ErrorHandler$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ErrorHandling.kt$ErrorHandler$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:ErrorHandling.kt$ErrorHandler$exception: Throwable</ID>
    <ID>TooGenericExceptionCaught:ErrorHandling.kt$exception: Throwable</ID>
    <ID>TooGenericExceptionCaught:ErrorRecovery.kt$DataRecoveryStrategy$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ErrorRecovery.kt$ErrorRecoveryManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ErrorRecovery.kt$NetworkRecoveryStrategy$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ErrorRecovery.kt$RetryRecoveryStrategy$e: Exception</ID>
    <ID>TooGenericExceptionCaught:EventHandler.kt$EventHandler$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ExamCountdownManager.kt$ExamCountdownWorker$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ExamDetailsScreen.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:FriendsRepository.kt$FriendsRepository$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GamificationSettingsViewModel.kt$GamificationSettingsViewModel$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:HapticFeedbackManager.kt$HapticFeedbackManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:IcsExporter.kt$IcsExporter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ImageProcessingUtils.kt$ImageProcessingUtils$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ImageProcessor.kt$ImageProcessor$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LanguageManager.kt$LanguageManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LocaleAwareActivity.kt$LocaleAwareActivity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MainSettingsViewModel.kt$MainSettingsViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MigrationIntegration.kt$MigrationIntegration$e: Exception</ID>
    <ID>TooGenericExceptionCaught:NetworkHelper.kt$NetworkHelper$e: Exception</ID>
    <ID>TooGenericExceptionCaught:NetworkMonitor.kt$NetworkMonitor$e: Exception</ID>
    <ID>TooGenericExceptionCaught:NetworkSecurityManager.kt$NetworkSecurityManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:NotificationSettingsViewModel.kt$NotificationSettingsViewModel$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:OfflineActionManager.kt$OfflineActionManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OfflineDataManager.kt$OfflineDataManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OfflineManager.kt$OfflineManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OriginalSettingsScreen.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OriginalSettingsScreen.kt$error: Throwable</ID>
    <ID>TooGenericExceptionCaught:PerformanceOptimizer.kt$PerformanceOptimizer$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PerformanceTestSuite.kt$PerformanceTestSuite$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PerformanceViewModel.kt$PerformanceViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PersistentSocialRepository.kt$PersistentSocialRepository$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PlayStoreValidator.kt$PlayStoreValidator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PointEconomySystem.kt$PointEconomyManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PrivacySettingsViewModel.kt$PrivacySettingsViewModel$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:ProductionValidator.kt$ProductionValidator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:QuestionDataSeeder.kt$QuestionDataSeeder$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RenderOptimizer.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SecureStorageManager.kt$SecureStorageManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SecurityAndErrorCoordinator.kt$SecurityAndErrorCoordinator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SecurityUtils.kt$SecurityUtils$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SecurityUtils.kt$SecurityUtils.InputValidator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsBackupManager.kt$SettingsBackupManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsBackupManager.kt$SettingsBackupManager$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsBackupViewModel.kt$SettingsBackupViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsCategoryAdapter.kt$SettingsCategoryAdapter.CategoryViewHolder$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsDetailViewModel.kt$SettingsDetailViewModel$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsEncryption.kt$SettingsEncryption$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsErrorHandler.kt$SettingsErrorHandler$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsFeedbackManager.kt$SettingsFeedbackManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsManager.kt$SettingsManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsMigrationManager.kt$SettingsMigrationManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsMigrationManager.kt$SettingsMigrationManager.&lt;no name provided&gt;$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsRepository.kt$SettingsRepository$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsSecurityManager.kt$SettingsSecurityManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsSystemIntegration.kt$SettingsSystemManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsValidator.kt$SettingsErrorHandler$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsValidator.kt$SettingsValidator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsViewModel.kt$SettingsViewModel$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:SharedAppViewModel.kt$SharedAppViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SocialScreen.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SocialScreen.kt$error: Exception</ID>
    <ID>TooGenericExceptionCaught:StatePreservationManager.kt$StatePreservationManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:StudyPlanDatabase.kt$StudyPlanDatabase.Companion$e: Exception</ID>
    <ID>TooGenericExceptionThrown:DataArchitectureValidator.kt$DataArchitectureValidator$throw Exception("App state not properly initialized")</ID>
    <ID>TooGenericExceptionThrown:DataArchitectureValidator.kt$DataArchitectureValidator$throw Exception("App state timestamp not properly set")</ID>
    <ID>TooGenericExceptionThrown:DataArchitectureValidator.kt$DataArchitectureValidator$throw Exception("Data flow validation failed: ${e.message}")</ID>
    <ID>TooGenericExceptionThrown:DataArchitectureValidator.kt$DataArchitectureValidator$throw Exception("Database connectivity issue: ${e.message}")</ID>
    <ID>TooGenericExceptionThrown:DataArchitectureValidator.kt$DataArchitectureValidator$throw Exception("EventBus is not properly routing events")</ID>
    <ID>TooGenericExceptionThrown:DataArchitectureValidator.kt$DataArchitectureValidator$throw Exception("Invalid achievement completion rate: ${achievementState.completionRate}")</ID>
    <ID>TooGenericExceptionThrown:DataArchitectureValidator.kt$DataArchitectureValidator$throw Exception("Invalid goal progress: ${progressState.goalProgress}")</ID>
    <ID>TooGenericExceptionThrown:DataArchitectureValidator.kt$DataArchitectureValidator$throw Exception("Invalid task completion rate: ${taskState.completionRate}")</ID>
    <ID>TooGenericExceptionThrown:DataArchitectureValidator.kt$DataArchitectureValidator$throw Exception("One or more repository refresh triggers not properly initialized")</ID>
    <ID>TooGenericExceptionThrown:SettingsDetailViewModel.kt$SettingsDetailViewModel$throw Exception(result.message)</ID>
    <ID>TooManyFunctions:AccessibilityManager.kt$AccessibilityEnhancementManager</ID>
    <ID>TooManyFunctions:AchievementDao.kt$AchievementDao</ID>
    <ID>TooManyFunctions:AchievementRepository.kt$AchievementRepository</ID>
    <ID>TooManyFunctions:AdvancedToggle.kt$AdvancedToggleComponent : LinearLayout</ID>
    <ID>TooManyFunctions:AnalyticsComponents.kt$com.mtlc.studyplan.analytics.AnalyticsComponents.kt</ID>
    <ID>TooManyFunctions:AnalyticsEngine.kt$AnalyticsEngine</ID>
    <ID>TooManyFunctions:AnalyticsScreen.kt$com.mtlc.studyplan.analytics.AnalyticsScreen.kt</ID>
    <ID>TooManyFunctions:AnimationIntegrationManager.kt$AnimationIntegrationManager</ID>
    <ID>TooManyFunctions:AnimationManager.kt$AnimationManager</ID>
    <ID>TooManyFunctions:AppIntegrationManager.kt$AppIntegrationManager</ID>
    <ID>TooManyFunctions:AuthenticationManager.kt$AuthenticationManager</ID>
    <ID>TooManyFunctions:BackupSettingsViewModel.kt$BackupSettingsViewModel : ViewModel</ID>
    <ID>TooManyFunctions:DataFormatters.kt$DataFormatters</ID>
    <ID>TooManyFunctions:EnhancedAppIntegrationManager.kt$EnhancedAppIntegrationManager</ID>
    <ID>TooManyFunctions:ErrorAnalytics.kt$ErrorAnalytics</ID>
    <ID>TooManyFunctions:ErrorRecovery.kt$ErrorRecoveryManager</ID>
    <ID>TooManyFunctions:EventBus.kt$ReactiveEventBus : EventBus</ID>
    <ID>TooManyFunctions:EventHandler.kt$EventHandler</ID>
    <ID>TooManyFunctions:GamificationIntegration.kt$GamificationIntegration</ID>
    <ID>TooManyFunctions:GamificationManager.kt$GamificationManager</ID>
    <ID>TooManyFunctions:IcsExporter.kt$IcsExporter</ID>
    <ID>TooManyFunctions:ImageProcessingUtils.kt$ImageProcessingUtils</ID>
    <ID>TooManyFunctions:NotificationIntegration.kt$NotificationIntegration</ID>
    <ID>TooManyFunctions:NotificationIntegration.kt$NotificationViewModel : ViewModel</ID>
    <ID>TooManyFunctions:NotificationManager.kt$NotificationManager</ID>
    <ID>TooManyFunctions:OfflineActionManager.kt$OfflineActionManager</ID>
    <ID>TooManyFunctions:OfflineDataManager.kt$OfflineDataManager</ID>
    <ID>TooManyFunctions:OfflineManager.kt$OfflineManager</ID>
    <ID>TooManyFunctions:PerformanceOptimizer.kt$PerformanceOptimizer : LifecycleEventObserver</ID>
    <ID>TooManyFunctions:PerformanceTestSuite.kt$PerformanceTestSuite</ID>
    <ID>TooManyFunctions:PlayStoreValidator.kt$PlayStoreValidator</ID>
    <ID>TooManyFunctions:ProductionValidator.kt$ProductionValidator</ID>
    <ID>TooManyFunctions:ProgressDao.kt$ProgressDao</ID>
    <ID>TooManyFunctions:QuestionDao.kt$QuestionDao</ID>
    <ID>TooManyFunctions:QuestionRepository.kt$QuestionRepository</ID>
    <ID>TooManyFunctions:ResponsiveLayout.kt$com.mtlc.studyplan.ui.responsive.ResponsiveLayout.kt</ID>
    <ID>TooManyFunctions:ResponsiveUtils.kt$com.mtlc.studyplan.ui.responsive.ResponsiveUtils.kt</ID>
    <ID>TooManyFunctions:SecureStorageManager.kt$SecureStorageManager</ID>
    <ID>TooManyFunctions:SettingsActivity.kt$SettingsActivity : AppCompatActivityOnCategoryClickListener</ID>
    <ID>TooManyFunctions:SettingsAnimationCoordinator.kt$SettingsAnimationCoordinator</ID>
    <ID>TooManyFunctions:SettingsAnimations.kt$SettingsAnimations</ID>
    <ID>TooManyFunctions:SettingsBackupManager.kt$SettingsBackupManager</ID>
    <ID>TooManyFunctions:SettingsErrorHandler.kt$SettingsErrorHandler</ID>
    <ID>TooManyFunctions:SettingsFeedbackManager.kt$SettingsFeedbackManager</ID>
    <ID>TooManyFunctions:SettingsManager.kt$SettingsManager</ID>
    <ID>TooManyFunctions:SettingsRepository.kt$SettingsRepository</ID>
    <ID>TooManyFunctions:SettingsSecurityManager.kt$SettingsSecurityManager</ID>
    <ID>TooManyFunctions:SettingsSystemIntegration.kt$SettingsSystemManager</ID>
    <ID>TooManyFunctions:SettingsViewModel.kt$SettingsViewModel : ViewModel</ID>
    <ID>TooManyFunctions:SharedAppViewModel.kt$SharedAppViewModel : AndroidViewModel</ID>
    <ID>TooManyFunctions:SharedElementTransitionHelper.kt$SharedElementTransitionHelper</ID>
    <ID>TooManyFunctions:SmartScheduler.kt$SmartScheduler</ID>
    <ID>TooManyFunctions:SocialDao.kt$SocialDao</ID>
    <ID>TooManyFunctions:SocialRepository.kt$SocialRepository</ID>
    <ID>TooManyFunctions:StreakDao.kt$StreakDao</ID>
    <ID>TooManyFunctions:StreakRepository.kt$StreakRepository</ID>
    <ID>TooManyFunctions:StudyPlanOverviewScreen.kt$com.mtlc.studyplan.studyplan.StudyPlanOverviewScreen.kt</ID>
    <ID>TooManyFunctions:SuccessFeedbackManager.kt$SuccessFeedbackManager</ID>
    <ID>TooManyFunctions:TaskDao.kt$TaskDao</ID>
    <ID>TooManyFunctions:TaskRepository.kt$TaskRepository</ID>
    <ID>TooManyFunctions:UiStateManager.kt$UiStateManager</ID>
    <ID>TooManyFunctions:UserSettingsDao.kt$UserSettingsDao</ID>
    <ID>TooManyFunctions:UserSettingsRepository.kt$UserSettingsRepository</ID>
    <ID>TooManyFunctions:WorkingTasksScreen.kt$com.mtlc.studyplan.core.WorkingTasksScreen.kt</ID>
    <ID>VariableNaming:ErrorAnalytics.kt$ErrorAnalytics$private val TAG = "StudyPlan_Analytics"</ID>
    <ID>VariableNaming:ErrorHandling.kt$ErrorLogger$private val TAG = "StudyPlan_Error"</ID>
  </CurrentIssues>
</SmellBaseline>
