name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper diff

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Check PR title format
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ ! "$PR_TITLE" =~ ^(feat|fix|hotfix|docs|style|refactor|perf|test|chore)(\(.+\))?: ]]; then
            echo "‚ùå PR title must follow conventional commits format"
            echo "Examples: feat: add new feature, fix(auth): resolve login bug"
            exit 1
          fi

      - name: Validate CHANGELOG updated
        run: |
          if git diff origin/${{ github.base_ref }} --name-only | grep -q "CHANGELOG.md"; then
            echo "‚úÖ CHANGELOG.md updated"
          else
            echo "‚ö†Ô∏è Warning: CHANGELOG.md not updated"
          fi

      - name: Run Lint
        run: ./gradlew lintDebug

      - name: Run Detekt
        run: ./gradlew detekt
        continue-on-error: true

      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest

      - name: Generate Coverage Report
        run: ./gradlew jacocoTestReport

      - name: Extract Coverage Percentage
        id: coverage
        run: |
          if [ -f app/build/reports/jacoco/jacocoTestReport/html/index.html ]; then
            COVERAGE=$(grep -oP 'Total.*?class="ctr2">\K\d+' app/build/reports/jacoco/jacocoTestReport/html/index.html | head -1)
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "‚úÖ Test Coverage: $COVERAGE%"
          else
            echo "coverage=0" >> $GITHUB_OUTPUT
          fi

      - name: Comment PR with results
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const jobStatus = '${{ job.status }}';
            const coverage = '${{ steps.coverage.outputs.coverage }}';
            let comment = '## üîç PR Validation Results\n\n';

            if (jobStatus === 'success') {
              comment += '‚úÖ **All checks passed!**\n\n';
              comment += '### üìä Quality Metrics\n';
              comment += `- **Test Coverage**: ${coverage}%\n`;
              comment += `- **Tests**: All passing ‚úÖ\n`;
              comment += `- **Lint**: No blocking issues ‚úÖ\n`;
              comment += `- **Code Quality**: Detekt analysis complete\n\n`;
              comment += '### Next Steps\n';
              comment += '- Review code changes\n';
              comment += '- Ensure CHANGELOG is updated\n';
              comment += '- Ready for merge when approved\n';
            } else {
              comment += '‚ùå **Some checks failed**\n\n';
              comment += '### üìä Quality Metrics\n';
              comment += `- **Test Coverage**: ${coverage}%\n\n`;
              comment += '### Action Required\n';
              comment += '- Check the workflow logs for details\n';
              comment += '- Fix failing tests or lint issues\n';
              comment += '- Update PR to resolve issues\n';
              comment += '\nüìù View detailed reports in the Actions artifacts\n';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  size-check:
    name: APK Size Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Release APK
        run: ./gradlew assembleRelease

      - name: Check APK size
        run: |
          APK_SIZE=$(stat -f%z app/build/outputs/apk/release/app-release.apk 2>/dev/null || stat -c%s app/build/outputs/apk/release/app-release.apk)
          APK_SIZE_MB=$((APK_SIZE / 1024 / 1024))
          echo "APK Size: ${APK_SIZE_MB}MB"

          if [ $APK_SIZE_MB -gt 50 ]; then
            echo "‚ö†Ô∏è Warning: APK size is larger than 50MB"
          else
            echo "‚úÖ APK size is acceptable"
          fi
